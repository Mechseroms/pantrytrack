
2025-03-19 14:36:27.422471 --- ERROR --- DatabaseError(message='duplicate key value violates unique constraint "sites_site_name_key"DETAIL:  Key (site_name)=(test) already exists.',
                                         payload=('test', 'This is my test site', datetime.datetime(2025, 3, 19, 14, 36, 27, 421459), 1, '{}', None, None, None),
                                         sql='INSERT INTO sites(site_name, site_description, creation_date, site_owner_id, flags, default_zone,default_auto_issue_location, default_primary_location) VALUES (%s, %s, %s, %s, %s, %s, %s, %s) RETURNING *;')
2025-03-19 14:41:51.498701 --- ERROR --- DatabaseError(message='malformed array literal: "{n,o,-,s,t,i,c,k, ,g,p,r,a,y,m,l,v,e,d,x,w,h,f,|,5,0}"LINE 3: ...ificial-preservatives-flavors-colors-net-wt-50}', '{n,o,-,s,...                                                             ^DETAIL:  Unexpected "," character.',
                                         payload=('{en:no-stick-cooking-spray-pam-olive-oil-made-extra-virgin-olive-oil-with-expeller-pressed-no-artificial-preservatives-flavors-colors-net-wt-50}', '{n,o,-,s,t,i,c,k, ,g,p,r,a,y,m,l,v,e,d,x,w,h,f,|,5,0}', '{"serving": "", "serving_unit": "", "calories": "", "calories_unit": "None", "proteins": "", "proteins_unit": "g", "fats": "", "fats_unit": "g", "carbohydrates": "", "carbohydrates_unit": "g", "sugars": "", "sugars_unit": "g", "sodium": "", "sodium_unit": "g", "fibers": "", "fibers_unit": "g"}', False, 0.0),
                                         sql='INSERT INTO test_food_info(ingrediants, food_groups, nutrients, expires, default_expiration) VALUES (%s, %s, %s, %s, %s) RETURNING *;')
2025-03-19 14:41:52.044494 --- ERROR --- DatabaseError(message='malformed array literal: "{C,a,r,b,o,n,t,e,d, ,W,,,H,i,g,h,F,u,c,s,S,y,p,m,l,P,A,N,v,f,.}"LINE 3: ...l-flavouring,en:flavouring,en:caffeine,en:e330}', '{C,a,r,b,...                                                             ^DETAIL:  Unexpected "," character.',
                                         payload=('{en:carbonated-water,en:water,en:high-fructose-corn-syrup,en:added-sugar,en:disaccharide,en:monosaccharide,en:fructose,en:glucose,en:corn-syrup,en:glucose-fructose-syrup,en:e150a,en:sugar,en:e338,en:natural-flavouring,en:flavouring,en:caffeine,en:e330}', '{C,a,r,b,o,n,t,e,d, ,W,,,H,i,g,h,F,u,c,s,S,y,p,m,l,P,A,N,v,f,.}', '{"serving": "", "serving_unit": "", "calories": "", "calories_unit": "None", "proteins": "", "proteins_unit": "g", "fats": "", "fats_unit": "g", "carbohydrates": "", "carbohydrates_unit": "g", "sugars": "", "sugars_unit": "g", "sodium": "", "sodium_unit": "", "fibers": "", "fibers_unit": ""}', False, 0.0),
                                         sql='INSERT INTO test_food_info(ingrediants, food_groups, nutrients, expires, default_expiration) VALUES (%s, %s, %s, %s, %s) RETURNING *;')
2025-03-19 14:41:52.069785 --- ERROR --- DatabaseError(message='malformed array literal: "{c,a,r,b,o,n,t,e,d, ,w,,,h,i,g,f,u,s,y,p,j,l,v,m,z,(,),5}"LINE 3: VALUES ('{c,a,r,b,o,n,t,e,d, ,w,,,h,i,g,f,u,s,y,p,j,l,v,m,z,...                ^DETAIL:  Unexpected "," character.',
                                         payload=('{c,a,r,b,o,n,t,e,d, ,w,,,h,i,g,f,u,s,y,p,j,l,v,m,z,(,),5}', '{c,,, ,a,r,b,o,n,t,e,d,w,h,i,g,f,u,s,y,p,j,l,v,m,z,(,),5}', '{"serving": "", "serving_unit": "", "calories": "", "calories_unit": "None", "proteins": "0", "proteins_unit": "g", "fats": "0", "fats_unit": "g", "carbohydrates": "46", "carbohydrates_unit": "g", "sugars": "46", "sugars_unit": "g", "sodium": "0.06", "sodium_unit": "mg", "fibers": "0", "fibers_unit": "g"}', False, 0.0),
                                         sql='INSERT INTO test_food_info(ingrediants, food_groups, nutrients, expires, default_expiration) VALUES (%s, %s, %s, %s, %s) RETURNING *;')
2025-03-19 14:41:54.274588 --- ERROR --- DatabaseError(message='malformed array literal: "{P,o,r,k,,, ,w,a,t,e,b,n,d,l,s,h,2,%,f,i,g,:,p,u,m,c,y,x,v,j,(,),.}"LINE 3: ...:salt,en:maltodextrin,en:lemon,en:citrus-fruit}', '{P,o,r,k,...                                                             ^DETAIL:  Unexpected "," character.',
                                         payload=('{en:pork,en:animal,en:water,en:beer,en:alcohol,en:and-less-than-2-of-the-following,en:e326,en:corn-syrup,en:added-sugar,en:disaccharide,en:dextrose,en:monosaccharide,en:glucose,en:spice,en:condiment,en:natural-flavouring,en:flavouring,en:e339,en:e262ii,en:e262,en:lemon-juice,en:fruit,en:juice,en:fruit-juice,en:collagen-casing,en:salt,en:maltodextrin,en:lemon,en:citrus-fruit}', '{P,o,r,k,,, ,w,a,t,e,b,n,d,l,s,h,2,%,f,i,g,:,p,u,m,c,y,x,v,j,(,),.}', '{"serving": "", "serving_unit": "", "calories": "", "calories_unit": "None", "proteins": "9", "proteins_unit": "g", "fats": "20", "fats_unit": "g", "carbohydrates": "2", "carbohydrates_unit": "g", "sugars": "1", "sugars_unit": "g", "sodium": "0.55", "sodium_unit": "mg", "fibers": "0", "fibers_unit": "g"}', False, 0.0),
                                         sql='INSERT INTO test_food_info(ingrediants, food_groups, nutrients, expires, default_expiration) VALUES (%s, %s, %s, %s, %s) RETURNING *;')
2025-03-19 14:41:56.869612 --- ERROR --- DatabaseError(message='malformed array literal: "{C,A,R,B,O,N,T,E,D, ,W,,,H,I,G,F,U,S,Y,L,V,M,Z,(,P,),s,m,a,r,t,l,o,b,e,•,5,1,0,7,c,n,f,i,-,8,4,3,2,9}"LINE 3: ...-432-97,en:preserves-freshness,en:preservative}', '{C,A,R,B,...                                                             ^DETAIL:  Unexpected "," character.',
                                         payload=('{en:carbonated-water,en:water,en:high-fructose-corn-syri-natural-and-artificial-flavor,en:e330,en:e211,en:caffeine,en:e414,en:sodium-citrate,en:minerals,en:sodium,en:calciu-smartlobel,en:disodium-edta,en:e444,en:e102,en:blue-bottled-under-the-authority-of-pepsico,en:inc,en:purchase,en:ny-10577-scan-for-info-call-for-info-1-800-432-97,en:preserves-freshness,en:preservative}', '{C,A,R,B,O,N,T,E,D, ,W,,,H,I,G,F,U,S,Y,L,V,M,Z,(,P,),s,m,a,r,t,l,o,b,e,•,5,1,0,7,c,n,f,i,-,8,4,3,2,9}', '{"serving": "", "serving_unit": "", "calories": "", "calories_unit": "None", "proteins": "", "proteins_unit": "g", "fats": "", "fats_unit": "g", "carbohydrates": "", "carbohydrates_unit": "g", "sugars": "", "sugars_unit": "g", "sodium": "", "sodium_unit": "g", "fibers": "", "fibers_unit": "g"}', False, 0.0),
                                         sql='INSERT INTO test_food_info(ingrediants, food_groups, nutrients, expires, default_expiration) VALUES (%s, %s, %s, %s, %s) RETURNING *;')
2025-03-19 14:49:48.467790 --- ERROR --- DatabaseError(message='duplicate key value violates unique constraint "sites_site_name_key"DETAIL:  Key (site_name)=(test) already exists.',
                                         payload=('test', 'This is my test site', datetime.datetime(2025, 3, 19, 14, 49, 48, 466784), 1, '{}', None, None, None),
                                         sql='INSERT INTO sites(site_name, site_description, creation_date, site_owner_id, flags, default_zone,default_auto_issue_location, default_primary_location) VALUES (%s, %s, %s, %s, %s, %s, %s, %s) RETURNING *;')
2025-03-19 14:49:53.691975 --- ERROR --- DatabaseError(message='duplicate key value violates unique constraint "sites_site_name_key"DETAIL:  Key (site_name)=(test) already exists.',
                                         payload=('test', 'This is my test site', datetime.datetime(2025, 3, 19, 14, 49, 53, 691975), 1, '{}', None, None, None),
                                         sql='INSERT INTO sites(site_name, site_description, creation_date, site_owner_id, flags, default_zone,default_auto_issue_location, default_primary_location) VALUES (%s, %s, %s, %s, %s, %s, %s, %s) RETURNING *;')
2025-03-19 14:49:54.200974 --- ERROR --- DatabaseError(message='duplicate key value violates unique constraint "sites_site_name_key"DETAIL:  Key (site_name)=(test) already exists.',
                                         payload=('test', 'This is my test site', datetime.datetime(2025, 3, 19, 14, 49, 54, 199652), 1, '{}', None, None, None),
                                         sql='INSERT INTO sites(site_name, site_description, creation_date, site_owner_id, flags, default_zone,default_auto_issue_location, default_primary_location) VALUES (%s, %s, %s, %s, %s, %s, %s, %s) RETURNING *;')
2025-03-19 14:50:55.176081 --- ERROR --- DatabaseError(message='malformed array literal: "{n,o,-,s,t,i,c,k, ,g,p,r,a,y,m,l,v,e,d,x,w,h,f,|,5,0}"LINE 3: ...ificial-preservatives-flavors-colors-net-wt-50}', '{n,o,-,s,...                                                             ^DETAIL:  Unexpected "," character.',
                                         payload=('{en:no-stick-cooking-spray-pam-olive-oil-made-extra-virgin-olive-oil-with-expeller-pressed-no-artificial-preservatives-flavors-colors-net-wt-50}', '{n,o,-,s,t,i,c,k, ,g,p,r,a,y,m,l,v,e,d,x,w,h,f,|,5,0}', '{"serving": "", "serving_unit": "", "calories": "", "calories_unit": "None", "proteins": "", "proteins_unit": "g", "fats": "", "fats_unit": "g", "carbohydrates": "", "carbohydrates_unit": "g", "sugars": "", "sugars_unit": "g", "sodium": "", "sodium_unit": "g", "fibers": "", "fibers_unit": "g"}', False, 0.0),
                                         sql='INSERT INTO test_food_info(ingrediants, food_groups, nutrients, expires, default_expiration) VALUES (%s, %s, %s, %s, %s) RETURNING *;')
2025-03-19 14:50:55.766282 --- ERROR --- DatabaseError(message='malformed array literal: "{C,a,r,b,o,n,t,e,d, ,W,,,H,i,g,h,F,u,c,s,S,y,p,m,l,P,A,N,v,f,.}"LINE 3: ...l-flavouring,en:flavouring,en:caffeine,en:e330}', '{C,a,r,b,...                                                             ^DETAIL:  Unexpected "," character.',
                                         payload=('{en:carbonated-water,en:water,en:high-fructose-corn-syrup,en:added-sugar,en:disaccharide,en:monosaccharide,en:fructose,en:glucose,en:corn-syrup,en:glucose-fructose-syrup,en:e150a,en:sugar,en:e338,en:natural-flavouring,en:flavouring,en:caffeine,en:e330}', '{C,a,r,b,o,n,t,e,d, ,W,,,H,i,g,h,F,u,c,s,S,y,p,m,l,P,A,N,v,f,.}', '{"serving": "", "serving_unit": "", "calories": "", "calories_unit": "None", "proteins": "", "proteins_unit": "g", "fats": "", "fats_unit": "g", "carbohydrates": "", "carbohydrates_unit": "g", "sugars": "", "sugars_unit": "g", "sodium": "", "sodium_unit": "", "fibers": "", "fibers_unit": ""}', False, 0.0),
                                         sql='INSERT INTO test_food_info(ingrediants, food_groups, nutrients, expires, default_expiration) VALUES (%s, %s, %s, %s, %s) RETURNING *;')
2025-03-19 14:50:55.800573 --- ERROR --- DatabaseError(message='malformed array literal: "{c,a,r,b,o,n,t,e,d, ,w,,,h,i,g,f,u,s,y,p,j,l,v,m,z,(,),5}"LINE 3: VALUES ('{c,a,r,b,o,n,t,e,d, ,w,,,h,i,g,f,u,s,y,p,j,l,v,m,z,...                ^DETAIL:  Unexpected "," character.',
                                         payload=('{c,a,r,b,o,n,t,e,d, ,w,,,h,i,g,f,u,s,y,p,j,l,v,m,z,(,),5}', '{c,,, ,a,r,b,o,n,t,e,d,w,h,i,g,f,u,s,y,p,j,l,v,m,z,(,),5}', '{"serving": "", "serving_unit": "", "calories": "", "calories_unit": "None", "proteins": "0", "proteins_unit": "g", "fats": "0", "fats_unit": "g", "carbohydrates": "46", "carbohydrates_unit": "g", "sugars": "46", "sugars_unit": "g", "sodium": "0.06", "sodium_unit": "mg", "fibers": "0", "fibers_unit": "g"}', False, 0.0),
                                         sql='INSERT INTO test_food_info(ingrediants, food_groups, nutrients, expires, default_expiration) VALUES (%s, %s, %s, %s, %s) RETURNING *;')
2025-03-19 14:50:58.247624 --- ERROR --- DatabaseError(message='malformed array literal: "{P,o,r,k,,, ,w,a,t,e,b,n,d,l,s,h,2,%,f,i,g,:,p,u,m,c,y,x,v,j,(,),.}"LINE 3: ...:salt,en:maltodextrin,en:lemon,en:citrus-fruit}', '{P,o,r,k,...                                                             ^DETAIL:  Unexpected "," character.',
                                         payload=('{en:pork,en:animal,en:water,en:beer,en:alcohol,en:and-less-than-2-of-the-following,en:e326,en:corn-syrup,en:added-sugar,en:disaccharide,en:dextrose,en:monosaccharide,en:glucose,en:spice,en:condiment,en:natural-flavouring,en:flavouring,en:e339,en:e262ii,en:e262,en:lemon-juice,en:fruit,en:juice,en:fruit-juice,en:collagen-casing,en:salt,en:maltodextrin,en:lemon,en:citrus-fruit}', '{P,o,r,k,,, ,w,a,t,e,b,n,d,l,s,h,2,%,f,i,g,:,p,u,m,c,y,x,v,j,(,),.}', '{"serving": "", "serving_unit": "", "calories": "", "calories_unit": "None", "proteins": "9", "proteins_unit": "g", "fats": "20", "fats_unit": "g", "carbohydrates": "2", "carbohydrates_unit": "g", "sugars": "1", "sugars_unit": "g", "sodium": "0.55", "sodium_unit": "mg", "fibers": "0", "fibers_unit": "g"}', False, 0.0),
                                         sql='INSERT INTO test_food_info(ingrediants, food_groups, nutrients, expires, default_expiration) VALUES (%s, %s, %s, %s, %s) RETURNING *;')
2025-03-19 14:51:01.113304 --- ERROR --- DatabaseError(message='malformed array literal: "{C,A,R,B,O,N,T,E,D, ,W,,,H,I,G,F,U,S,Y,L,V,M,Z,(,P,),s,m,a,r,t,l,o,b,e,•,5,1,0,7,c,n,f,i,-,8,4,3,2,9}"LINE 3: ...-432-97,en:preserves-freshness,en:preservative}', '{C,A,R,B,...                                                             ^DETAIL:  Unexpected "," character.',
                                         payload=('{en:carbonated-water,en:water,en:high-fructose-corn-syri-natural-and-artificial-flavor,en:e330,en:e211,en:caffeine,en:e414,en:sodium-citrate,en:minerals,en:sodium,en:calciu-smartlobel,en:disodium-edta,en:e444,en:e102,en:blue-bottled-under-the-authority-of-pepsico,en:inc,en:purchase,en:ny-10577-scan-for-info-call-for-info-1-800-432-97,en:preserves-freshness,en:preservative}', '{C,A,R,B,O,N,T,E,D, ,W,,,H,I,G,F,U,S,Y,L,V,M,Z,(,P,),s,m,a,r,t,l,o,b,e,•,5,1,0,7,c,n,f,i,-,8,4,3,2,9}', '{"serving": "", "serving_unit": "", "calories": "", "calories_unit": "None", "proteins": "", "proteins_unit": "g", "fats": "", "fats_unit": "g", "carbohydrates": "", "carbohydrates_unit": "g", "sugars": "", "sugars_unit": "g", "sodium": "", "sodium_unit": "g", "fibers": "", "fibers_unit": "g"}', False, 0.0),
                                         sql='INSERT INTO test_food_info(ingrediants, food_groups, nutrients, expires, default_expiration) VALUES (%s, %s, %s, %s, %s) RETURNING *;')
2025-03-19 14:51:21.420962 --- ERROR --- DatabaseError(message='malformed array literal: "{n,o,-,s,t,i,c,k, ,g,p,r,a,y,m,l,v,e,d,x,w,h,f,|,5,0}"LINE 3: ...ificial-preservatives-flavors-colors-net-wt-50}', '{n,o,-,s,...                                                             ^DETAIL:  Unexpected "," character.',
                                         payload=('{en:no-stick-cooking-spray-pam-olive-oil-made-extra-virgin-olive-oil-with-expeller-pressed-no-artificial-preservatives-flavors-colors-net-wt-50}', '{n,o,-,s,t,i,c,k, ,g,p,r,a,y,m,l,v,e,d,x,w,h,f,|,5,0}', '{"serving": "", "serving_unit": "", "calories": "", "calories_unit": "None", "proteins": "", "proteins_unit": "g", "fats": "", "fats_unit": "g", "carbohydrates": "", "carbohydrates_unit": "g", "sugars": "", "sugars_unit": "g", "sodium": "", "sodium_unit": "g", "fibers": "", "fibers_unit": "g"}', False, 0.0),
                                         sql='INSERT INTO test_food_info(ingrediants, food_groups, nutrients, expires, default_expiration) VALUES (%s, %s, %s, %s, %s) RETURNING *;')
2025-03-19 14:51:21.928350 --- ERROR --- DatabaseError(message='malformed array literal: "{C,a,r,b,o,n,t,e,d, ,W,,,H,i,g,h,F,u,c,s,S,y,p,m,l,P,A,N,v,f,.}"LINE 3: ...l-flavouring,en:flavouring,en:caffeine,en:e330}', '{C,a,r,b,...                                                             ^DETAIL:  Unexpected "," character.',
                                         payload=('{en:carbonated-water,en:water,en:high-fructose-corn-syrup,en:added-sugar,en:disaccharide,en:monosaccharide,en:fructose,en:glucose,en:corn-syrup,en:glucose-fructose-syrup,en:e150a,en:sugar,en:e338,en:natural-flavouring,en:flavouring,en:caffeine,en:e330}', '{C,a,r,b,o,n,t,e,d, ,W,,,H,i,g,h,F,u,c,s,S,y,p,m,l,P,A,N,v,f,.}', '{"serving": "", "serving_unit": "", "calories": "", "calories_unit": "None", "proteins": "", "proteins_unit": "g", "fats": "", "fats_unit": "g", "carbohydrates": "", "carbohydrates_unit": "g", "sugars": "", "sugars_unit": "g", "sodium": "", "sodium_unit": "", "fibers": "", "fibers_unit": ""}', False, 0.0),
                                         sql='INSERT INTO test_food_info(ingrediants, food_groups, nutrients, expires, default_expiration) VALUES (%s, %s, %s, %s, %s) RETURNING *;')
2025-03-19 14:51:21.961384 --- ERROR --- DatabaseError(message='malformed array literal: "{c,a,r,b,o,n,t,e,d, ,w,,,h,i,g,f,u,s,y,p,j,l,v,m,z,(,),5}"LINE 3: VALUES ('{c,a,r,b,o,n,t,e,d, ,w,,,h,i,g,f,u,s,y,p,j,l,v,m,z,...                ^DETAIL:  Unexpected "," character.',
                                         payload=('{c,a,r,b,o,n,t,e,d, ,w,,,h,i,g,f,u,s,y,p,j,l,v,m,z,(,),5}', '{c,,, ,a,r,b,o,n,t,e,d,w,h,i,g,f,u,s,y,p,j,l,v,m,z,(,),5}', '{"serving": "", "serving_unit": "", "calories": "", "calories_unit": "None", "proteins": "0", "proteins_unit": "g", "fats": "0", "fats_unit": "g", "carbohydrates": "46", "carbohydrates_unit": "g", "sugars": "46", "sugars_unit": "g", "sodium": "0.06", "sodium_unit": "mg", "fibers": "0", "fibers_unit": "g"}', False, 0.0),
                                         sql='INSERT INTO test_food_info(ingrediants, food_groups, nutrients, expires, default_expiration) VALUES (%s, %s, %s, %s, %s) RETURNING *;')
2025-03-19 14:51:24.296390 --- ERROR --- DatabaseError(message='malformed array literal: "{P,o,r,k,,, ,w,a,t,e,b,n,d,l,s,h,2,%,f,i,g,:,p,u,m,c,y,x,v,j,(,),.}"LINE 3: ...:salt,en:maltodextrin,en:lemon,en:citrus-fruit}', '{P,o,r,k,...                                                             ^DETAIL:  Unexpected "," character.',
                                         payload=('{en:pork,en:animal,en:water,en:beer,en:alcohol,en:and-less-than-2-of-the-following,en:e326,en:corn-syrup,en:added-sugar,en:disaccharide,en:dextrose,en:monosaccharide,en:glucose,en:spice,en:condiment,en:natural-flavouring,en:flavouring,en:e339,en:e262ii,en:e262,en:lemon-juice,en:fruit,en:juice,en:fruit-juice,en:collagen-casing,en:salt,en:maltodextrin,en:lemon,en:citrus-fruit}', '{P,o,r,k,,, ,w,a,t,e,b,n,d,l,s,h,2,%,f,i,g,:,p,u,m,c,y,x,v,j,(,),.}', '{"serving": "", "serving_unit": "", "calories": "", "calories_unit": "None", "proteins": "9", "proteins_unit": "g", "fats": "20", "fats_unit": "g", "carbohydrates": "2", "carbohydrates_unit": "g", "sugars": "1", "sugars_unit": "g", "sodium": "0.55", "sodium_unit": "mg", "fibers": "0", "fibers_unit": "g"}', False, 0.0),
                                         sql='INSERT INTO test_food_info(ingrediants, food_groups, nutrients, expires, default_expiration) VALUES (%s, %s, %s, %s, %s) RETURNING *;')
2025-03-19 14:51:26.954053 --- ERROR --- DatabaseError(message='malformed array literal: "{C,A,R,B,O,N,T,E,D, ,W,,,H,I,G,F,U,S,Y,L,V,M,Z,(,P,),s,m,a,r,t,l,o,b,e,•,5,1,0,7,c,n,f,i,-,8,4,3,2,9}"LINE 3: ...-432-97,en:preserves-freshness,en:preservative}', '{C,A,R,B,...                                                             ^DETAIL:  Unexpected "," character.',
                                         payload=('{en:carbonated-water,en:water,en:high-fructose-corn-syri-natural-and-artificial-flavor,en:e330,en:e211,en:caffeine,en:e414,en:sodium-citrate,en:minerals,en:sodium,en:calciu-smartlobel,en:disodium-edta,en:e444,en:e102,en:blue-bottled-under-the-authority-of-pepsico,en:inc,en:purchase,en:ny-10577-scan-for-info-call-for-info-1-800-432-97,en:preserves-freshness,en:preservative}', '{C,A,R,B,O,N,T,E,D, ,W,,,H,I,G,F,U,S,Y,L,V,M,Z,(,P,),s,m,a,r,t,l,o,b,e,•,5,1,0,7,c,n,f,i,-,8,4,3,2,9}', '{"serving": "", "serving_unit": "", "calories": "", "calories_unit": "None", "proteins": "", "proteins_unit": "g", "fats": "", "fats_unit": "g", "carbohydrates": "", "carbohydrates_unit": "g", "sugars": "", "sugars_unit": "g", "sodium": "", "sodium_unit": "g", "fibers": "", "fibers_unit": "g"}', False, 0.0),
                                         sql='INSERT INTO test_food_info(ingrediants, food_groups, nutrients, expires, default_expiration) VALUES (%s, %s, %s, %s, %s) RETURNING *;')
2025-03-19 14:54:27.195058 --- ERROR --- DatabaseError(message='malformed array literal: "{n,o,-,s,t,i,c,k, ,g,p,r,a,y,m,l,v,e,d,x,w,h,f,|,5,0}"LINE 3: ...ificial-preservatives-flavors-colors-net-wt-50}', '{n,o,-,s,...                                                             ^DETAIL:  Unexpected "," character.',
                                         payload=('{en:no-stick-cooking-spray-pam-olive-oil-made-extra-virgin-olive-oil-with-expeller-pressed-no-artificial-preservatives-flavors-colors-net-wt-50}', '{n,o,-,s,t,i,c,k, ,g,p,r,a,y,m,l,v,e,d,x,w,h,f,|,5,0}', '{"serving": "", "serving_unit": "", "calories": "", "calories_unit": "None", "proteins": "", "proteins_unit": "g", "fats": "", "fats_unit": "g", "carbohydrates": "", "carbohydrates_unit": "g", "sugars": "", "sugars_unit": "g", "sodium": "", "sodium_unit": "g", "fibers": "", "fibers_unit": "g"}', False, 0.0),
                                         sql='INSERT INTO test_food_info(ingrediants, food_groups, nutrients, expires, default_expiration) VALUES (%s, %s, %s, %s, %s) RETURNING *;')
2025-03-19 14:54:27.834941 --- ERROR --- DatabaseError(message='malformed array literal: "{C,a,r,b,o,n,t,e,d, ,W,,,H,i,g,h,F,u,c,s,S,y,p,m,l,P,A,N,v,f,.}"LINE 3: ...l-flavouring,en:flavouring,en:caffeine,en:e330}', '{C,a,r,b,...                                                             ^DETAIL:  Unexpected "," character.',
                                         payload=('{en:carbonated-water,en:water,en:high-fructose-corn-syrup,en:added-sugar,en:disaccharide,en:monosaccharide,en:fructose,en:glucose,en:corn-syrup,en:glucose-fructose-syrup,en:e150a,en:sugar,en:e338,en:natural-flavouring,en:flavouring,en:caffeine,en:e330}', '{C,a,r,b,o,n,t,e,d, ,W,,,H,i,g,h,F,u,c,s,S,y,p,m,l,P,A,N,v,f,.}', '{"serving": "", "serving_unit": "", "calories": "", "calories_unit": "None", "proteins": "", "proteins_unit": "g", "fats": "", "fats_unit": "g", "carbohydrates": "", "carbohydrates_unit": "g", "sugars": "", "sugars_unit": "g", "sodium": "", "sodium_unit": "", "fibers": "", "fibers_unit": ""}', False, 0.0),
                                         sql='INSERT INTO test_food_info(ingrediants, food_groups, nutrients, expires, default_expiration) VALUES (%s, %s, %s, %s, %s) RETURNING *;')
2025-03-19 14:54:27.879739 --- ERROR --- DatabaseError(message='malformed array literal: "{c,a,r,b,o,n,t,e,d, ,w,,,h,i,g,f,u,s,y,p,j,l,v,m,z,(,),5}"LINE 3: VALUES ('{c,a,r,b,o,n,t,e,d, ,w,,,h,i,g,f,u,s,y,p,j,l,v,m,z,...                ^DETAIL:  Unexpected "," character.',
                                         payload=('{c,a,r,b,o,n,t,e,d, ,w,,,h,i,g,f,u,s,y,p,j,l,v,m,z,(,),5}', '{c,,, ,a,r,b,o,n,t,e,d,w,h,i,g,f,u,s,y,p,j,l,v,m,z,(,),5}', '{"serving": "", "serving_unit": "", "calories": "", "calories_unit": "None", "proteins": "0", "proteins_unit": "g", "fats": "0", "fats_unit": "g", "carbohydrates": "46", "carbohydrates_unit": "g", "sugars": "46", "sugars_unit": "g", "sodium": "0.06", "sodium_unit": "mg", "fibers": "0", "fibers_unit": "g"}', False, 0.0),
                                         sql='INSERT INTO test_food_info(ingrediants, food_groups, nutrients, expires, default_expiration) VALUES (%s, %s, %s, %s, %s) RETURNING *;')
2025-03-19 14:54:30.255974 --- ERROR --- DatabaseError(message='malformed array literal: "{P,o,r,k,,, ,w,a,t,e,b,n,d,l,s,h,2,%,f,i,g,:,p,u,m,c,y,x,v,j,(,),.}"LINE 3: ...:salt,en:maltodextrin,en:lemon,en:citrus-fruit}', '{P,o,r,k,...                                                             ^DETAIL:  Unexpected "," character.',
                                         payload=('{en:pork,en:animal,en:water,en:beer,en:alcohol,en:and-less-than-2-of-the-following,en:e326,en:corn-syrup,en:added-sugar,en:disaccharide,en:dextrose,en:monosaccharide,en:glucose,en:spice,en:condiment,en:natural-flavouring,en:flavouring,en:e339,en:e262ii,en:e262,en:lemon-juice,en:fruit,en:juice,en:fruit-juice,en:collagen-casing,en:salt,en:maltodextrin,en:lemon,en:citrus-fruit}', '{P,o,r,k,,, ,w,a,t,e,b,n,d,l,s,h,2,%,f,i,g,:,p,u,m,c,y,x,v,j,(,),.}', '{"serving": "", "serving_unit": "", "calories": "", "calories_unit": "None", "proteins": "9", "proteins_unit": "g", "fats": "20", "fats_unit": "g", "carbohydrates": "2", "carbohydrates_unit": "g", "sugars": "1", "sugars_unit": "g", "sodium": "0.55", "sodium_unit": "mg", "fibers": "0", "fibers_unit": "g"}', False, 0.0),
                                         sql='INSERT INTO test_food_info(ingrediants, food_groups, nutrients, expires, default_expiration) VALUES (%s, %s, %s, %s, %s) RETURNING *;')
2025-03-19 14:54:32.971379 --- ERROR --- DatabaseError(message='malformed array literal: "{C,A,R,B,O,N,T,E,D, ,W,,,H,I,G,F,U,S,Y,L,V,M,Z,(,P,),s,m,a,r,t,l,o,b,e,•,5,1,0,7,c,n,f,i,-,8,4,3,2,9}"LINE 3: ...-432-97,en:preserves-freshness,en:preservative}', '{C,A,R,B,...                                                             ^DETAIL:  Unexpected "," character.',
                                         payload=('{en:carbonated-water,en:water,en:high-fructose-corn-syri-natural-and-artificial-flavor,en:e330,en:e211,en:caffeine,en:e414,en:sodium-citrate,en:minerals,en:sodium,en:calciu-smartlobel,en:disodium-edta,en:e444,en:e102,en:blue-bottled-under-the-authority-of-pepsico,en:inc,en:purchase,en:ny-10577-scan-for-info-call-for-info-1-800-432-97,en:preserves-freshness,en:preservative}', '{C,A,R,B,O,N,T,E,D, ,W,,,H,I,G,F,U,S,Y,L,V,M,Z,(,P,),s,m,a,r,t,l,o,b,e,•,5,1,0,7,c,n,f,i,-,8,4,3,2,9}', '{"serving": "", "serving_unit": "", "calories": "", "calories_unit": "None", "proteins": "", "proteins_unit": "g", "fats": "", "fats_unit": "g", "carbohydrates": "", "carbohydrates_unit": "g", "sugars": "", "sugars_unit": "g", "sodium": "", "sodium_unit": "g", "fibers": "", "fibers_unit": "g"}', False, 0.0),
                                         sql='INSERT INTO test_food_info(ingrediants, food_groups, nutrients, expires, default_expiration) VALUES (%s, %s, %s, %s, %s) RETURNING *;')
2025-03-19 14:56:35.749498 --- ERROR --- DatabaseError(message='malformed array literal: "{n,o,-,s,t,i,c,k, ,g,p,r,a,y,m,l,v,e,d,x,w,h,f,|,5,0}"LINE 3: ...ificial-preservatives-flavors-colors-net-wt-50}', '{n,o,-,s,...                                                             ^DETAIL:  Unexpected "," character.',
                                         payload=('{en:no-stick-cooking-spray-pam-olive-oil-made-extra-virgin-olive-oil-with-expeller-pressed-no-artificial-preservatives-flavors-colors-net-wt-50}', '{n,o,-,s,t,i,c,k, ,g,p,r,a,y,m,l,v,e,d,x,w,h,f,|,5,0}', '{"serving": "", "serving_unit": "", "calories": "", "calories_unit": "None", "proteins": "", "proteins_unit": "g", "fats": "", "fats_unit": "g", "carbohydrates": "", "carbohydrates_unit": "g", "sugars": "", "sugars_unit": "g", "sodium": "", "sodium_unit": "g", "fibers": "", "fibers_unit": "g"}', False, 0.0),
                                         sql='INSERT INTO test_food_info(ingrediants, food_groups, nutrients, expires, default_expiration) VALUES (%s, %s, %s, %s, %s) RETURNING *;')
2025-03-19 14:56:36.282177 --- ERROR --- DatabaseError(message='malformed array literal: "{C,a,r,b,o,n,t,e,d, ,W,,,H,i,g,h,F,u,c,s,S,y,p,m,l,P,A,N,v,f,.}"LINE 3: ...l-flavouring,en:flavouring,en:caffeine,en:e330}', '{C,a,r,b,...                                                             ^DETAIL:  Unexpected "," character.',
                                         payload=('{en:carbonated-water,en:water,en:high-fructose-corn-syrup,en:added-sugar,en:disaccharide,en:monosaccharide,en:fructose,en:glucose,en:corn-syrup,en:glucose-fructose-syrup,en:e150a,en:sugar,en:e338,en:natural-flavouring,en:flavouring,en:caffeine,en:e330}', '{C,a,r,b,o,n,t,e,d, ,W,,,H,i,g,h,F,u,c,s,S,y,p,m,l,P,A,N,v,f,.}', '{"serving": "", "serving_unit": "", "calories": "", "calories_unit": "None", "proteins": "", "proteins_unit": "g", "fats": "", "fats_unit": "g", "carbohydrates": "", "carbohydrates_unit": "g", "sugars": "", "sugars_unit": "g", "sodium": "", "sodium_unit": "", "fibers": "", "fibers_unit": ""}', False, 0.0),
                                         sql='INSERT INTO test_food_info(ingrediants, food_groups, nutrients, expires, default_expiration) VALUES (%s, %s, %s, %s, %s) RETURNING *;')
2025-03-19 14:56:36.311650 --- ERROR --- DatabaseError(message='malformed array literal: "{c,a,r,b,o,n,t,e,d, ,w,,,h,i,g,f,u,s,y,p,j,l,v,m,z,(,),5}"LINE 3: VALUES ('{c,a,r,b,o,n,t,e,d, ,w,,,h,i,g,f,u,s,y,p,j,l,v,m,z,...                ^DETAIL:  Unexpected "," character.',
                                         payload=('{c,a,r,b,o,n,t,e,d, ,w,,,h,i,g,f,u,s,y,p,j,l,v,m,z,(,),5}', '{c,,, ,a,r,b,o,n,t,e,d,w,h,i,g,f,u,s,y,p,j,l,v,m,z,(,),5}', '{"serving": "", "serving_unit": "", "calories": "", "calories_unit": "None", "proteins": "0", "proteins_unit": "g", "fats": "0", "fats_unit": "g", "carbohydrates": "46", "carbohydrates_unit": "g", "sugars": "46", "sugars_unit": "g", "sodium": "0.06", "sodium_unit": "mg", "fibers": "0", "fibers_unit": "g"}', False, 0.0),
                                         sql='INSERT INTO test_food_info(ingrediants, food_groups, nutrients, expires, default_expiration) VALUES (%s, %s, %s, %s, %s) RETURNING *;')
2025-03-19 14:56:38.381903 --- ERROR --- DatabaseError(message='malformed array literal: "{P,o,r,k,,, ,w,a,t,e,b,n,d,l,s,h,2,%,f,i,g,:,p,u,m,c,y,x,v,j,(,),.}"LINE 3: ...:salt,en:maltodextrin,en:lemon,en:citrus-fruit}', '{P,o,r,k,...                                                             ^DETAIL:  Unexpected "," character.',
                                         payload=('{en:pork,en:animal,en:water,en:beer,en:alcohol,en:and-less-than-2-of-the-following,en:e326,en:corn-syrup,en:added-sugar,en:disaccharide,en:dextrose,en:monosaccharide,en:glucose,en:spice,en:condiment,en:natural-flavouring,en:flavouring,en:e339,en:e262ii,en:e262,en:lemon-juice,en:fruit,en:juice,en:fruit-juice,en:collagen-casing,en:salt,en:maltodextrin,en:lemon,en:citrus-fruit}', '{P,o,r,k,,, ,w,a,t,e,b,n,d,l,s,h,2,%,f,i,g,:,p,u,m,c,y,x,v,j,(,),.}', '{"serving": "", "serving_unit": "", "calories": "", "calories_unit": "None", "proteins": "9", "proteins_unit": "g", "fats": "20", "fats_unit": "g", "carbohydrates": "2", "carbohydrates_unit": "g", "sugars": "1", "sugars_unit": "g", "sodium": "0.55", "sodium_unit": "mg", "fibers": "0", "fibers_unit": "g"}', False, 0.0),
                                         sql='INSERT INTO test_food_info(ingrediants, food_groups, nutrients, expires, default_expiration) VALUES (%s, %s, %s, %s, %s) RETURNING *;')
2025-03-19 14:56:40.965828 --- ERROR --- DatabaseError(message='malformed array literal: "{C,A,R,B,O,N,T,E,D, ,W,,,H,I,G,F,U,S,Y,L,V,M,Z,(,P,),s,m,a,r,t,l,o,b,e,•,5,1,0,7,c,n,f,i,-,8,4,3,2,9}"LINE 3: ...-432-97,en:preserves-freshness,en:preservative}', '{C,A,R,B,...                                                             ^DETAIL:  Unexpected "," character.',
                                         payload=('{en:carbonated-water,en:water,en:high-fructose-corn-syri-natural-and-artificial-flavor,en:e330,en:e211,en:caffeine,en:e414,en:sodium-citrate,en:minerals,en:sodium,en:calciu-smartlobel,en:disodium-edta,en:e444,en:e102,en:blue-bottled-under-the-authority-of-pepsico,en:inc,en:purchase,en:ny-10577-scan-for-info-call-for-info-1-800-432-97,en:preserves-freshness,en:preservative}', '{C,A,R,B,O,N,T,E,D, ,W,,,H,I,G,F,U,S,Y,L,V,M,Z,(,P,),s,m,a,r,t,l,o,b,e,•,5,1,0,7,c,n,f,i,-,8,4,3,2,9}', '{"serving": "", "serving_unit": "", "calories": "", "calories_unit": "None", "proteins": "", "proteins_unit": "g", "fats": "", "fats_unit": "g", "carbohydrates": "", "carbohydrates_unit": "g", "sugars": "", "sugars_unit": "g", "sodium": "", "sodium_unit": "g", "fibers": "", "fibers_unit": "g"}', False, 0.0),
                                         sql='INSERT INTO test_food_info(ingrediants, food_groups, nutrients, expires, default_expiration) VALUES (%s, %s, %s, %s, %s) RETURNING *;')
2025-03-19 14:57:29.949369 --- ERROR --- DatabaseError(message='malformed array literal: "{n,o,-,s,t,i,c,k, ,g,p,r,a,y,m,l,v,e,d,x,w,h,f,|,5,0}"LINE 3: ...ificial-preservatives-flavors-colors-net-wt-50}', '{n,o,-,s,...                                                             ^DETAIL:  Unexpected "," character.',
                                         payload=('{en:no-stick-cooking-spray-pam-olive-oil-made-extra-virgin-olive-oil-with-expeller-pressed-no-artificial-preservatives-flavors-colors-net-wt-50}', '{n,o,-,s,t,i,c,k, ,g,p,r,a,y,m,l,v,e,d,x,w,h,f,|,5,0}', '{"serving": "", "serving_unit": "", "calories": "", "calories_unit": "None", "proteins": "", "proteins_unit": "g", "fats": "", "fats_unit": "g", "carbohydrates": "", "carbohydrates_unit": "g", "sugars": "", "sugars_unit": "g", "sodium": "", "sodium_unit": "g", "fibers": "", "fibers_unit": "g"}', False, 0.0),
                                         sql='INSERT INTO test_food_info(ingrediants, food_groups, nutrients, expires, default_expiration) VALUES (%s, %s, %s, %s, %s) RETURNING *;')
2025-03-19 14:57:30.445350 --- ERROR --- DatabaseError(message='malformed array literal: "{C,a,r,b,o,n,t,e,d, ,W,,,H,i,g,h,F,u,c,s,S,y,p,m,l,P,A,N,v,f,.}"LINE 3: ...l-flavouring,en:flavouring,en:caffeine,en:e330}', '{C,a,r,b,...                                                             ^DETAIL:  Unexpected "," character.',
                                         payload=('{en:carbonated-water,en:water,en:high-fructose-corn-syrup,en:added-sugar,en:disaccharide,en:monosaccharide,en:fructose,en:glucose,en:corn-syrup,en:glucose-fructose-syrup,en:e150a,en:sugar,en:e338,en:natural-flavouring,en:flavouring,en:caffeine,en:e330}', '{C,a,r,b,o,n,t,e,d, ,W,,,H,i,g,h,F,u,c,s,S,y,p,m,l,P,A,N,v,f,.}', '{"serving": "", "serving_unit": "", "calories": "", "calories_unit": "None", "proteins": "", "proteins_unit": "g", "fats": "", "fats_unit": "g", "carbohydrates": "", "carbohydrates_unit": "g", "sugars": "", "sugars_unit": "g", "sodium": "", "sodium_unit": "", "fibers": "", "fibers_unit": ""}', False, 0.0),
                                         sql='INSERT INTO test_food_info(ingrediants, food_groups, nutrients, expires, default_expiration) VALUES (%s, %s, %s, %s, %s) RETURNING *;')
2025-03-19 14:57:30.482176 --- ERROR --- DatabaseError(message='malformed array literal: "{c,a,r,b,o,n,t,e,d, ,w,,,h,i,g,f,u,s,y,p,j,l,v,m,z,(,),5}"LINE 3: VALUES ('{c,a,r,b,o,n,t,e,d, ,w,,,h,i,g,f,u,s,y,p,j,l,v,m,z,...                ^DETAIL:  Unexpected "," character.',
                                         payload=('{c,a,r,b,o,n,t,e,d, ,w,,,h,i,g,f,u,s,y,p,j,l,v,m,z,(,),5}', '{c,,, ,a,r,b,o,n,t,e,d,w,h,i,g,f,u,s,y,p,j,l,v,m,z,(,),5}', '{"serving": "", "serving_unit": "", "calories": "", "calories_unit": "None", "proteins": "0", "proteins_unit": "g", "fats": "0", "fats_unit": "g", "carbohydrates": "46", "carbohydrates_unit": "g", "sugars": "46", "sugars_unit": "g", "sodium": "0.06", "sodium_unit": "mg", "fibers": "0", "fibers_unit": "g"}', False, 0.0),
                                         sql='INSERT INTO test_food_info(ingrediants, food_groups, nutrients, expires, default_expiration) VALUES (%s, %s, %s, %s, %s) RETURNING *;')
2025-03-19 14:57:32.484221 --- ERROR --- DatabaseError(message='malformed array literal: "{P,o,r,k,,, ,w,a,t,e,b,n,d,l,s,h,2,%,f,i,g,:,p,u,m,c,y,x,v,j,(,),.}"LINE 3: ...:salt,en:maltodextrin,en:lemon,en:citrus-fruit}', '{P,o,r,k,...                                                             ^DETAIL:  Unexpected "," character.',
                                         payload=('{en:pork,en:animal,en:water,en:beer,en:alcohol,en:and-less-than-2-of-the-following,en:e326,en:corn-syrup,en:added-sugar,en:disaccharide,en:dextrose,en:monosaccharide,en:glucose,en:spice,en:condiment,en:natural-flavouring,en:flavouring,en:e339,en:e262ii,en:e262,en:lemon-juice,en:fruit,en:juice,en:fruit-juice,en:collagen-casing,en:salt,en:maltodextrin,en:lemon,en:citrus-fruit}', '{P,o,r,k,,, ,w,a,t,e,b,n,d,l,s,h,2,%,f,i,g,:,p,u,m,c,y,x,v,j,(,),.}', '{"serving": "", "serving_unit": "", "calories": "", "calories_unit": "None", "proteins": "9", "proteins_unit": "g", "fats": "20", "fats_unit": "g", "carbohydrates": "2", "carbohydrates_unit": "g", "sugars": "1", "sugars_unit": "g", "sodium": "0.55", "sodium_unit": "mg", "fibers": "0", "fibers_unit": "g"}', False, 0.0),
                                         sql='INSERT INTO test_food_info(ingrediants, food_groups, nutrients, expires, default_expiration) VALUES (%s, %s, %s, %s, %s) RETURNING *;')
2025-03-19 14:57:34.898794 --- ERROR --- DatabaseError(message='malformed array literal: "{C,A,R,B,O,N,T,E,D, ,W,,,H,I,G,F,U,S,Y,L,V,M,Z,(,P,),s,m,a,r,t,l,o,b,e,•,5,1,0,7,c,n,f,i,-,8,4,3,2,9}"LINE 3: ...-432-97,en:preserves-freshness,en:preservative}', '{C,A,R,B,...                                                             ^DETAIL:  Unexpected "," character.',
                                         payload=('{en:carbonated-water,en:water,en:high-fructose-corn-syri-natural-and-artificial-flavor,en:e330,en:e211,en:caffeine,en:e414,en:sodium-citrate,en:minerals,en:sodium,en:calciu-smartlobel,en:disodium-edta,en:e444,en:e102,en:blue-bottled-under-the-authority-of-pepsico,en:inc,en:purchase,en:ny-10577-scan-for-info-call-for-info-1-800-432-97,en:preserves-freshness,en:preservative}', '{C,A,R,B,O,N,T,E,D, ,W,,,H,I,G,F,U,S,Y,L,V,M,Z,(,P,),s,m,a,r,t,l,o,b,e,•,5,1,0,7,c,n,f,i,-,8,4,3,2,9}', '{"serving": "", "serving_unit": "", "calories": "", "calories_unit": "None", "proteins": "", "proteins_unit": "g", "fats": "", "fats_unit": "g", "carbohydrates": "", "carbohydrates_unit": "g", "sugars": "", "sugars_unit": "g", "sodium": "", "sodium_unit": "g", "fibers": "", "fibers_unit": "g"}', False, 0.0),
                                         sql='INSERT INTO test_food_info(ingrediants, food_groups, nutrients, expires, default_expiration) VALUES (%s, %s, %s, %s, %s) RETURNING *;')
2025-03-19 15:00:20.968131 --- ERROR --- DatabaseError(message='malformed array literal: "{n,o,-,s,t,i,c,k, ,g,p,r,a,y,m,l,v,e,d,x,w,h,f,|,5,0}"LINE 3: ...ificial-preservatives-flavors-colors-net-wt-50}', '{n,o,-,s,...                                                             ^DETAIL:  Unexpected "," character.',
                                         payload=('{en:no-stick-cooking-spray-pam-olive-oil-made-extra-virgin-olive-oil-with-expeller-pressed-no-artificial-preservatives-flavors-colors-net-wt-50}', '{n,o,-,s,t,i,c,k, ,g,p,r,a,y,m,l,v,e,d,x,w,h,f,|,5,0}', '{"serving": "", "serving_unit": "", "calories": "", "calories_unit": "None", "proteins": "", "proteins_unit": "g", "fats": "", "fats_unit": "g", "carbohydrates": "", "carbohydrates_unit": "g", "sugars": "", "sugars_unit": "g", "sodium": "", "sodium_unit": "g", "fibers": "", "fibers_unit": "g"}', False, 0.0),
                                         sql='INSERT INTO test_food_info(ingrediants, food_groups, nutrients, expires, default_expiration) VALUES (%s, %s, %s, %s, %s) RETURNING *;')
2025-03-19 15:00:21.697897 --- ERROR --- DatabaseError(message='malformed array literal: "{C,a,r,b,o,n,t,e,d, ,W,,,H,i,g,h,F,u,c,s,S,y,p,m,l,P,A,N,v,f,.}"LINE 3: ...l-flavouring,en:flavouring,en:caffeine,en:e330}', '{C,a,r,b,...                                                             ^DETAIL:  Unexpected "," character.',
                                         payload=('{en:carbonated-water,en:water,en:high-fructose-corn-syrup,en:added-sugar,en:disaccharide,en:monosaccharide,en:fructose,en:glucose,en:corn-syrup,en:glucose-fructose-syrup,en:e150a,en:sugar,en:e338,en:natural-flavouring,en:flavouring,en:caffeine,en:e330}', '{C,a,r,b,o,n,t,e,d, ,W,,,H,i,g,h,F,u,c,s,S,y,p,m,l,P,A,N,v,f,.}', '{"serving": "", "serving_unit": "", "calories": "", "calories_unit": "None", "proteins": "", "proteins_unit": "g", "fats": "", "fats_unit": "g", "carbohydrates": "", "carbohydrates_unit": "g", "sugars": "", "sugars_unit": "g", "sodium": "", "sodium_unit": "", "fibers": "", "fibers_unit": ""}', False, 0.0),
                                         sql='INSERT INTO test_food_info(ingrediants, food_groups, nutrients, expires, default_expiration) VALUES (%s, %s, %s, %s, %s) RETURNING *;')
2025-03-19 15:00:21.731824 --- ERROR --- DatabaseError(message='malformed array literal: "{c,a,r,b,o,n,t,e,d, ,w,,,h,i,g,f,u,s,y,p,j,l,v,m,z,(,),5}"LINE 3: VALUES ('{c,a,r,b,o,n,t,e,d, ,w,,,h,i,g,f,u,s,y,p,j,l,v,m,z,...                ^DETAIL:  Unexpected "," character.',
                                         payload=('{c,a,r,b,o,n,t,e,d, ,w,,,h,i,g,f,u,s,y,p,j,l,v,m,z,(,),5}', '{c,,, ,a,r,b,o,n,t,e,d,w,h,i,g,f,u,s,y,p,j,l,v,m,z,(,),5}', '{"serving": "", "serving_unit": "", "calories": "", "calories_unit": "None", "proteins": "0", "proteins_unit": "g", "fats": "0", "fats_unit": "g", "carbohydrates": "46", "carbohydrates_unit": "g", "sugars": "46", "sugars_unit": "g", "sodium": "0.06", "sodium_unit": "mg", "fibers": "0", "fibers_unit": "g"}', False, 0.0),
                                         sql='INSERT INTO test_food_info(ingrediants, food_groups, nutrients, expires, default_expiration) VALUES (%s, %s, %s, %s, %s) RETURNING *;')
2025-03-19 15:00:24.310086 --- ERROR --- DatabaseError(message='malformed array literal: "{P,o,r,k,,, ,w,a,t,e,b,n,d,l,s,h,2,%,f,i,g,:,p,u,m,c,y,x,v,j,(,),.}"LINE 3: ...:salt,en:maltodextrin,en:lemon,en:citrus-fruit}', '{P,o,r,k,...                                                             ^DETAIL:  Unexpected "," character.',
                                         payload=('{en:pork,en:animal,en:water,en:beer,en:alcohol,en:and-less-than-2-of-the-following,en:e326,en:corn-syrup,en:added-sugar,en:disaccharide,en:dextrose,en:monosaccharide,en:glucose,en:spice,en:condiment,en:natural-flavouring,en:flavouring,en:e339,en:e262ii,en:e262,en:lemon-juice,en:fruit,en:juice,en:fruit-juice,en:collagen-casing,en:salt,en:maltodextrin,en:lemon,en:citrus-fruit}', '{P,o,r,k,,, ,w,a,t,e,b,n,d,l,s,h,2,%,f,i,g,:,p,u,m,c,y,x,v,j,(,),.}', '{"serving": "", "serving_unit": "", "calories": "", "calories_unit": "None", "proteins": "9", "proteins_unit": "g", "fats": "20", "fats_unit": "g", "carbohydrates": "2", "carbohydrates_unit": "g", "sugars": "1", "sugars_unit": "g", "sodium": "0.55", "sodium_unit": "mg", "fibers": "0", "fibers_unit": "g"}', False, 0.0),
                                         sql='INSERT INTO test_food_info(ingrediants, food_groups, nutrients, expires, default_expiration) VALUES (%s, %s, %s, %s, %s) RETURNING *;')
2025-03-19 15:00:28.181626 --- ERROR --- DatabaseError(message='malformed array literal: "{C,A,R,B,O,N,T,E,D, ,W,,,H,I,G,F,U,S,Y,L,V,M,Z,(,P,),s,m,a,r,t,l,o,b,e,•,5,1,0,7,c,n,f,i,-,8,4,3,2,9}"LINE 3: ...-432-97,en:preserves-freshness,en:preservative}', '{C,A,R,B,...                                                             ^DETAIL:  Unexpected "," character.',
                                         payload=('{en:carbonated-water,en:water,en:high-fructose-corn-syri-natural-and-artificial-flavor,en:e330,en:e211,en:caffeine,en:e414,en:sodium-citrate,en:minerals,en:sodium,en:calciu-smartlobel,en:disodium-edta,en:e444,en:e102,en:blue-bottled-under-the-authority-of-pepsico,en:inc,en:purchase,en:ny-10577-scan-for-info-call-for-info-1-800-432-97,en:preserves-freshness,en:preservative}', '{C,A,R,B,O,N,T,E,D, ,W,,,H,I,G,F,U,S,Y,L,V,M,Z,(,P,),s,m,a,r,t,l,o,b,e,•,5,1,0,7,c,n,f,i,-,8,4,3,2,9}', '{"serving": "", "serving_unit": "", "calories": "", "calories_unit": "None", "proteins": "", "proteins_unit": "g", "fats": "", "fats_unit": "g", "carbohydrates": "", "carbohydrates_unit": "g", "sugars": "", "sugars_unit": "g", "sodium": "", "sodium_unit": "g", "fibers": "", "fibers_unit": "g"}', False, 0.0),
                                         sql='INSERT INTO test_food_info(ingrediants, food_groups, nutrients, expires, default_expiration) VALUES (%s, %s, %s, %s, %s) RETURNING *;')
2025-03-19 15:01:38.354494 --- ERROR --- DatabaseError(message='malformed array literal: "{n,o,-,s,t,i,c,k, ,g,p,r,a,y,m,l,v,e,d,x,w,h,f,|,5,0}"LINE 3: ...ificial-preservatives-flavors-colors-net-wt-50}', '{n,o,-,s,...                                                             ^DETAIL:  Unexpected "," character.',
                                         payload=('{en:no-stick-cooking-spray-pam-olive-oil-made-extra-virgin-olive-oil-with-expeller-pressed-no-artificial-preservatives-flavors-colors-net-wt-50}', '{n,o,-,s,t,i,c,k, ,g,p,r,a,y,m,l,v,e,d,x,w,h,f,|,5,0}', '{"serving": "", "serving_unit": "", "calories": "", "calories_unit": "None", "proteins": "", "proteins_unit": "g", "fats": "", "fats_unit": "g", "carbohydrates": "", "carbohydrates_unit": "g", "sugars": "", "sugars_unit": "g", "sodium": "", "sodium_unit": "g", "fibers": "", "fibers_unit": "g"}', False, 0.0),
                                         sql='INSERT INTO main_food_info(ingrediants, food_groups, nutrients, expires, default_expiration) VALUES (%s, %s, %s, %s, %s) RETURNING *;')
2025-03-19 15:01:39.091670 --- ERROR --- DatabaseError(message='malformed array literal: "{C,a,r,b,o,n,t,e,d, ,W,,,H,i,g,h,F,u,c,s,S,y,p,m,l,P,A,N,v,f,.}"LINE 3: ...l-flavouring,en:flavouring,en:caffeine,en:e330}', '{C,a,r,b,...                                                             ^DETAIL:  Unexpected "," character.',
                                         payload=('{en:carbonated-water,en:water,en:high-fructose-corn-syrup,en:added-sugar,en:disaccharide,en:monosaccharide,en:fructose,en:glucose,en:corn-syrup,en:glucose-fructose-syrup,en:e150a,en:sugar,en:e338,en:natural-flavouring,en:flavouring,en:caffeine,en:e330}', '{C,a,r,b,o,n,t,e,d, ,W,,,H,i,g,h,F,u,c,s,S,y,p,m,l,P,A,N,v,f,.}', '{"serving": "", "serving_unit": "", "calories": "", "calories_unit": "None", "proteins": "", "proteins_unit": "g", "fats": "", "fats_unit": "g", "carbohydrates": "", "carbohydrates_unit": "g", "sugars": "", "sugars_unit": "g", "sodium": "", "sodium_unit": "", "fibers": "", "fibers_unit": ""}', False, 0.0),
                                         sql='INSERT INTO main_food_info(ingrediants, food_groups, nutrients, expires, default_expiration) VALUES (%s, %s, %s, %s, %s) RETURNING *;')
2025-03-19 15:01:39.122455 --- ERROR --- DatabaseError(message='malformed array literal: "{c,a,r,b,o,n,t,e,d, ,w,,,h,i,g,f,u,s,y,p,j,l,v,m,z,(,),5}"LINE 3: VALUES ('{c,a,r,b,o,n,t,e,d, ,w,,,h,i,g,f,u,s,y,p,j,l,v,m,z,...                ^DETAIL:  Unexpected "," character.',
                                         payload=('{c,a,r,b,o,n,t,e,d, ,w,,,h,i,g,f,u,s,y,p,j,l,v,m,z,(,),5}', '{c,,, ,a,r,b,o,n,t,e,d,w,h,i,g,f,u,s,y,p,j,l,v,m,z,(,),5}', '{"serving": "", "serving_unit": "", "calories": "", "calories_unit": "None", "proteins": "0", "proteins_unit": "g", "fats": "0", "fats_unit": "g", "carbohydrates": "46", "carbohydrates_unit": "g", "sugars": "46", "sugars_unit": "g", "sodium": "0.06", "sodium_unit": "mg", "fibers": "0", "fibers_unit": "g"}', False, 0.0),
                                         sql='INSERT INTO main_food_info(ingrediants, food_groups, nutrients, expires, default_expiration) VALUES (%s, %s, %s, %s, %s) RETURNING *;')
2025-03-19 15:01:42.144637 --- ERROR --- DatabaseError(message='malformed array literal: "{P,o,r,k,,, ,w,a,t,e,b,n,d,l,s,h,2,%,f,i,g,:,p,u,m,c,y,x,v,j,(,),.}"LINE 3: ...:salt,en:maltodextrin,en:lemon,en:citrus-fruit}', '{P,o,r,k,...                                                             ^DETAIL:  Unexpected "," character.',
                                         payload=('{en:pork,en:animal,en:water,en:beer,en:alcohol,en:and-less-than-2-of-the-following,en:e326,en:corn-syrup,en:added-sugar,en:disaccharide,en:dextrose,en:monosaccharide,en:glucose,en:spice,en:condiment,en:natural-flavouring,en:flavouring,en:e339,en:e262ii,en:e262,en:lemon-juice,en:fruit,en:juice,en:fruit-juice,en:collagen-casing,en:salt,en:maltodextrin,en:lemon,en:citrus-fruit}', '{P,o,r,k,,, ,w,a,t,e,b,n,d,l,s,h,2,%,f,i,g,:,p,u,m,c,y,x,v,j,(,),.}', '{"serving": "", "serving_unit": "", "calories": "", "calories_unit": "None", "proteins": "9", "proteins_unit": "g", "fats": "20", "fats_unit": "g", "carbohydrates": "2", "carbohydrates_unit": "g", "sugars": "1", "sugars_unit": "g", "sodium": "0.55", "sodium_unit": "mg", "fibers": "0", "fibers_unit": "g"}', False, 0.0),
                                         sql='INSERT INTO main_food_info(ingrediants, food_groups, nutrients, expires, default_expiration) VALUES (%s, %s, %s, %s, %s) RETURNING *;')
2025-03-19 15:01:45.898068 --- ERROR --- DatabaseError(message='malformed array literal: "{C,A,R,B,O,N,T,E,D, ,W,,,H,I,G,F,U,S,Y,L,V,M,Z,(,P,),s,m,a,r,t,l,o,b,e,•,5,1,0,7,c,n,f,i,-,8,4,3,2,9}"LINE 3: ...-432-97,en:preserves-freshness,en:preservative}', '{C,A,R,B,...                                                             ^DETAIL:  Unexpected "," character.',
                                         payload=('{en:carbonated-water,en:water,en:high-fructose-corn-syri-natural-and-artificial-flavor,en:e330,en:e211,en:caffeine,en:e414,en:sodium-citrate,en:minerals,en:sodium,en:calciu-smartlobel,en:disodium-edta,en:e444,en:e102,en:blue-bottled-under-the-authority-of-pepsico,en:inc,en:purchase,en:ny-10577-scan-for-info-call-for-info-1-800-432-97,en:preserves-freshness,en:preservative}', '{C,A,R,B,O,N,T,E,D, ,W,,,H,I,G,F,U,S,Y,L,V,M,Z,(,P,),s,m,a,r,t,l,o,b,e,•,5,1,0,7,c,n,f,i,-,8,4,3,2,9}', '{"serving": "", "serving_unit": "", "calories": "", "calories_unit": "None", "proteins": "", "proteins_unit": "g", "fats": "", "fats_unit": "g", "carbohydrates": "", "carbohydrates_unit": "g", "sugars": "", "sugars_unit": "g", "sodium": "", "sodium_unit": "g", "fibers": "", "fibers_unit": "g"}', False, 0.0),
                                         sql='INSERT INTO main_food_info(ingrediants, food_groups, nutrients, expires, default_expiration) VALUES (%s, %s, %s, %s, %s) RETURNING *;')
2025-03-19 15:24:34.268066 --- ERROR --- DatabaseError(message='null value in column "item_type" of relation "test_items" violates not-null constraintDETAIL:  Failing row contains (2420, %085239110744%, Diced Tomatoes, 1, , {}, {}, 2450, 2450, 2420, single, null, &&%085239110744%&&Diced Tomatoes&&).',
                                         payload=('%085239110744%', 'Diced Tomatoes', 1, '', '{}', '{}', 2450, 2450, 2420, 'single', None, '&&%085239110744%&&Diced Tomatoes&&'),
                                         sql='INSERT INTO test_items(barcode, item_name, brand, description, tags, links, item_info_id, logistics_info_id, food_info_id, row_type, item_type, search_string) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING *;')
2025-03-19 15:24:34.275772 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%01201303%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:24:34.285777 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%07831504%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:24:34.295490 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%01231003%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:24:34.304806 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%049000007251%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:24:34.314640 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%04905004%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:24:34.323110 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%01231003%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:24:34.330796 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%PenneNoodles%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:24:34.338177 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%07831504%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:24:34.346223 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%FIBERONE%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:24:34.353814 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%SpaghettiSauce%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:24:34.362011 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%SpaghettiSauce%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:24:34.369416 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%SpaghettiSauce%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:24:34.375914 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%SpaghettiSauce%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:24:34.384479 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%SmokedSausage%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:24:34.392456 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%SpagehttiMeatballs%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:24:34.400547 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%SpagehttiMeatballs%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:24:34.408550 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%SpagehttiMeatballs%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:24:34.417426 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%04963406%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:24:34.425024 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%SpaghettiSauce%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:26:23.542486 --- ERROR --- DatabaseError(message='null value in column "item_type" of relation "test_items" violates not-null constraintDETAIL:  Failing row contains (2422, %085239110744%, Diced Tomatoes, 1, , {}, {}, 2452, 2452, 2422, single, null, &&%085239110744%&&Diced Tomatoes&&).',
                                         payload=('%085239110744%', 'Diced Tomatoes', 1, '', '{}', '{}', 2452, 2452, 2422, 'single', None, '&&%085239110744%&&Diced Tomatoes&&'),
                                         sql='INSERT INTO test_items(barcode, item_name, brand, description, tags, links, item_info_id, logistics_info_id, food_info_id, row_type, item_type, search_string) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING *;')
2025-03-19 15:26:23.550679 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%01201303%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:26:23.558832 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%07831504%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:26:23.566519 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%01231003%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:26:23.574410 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%049000007251%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:26:23.582457 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%04905004%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:26:23.590494 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%01231003%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:26:23.598954 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%PenneNoodles%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:26:23.606624 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%07831504%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:26:23.614475 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%FIBERONE%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:26:23.622267 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%SpaghettiSauce%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:26:23.630290 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%SpaghettiSauce%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:26:23.638330 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%SpaghettiSauce%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:26:23.645659 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%SpaghettiSauce%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:26:23.653421 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%SmokedSausage%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:26:23.661556 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%SpagehttiMeatballs%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:26:23.669451 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%SpagehttiMeatballs%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:26:23.678515 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%SpagehttiMeatballs%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:26:23.685986 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%04963406%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:26:23.694799 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%SpaghettiSauce%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:27:07.023584 --- ERROR --- DatabaseError(message='duplicate key value violates unique constraint "test_logistics_info_barcode_key"DETAIL:  Key (barcode)=(%194346066674%) already exists.',
                                         payload=('%194346066674%', 1, 1, 1, 1),
                                         sql='INSERT INTO test_logistics_info(barcode, primary_location, primary_zone, auto_issue_location, auto_issue_zone) VALUES (%s, %s, %s, %s, %s) RETURNING *;')
2025-03-19 15:27:07.031336 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%PenneNoodles%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:27:07.039649 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%PenneNoodles%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:27:07.047219 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%test123%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:27:07.055467 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%%poptart%%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:27:07.063442 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%SmokedSausage%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:27:07.071542 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%SmokedSausage%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:27:07.079304 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%012000231315%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:27:07.087192 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%012000231346%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:27:07.091852 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%012000183669%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:27:07.099208 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%012000130311%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:27:07.108464 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%DicedTomatoes%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:27:07.116312 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%DicedTomatoes%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:27:07.123628 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%01201303%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:27:07.131791 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%07831504%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:27:07.139810 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%01231003%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:27:07.147612 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%049000007251%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:27:07.155886 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%04905004%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:27:07.163577 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%01231003%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:27:07.171429 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%PenneNoodles%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:27:07.180046 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%07831504%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:27:07.188010 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%FIBERONE%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:27:07.195229 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%SpaghettiSauce%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:27:07.203456 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%SpaghettiSauce%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:27:07.211597 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%SpaghettiSauce%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:27:07.219621 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%SpaghettiSauce%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:27:07.228627 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%SmokedSausage%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:27:07.236261 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%SpagehttiMeatballs%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:27:07.244440 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%SpagehttiMeatballs%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:27:07.252545 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%SpagehttiMeatballs%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:27:07.260698 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%04963406%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:27:07.269477 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%SpaghettiSauce%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:31:10.230475 --- ERROR --- DatabaseError(message='duplicate key value violates unique constraint "test_logistics_info_barcode_key"DETAIL:  Key (barcode)=(%194346066674%) already exists.',
                                         payload=('%194346066674%', 1, 1, 1, 1),
                                         sql='INSERT INTO test_logistics_info(barcode, primary_location, primary_zone, auto_issue_location, auto_issue_zone) VALUES (%s, %s, %s, %s, %s) RETURNING *;')
2025-03-19 15:31:10.237981 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%194346066674%', 2243, '{"id": null, "barcode": "%194346066674%", "name": "Bath Tissue", "brands": "Great Value", "brands_tags": ["Great Value"], "categories": [""], "food_groups_tags": [""], "ingredients_hierarchy": [""], "ingredients_text_en": "", "nutriments": {"carbohydrates": "0", "carbohydrates_100g": 0, "carbohydrates_unit": "", "carbohydrates_value": 0, "energy": 0, "energy-kcal": 0, "energy-kcal_100g": 0, "energy-kcal_unit": "", "energy-kcal_value": 0, "energy-kcal_value_computed": 0, "energy_100g": 0, "energy_unit": "", "energy_value": 0, "fat": 0, "fat_100g": 0, "fat_unit": "", "fat_value": 0, "fruits-vegetables-legumes-estimate-from-ingredients_100g": 0, "fruits-vegetables-legumes-estimate-from-ingredients_serving": 0, "fruits-vegetables-nuts-estimate-from-ingredients_100g": 0, "fruits-vegetables-nuts-estimate-from-ingredients_serving": 0, "nova-group": 0, "nova-group_100g": 0, "nova-group_serving": 0, "proteins": "0", "proteins_100g": 0, "proteins_unit": "", "proteins_value": 0, "saturated-fat": 0, "saturated-fat_100g": 0, "saturated-fat_unit": "", "saturated-fat_value": 0, "sugars": "0", "sugars_100g": 0, "sugars_unit": "", "sugars_value": 0, "serving": "", "calories": "", "fats": "", "sodium": "", "fibers": "", "serving_unit": "", "calories_unit": null, "fats_unit": "", "sodium_unit": "", "fibers_unit": ""}, "packaging": "case", "product_name": "Bath Tissue", "product_quantity": 1, "product_quantity_unit": "case", "quantity": 1, "cost": 0, "transactions_id": 260, "safety_stock": "None", "lead_time": 0, "groups": [], "links": [], "AI_Pickable": "FALSE", "entry_type": "ITEM", "linked_list": [], "search_string": "Great Value&&&&Bath Tissue", "qty_on_hand": 1}', '12'),
                                         sql='INSERT INTO test_itemlinks(barcode, link, data, conv_factor) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-03-19 15:31:10.243882 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%PenneNoodles%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:31:10.251395 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%PenneNoodles%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:31:10.259470 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%test123%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:31:10.268159 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%%poptart%%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:31:10.276318 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%SmokedSausage%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:31:10.284456 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%SmokedSausage%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:31:10.292716 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%012000231315%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:31:10.300418 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%012000231346%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:31:10.308740 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%012000183669%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:31:10.316130 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%012000130311%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:31:10.324250 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%DicedTomatoes%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:31:10.332690 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%DicedTomatoes%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:31:10.340437 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%01201303%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:31:10.348522 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%07831504%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:31:10.356004 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%01231003%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:31:10.364768 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%049000007251%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:31:10.373328 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%04905004%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:31:10.381134 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%01231003%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:31:10.389177 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%PenneNoodles%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:31:10.397305 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%07831504%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:31:10.405962 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%FIBERONE%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:31:10.413475 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%SpaghettiSauce%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:31:10.421573 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%SpaghettiSauce%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:31:10.429606 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%SpaghettiSauce%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:31:10.438404 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%SpaghettiSauce%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:31:10.446132 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%SmokedSausage%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:31:10.454212 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%SpagehttiMeatballs%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:31:10.462474 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%SpagehttiMeatballs%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:31:10.470630 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%SpagehttiMeatballs%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:31:10.478509 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%04963406%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:31:10.487403 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%SpaghettiSauce%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:31:28.348704 --- ERROR --- DatabaseError(message='duplicate key value violates unique constraint "test_logistics_info_barcode_key"DETAIL:  Key (barcode)=(%194346066674%) already exists.',
                                         payload=('%194346066674%', 1, 1, 1, 1),
                                         sql='INSERT INTO test_logistics_info(barcode, primary_location, primary_zone, auto_issue_location, auto_issue_zone) VALUES (%s, %s, %s, %s, %s) RETURNING *;')
2025-03-19 15:31:28.356213 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%194346066674%', 2243, '{"id": null, "barcode": "%194346066674%", "name": "Bath Tissue", "brands": "Great Value", "brands_tags": ["Great Value"], "categories": [""], "food_groups_tags": [""], "ingredients_hierarchy": [""], "ingredients_text_en": "", "nutriments": {"carbohydrates": "0", "carbohydrates_100g": 0, "carbohydrates_unit": "", "carbohydrates_value": 0, "energy": 0, "energy-kcal": 0, "energy-kcal_100g": 0, "energy-kcal_unit": "", "energy-kcal_value": 0, "energy-kcal_value_computed": 0, "energy_100g": 0, "energy_unit": "", "energy_value": 0, "fat": 0, "fat_100g": 0, "fat_unit": "", "fat_value": 0, "fruits-vegetables-legumes-estimate-from-ingredients_100g": 0, "fruits-vegetables-legumes-estimate-from-ingredients_serving": 0, "fruits-vegetables-nuts-estimate-from-ingredients_100g": 0, "fruits-vegetables-nuts-estimate-from-ingredients_serving": 0, "nova-group": 0, "nova-group_100g": 0, "nova-group_serving": 0, "proteins": "0", "proteins_100g": 0, "proteins_unit": "", "proteins_value": 0, "saturated-fat": 0, "saturated-fat_100g": 0, "saturated-fat_unit": "", "saturated-fat_value": 0, "sugars": "0", "sugars_100g": 0, "sugars_unit": "", "sugars_value": 0, "serving": "", "calories": "", "fats": "", "sodium": "", "fibers": "", "serving_unit": "", "calories_unit": null, "fats_unit": "", "sodium_unit": "", "fibers_unit": ""}, "packaging": "case", "product_name": "Bath Tissue", "product_quantity": 1, "product_quantity_unit": "case", "quantity": 1, "cost": 0, "transactions_id": 260, "safety_stock": "None", "lead_time": 0, "groups": [], "links": [], "AI_Pickable": "FALSE", "entry_type": "ITEM", "linked_list": [], "search_string": "Great Value&&&&Bath Tissue", "qty_on_hand": 1}', '12'),
                                         sql='INSERT INTO test_itemlinks(barcode, link, data, conv_factor) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-03-19 15:31:28.361126 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%PenneNoodles%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:31:28.369883 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%PenneNoodles%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:31:28.377646 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%test123%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:31:28.385069 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%%poptart%%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:31:28.393162 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%SmokedSausage%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:31:28.401077 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%SmokedSausage%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:31:28.409528 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%012000231315%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:31:28.417548 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%012000231346%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:31:28.425716 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%012000183669%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:31:28.433171 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%012000130311%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:31:28.441580 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%DicedTomatoes%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:31:28.449676 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%DicedTomatoes%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:31:28.457602 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%01201303%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:31:28.464831 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%07831504%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:31:28.473322 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%01231003%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:31:28.480547 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%049000007251%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:31:28.488443 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%04905004%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:31:28.496522 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%01231003%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:31:28.504632 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%PenneNoodles%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:31:28.512456 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%07831504%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:31:28.520367 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%FIBERONE%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:31:28.528695 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%SpaghettiSauce%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:31:28.536158 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%SpaghettiSauce%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:31:28.544343 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%SpaghettiSauce%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:31:28.552127 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%SpaghettiSauce%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:31:28.560073 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%SmokedSausage%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:31:28.567627 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%SpagehttiMeatballs%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:31:28.576455 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%SpagehttiMeatballs%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:31:28.584196 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%SpagehttiMeatballs%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:31:28.592674 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%04963406%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:31:28.600183 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%SpaghettiSauce%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:32:33.256297 --- ERROR --- DatabaseError(message='duplicate key value violates unique constraint "test_logistics_info_barcode_key"DETAIL:  Key (barcode)=(%194346066674%) already exists.',
                                         payload=('%194346066674%', 1, 1, 1, 1),
                                         sql='INSERT INTO test_logistics_info(barcode, primary_location, primary_zone, auto_issue_location, auto_issue_zone) VALUES (%s, %s, %s, %s, %s) RETURNING *;')
2025-03-19 15:32:33.264350 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%194346066674%', 2243, '{"id": null, "barcode": "%194346066674%", "name": "Bath Tissue", "brands": "Great Value", "brands_tags": ["Great Value"], "categories": [""], "food_groups_tags": [""], "ingredients_hierarchy": [""], "ingredients_text_en": "", "nutriments": {"carbohydrates": "0", "carbohydrates_100g": 0, "carbohydrates_unit": "", "carbohydrates_value": 0, "energy": 0, "energy-kcal": 0, "energy-kcal_100g": 0, "energy-kcal_unit": "", "energy-kcal_value": 0, "energy-kcal_value_computed": 0, "energy_100g": 0, "energy_unit": "", "energy_value": 0, "fat": 0, "fat_100g": 0, "fat_unit": "", "fat_value": 0, "fruits-vegetables-legumes-estimate-from-ingredients_100g": 0, "fruits-vegetables-legumes-estimate-from-ingredients_serving": 0, "fruits-vegetables-nuts-estimate-from-ingredients_100g": 0, "fruits-vegetables-nuts-estimate-from-ingredients_serving": 0, "nova-group": 0, "nova-group_100g": 0, "nova-group_serving": 0, "proteins": "0", "proteins_100g": 0, "proteins_unit": "", "proteins_value": 0, "saturated-fat": 0, "saturated-fat_100g": 0, "saturated-fat_unit": "", "saturated-fat_value": 0, "sugars": "0", "sugars_100g": 0, "sugars_unit": "", "sugars_value": 0, "serving": "", "calories": "", "fats": "", "sodium": "", "fibers": "", "serving_unit": "", "calories_unit": null, "fats_unit": "", "sodium_unit": "", "fibers_unit": ""}, "packaging": "case", "product_name": "Bath Tissue", "product_quantity": 1, "product_quantity_unit": "case", "quantity": 1, "cost": 0, "transactions_id": 260, "safety_stock": "None", "lead_time": 0, "groups": [], "links": [], "AI_Pickable": "FALSE", "entry_type": "ITEM", "linked_list": [], "search_string": "Great Value&&&&Bath Tissue", "qty_on_hand": 1}', '12'),
                                         sql='INSERT INTO test_itemlinks(barcode, link, data, conv_factor) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-03-19 15:32:33.269359 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%PenneNoodles%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:32:33.277356 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%PenneNoodles%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:32:33.285602 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%test123%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:32:33.293842 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%%poptart%%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:32:33.301972 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%SmokedSausage%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:32:33.309914 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%SmokedSausage%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:32:33.317935 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%012000231315%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:32:33.325438 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%012000231346%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:32:33.333619 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%012000183669%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:32:33.341857 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%012000130311%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:32:33.349790 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%DicedTomatoes%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:32:33.357362 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%DicedTomatoes%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:32:33.365222 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%01201303%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:32:33.373164 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%07831504%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:32:33.380703 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%01231003%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:32:33.389658 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%049000007251%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:32:33.397327 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%04905004%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:32:33.405066 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%01231003%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:32:33.413270 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%PenneNoodles%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:32:33.421759 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%07831504%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:32:33.429797 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%FIBERONE%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:32:33.438712 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%SpaghettiSauce%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:32:33.445997 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%SpaghettiSauce%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:32:33.454472 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%SpaghettiSauce%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:32:33.462496 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%SpaghettiSauce%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:32:33.470570 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%SmokedSausage%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:32:33.479439 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%SpagehttiMeatballs%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:32:33.487754 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%SpagehttiMeatballs%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:32:33.496109 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%SpagehttiMeatballs%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:32:33.504067 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%04963406%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:32:33.511681 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%SpaghettiSauce%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:32:57.291836 --- ERROR --- DatabaseError(message='duplicate key value violates unique constraint "test_logistics_info_barcode_key"DETAIL:  Key (barcode)=(%194346066674%) already exists.',
                                         payload=('%194346066674%', 1, 1, 1, 1),
                                         sql='INSERT INTO test_logistics_info(barcode, primary_location, primary_zone, auto_issue_location, auto_issue_zone) VALUES (%s, %s, %s, %s, %s) RETURNING *;')
2025-03-19 15:32:57.297675 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%194346066674%', 2243, '{"id": null, "barcode": "%194346066674%", "name": "Bath Tissue", "brands": "Great Value", "brands_tags": ["Great Value"], "categories": [""], "food_groups_tags": [""], "ingredients_hierarchy": [""], "ingredients_text_en": "", "nutriments": {"carbohydrates": "0", "carbohydrates_100g": 0, "carbohydrates_unit": "", "carbohydrates_value": 0, "energy": 0, "energy-kcal": 0, "energy-kcal_100g": 0, "energy-kcal_unit": "", "energy-kcal_value": 0, "energy-kcal_value_computed": 0, "energy_100g": 0, "energy_unit": "", "energy_value": 0, "fat": 0, "fat_100g": 0, "fat_unit": "", "fat_value": 0, "fruits-vegetables-legumes-estimate-from-ingredients_100g": 0, "fruits-vegetables-legumes-estimate-from-ingredients_serving": 0, "fruits-vegetables-nuts-estimate-from-ingredients_100g": 0, "fruits-vegetables-nuts-estimate-from-ingredients_serving": 0, "nova-group": 0, "nova-group_100g": 0, "nova-group_serving": 0, "proteins": "0", "proteins_100g": 0, "proteins_unit": "", "proteins_value": 0, "saturated-fat": 0, "saturated-fat_100g": 0, "saturated-fat_unit": "", "saturated-fat_value": 0, "sugars": "0", "sugars_100g": 0, "sugars_unit": "", "sugars_value": 0, "serving": "", "calories": "", "fats": "", "sodium": "", "fibers": "", "serving_unit": "", "calories_unit": null, "fats_unit": "", "sodium_unit": "", "fibers_unit": ""}, "packaging": "case", "product_name": "Bath Tissue", "product_quantity": 1, "product_quantity_unit": "case", "quantity": 1, "cost": 0, "transactions_id": 260, "safety_stock": "None", "lead_time": 0, "groups": [], "links": [], "AI_Pickable": "FALSE", "entry_type": "ITEM", "linked_list": [], "search_string": "Great Value&&&&Bath Tissue", "qty_on_hand": 1}', '12'),
                                         sql='INSERT INTO test_itemlinks(barcode, link, data, conv_factor) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-03-19 15:32:57.302063 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%PenneNoodles%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:32:57.309448 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%PenneNoodles%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:32:57.317558 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%test123%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:32:57.325978 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%%poptart%%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:32:57.333622 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%SmokedSausage%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:32:57.341481 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%SmokedSausage%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:32:57.349660 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%012000231315%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:32:57.357600 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%012000231346%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:32:57.365444 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%012000183669%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:32:57.373992 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%012000130311%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:32:57.381471 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%DicedTomatoes%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:32:57.390154 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%DicedTomatoes%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:32:57.398451 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%01201303%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:32:57.405686 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%07831504%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:32:57.413902 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%01231003%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:32:57.422345 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%049000007251%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:32:57.430092 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%04905004%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:32:57.438140 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%01231003%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:32:57.446719 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%PenneNoodles%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:32:57.454838 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%07831504%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:32:57.463496 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%FIBERONE%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:32:57.471481 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%SpaghettiSauce%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:32:57.479616 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%SpaghettiSauce%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:32:57.488213 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%SpaghettiSauce%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:32:57.495315 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%SpaghettiSauce%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:32:57.504453 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%SmokedSausage%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:32:57.511498 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%SpagehttiMeatballs%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:32:57.520450 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%SpagehttiMeatballs%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:32:57.527706 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%SpagehttiMeatballs%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:32:57.536284 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%04963406%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:32:57.543633 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%SpaghettiSauce%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:33:05.901260 --- ERROR --- DatabaseError(message='duplicate key value violates unique constraint "test_logistics_info_barcode_key"DETAIL:  Key (barcode)=(%194346066674%) already exists.',
                                         payload=('%194346066674%', 1, 1, 1, 1),
                                         sql='INSERT INTO test_logistics_info(barcode, primary_location, primary_zone, auto_issue_location, auto_issue_zone) VALUES (%s, %s, %s, %s, %s) RETURNING *;')
2025-03-19 15:33:05.907429 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%194346066674%', 2243, '{"id": null, "barcode": "%194346066674%", "name": "Bath Tissue", "brands": "Great Value", "brands_tags": ["Great Value"], "categories": [""], "food_groups_tags": [""], "ingredients_hierarchy": [""], "ingredients_text_en": "", "nutriments": {"carbohydrates": "0", "carbohydrates_100g": 0, "carbohydrates_unit": "", "carbohydrates_value": 0, "energy": 0, "energy-kcal": 0, "energy-kcal_100g": 0, "energy-kcal_unit": "", "energy-kcal_value": 0, "energy-kcal_value_computed": 0, "energy_100g": 0, "energy_unit": "", "energy_value": 0, "fat": 0, "fat_100g": 0, "fat_unit": "", "fat_value": 0, "fruits-vegetables-legumes-estimate-from-ingredients_100g": 0, "fruits-vegetables-legumes-estimate-from-ingredients_serving": 0, "fruits-vegetables-nuts-estimate-from-ingredients_100g": 0, "fruits-vegetables-nuts-estimate-from-ingredients_serving": 0, "nova-group": 0, "nova-group_100g": 0, "nova-group_serving": 0, "proteins": "0", "proteins_100g": 0, "proteins_unit": "", "proteins_value": 0, "saturated-fat": 0, "saturated-fat_100g": 0, "saturated-fat_unit": "", "saturated-fat_value": 0, "sugars": "0", "sugars_100g": 0, "sugars_unit": "", "sugars_value": 0, "serving": "", "calories": "", "fats": "", "sodium": "", "fibers": "", "serving_unit": "", "calories_unit": null, "fats_unit": "", "sodium_unit": "", "fibers_unit": ""}, "packaging": "case", "product_name": "Bath Tissue", "product_quantity": 1, "product_quantity_unit": "case", "quantity": 1, "cost": 0, "transactions_id": 260, "safety_stock": "None", "lead_time": 0, "groups": [], "links": [], "AI_Pickable": "FALSE", "entry_type": "ITEM", "linked_list": [], "search_string": "Great Value&&&&Bath Tissue", "qty_on_hand": 1}', '12'),
                                         sql='INSERT INTO test_itemlinks(barcode, link, data, conv_factor) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-03-19 15:33:05.912457 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%PenneNoodles%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:33:05.920814 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%PenneNoodles%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:33:05.928821 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%test123%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:33:05.937342 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%%poptart%%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:33:05.944895 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%SmokedSausage%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:33:05.954265 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%SmokedSausage%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:33:05.962197 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%012000231315%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:33:05.970449 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%012000231346%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:33:05.978406 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%012000183669%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:33:05.987430 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%012000130311%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:33:05.995294 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%DicedTomatoes%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:33:06.004444 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%DicedTomatoes%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:33:06.011336 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%01201303%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:33:06.019699 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%07831504%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:33:06.028505 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%01231003%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:33:06.036661 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%049000007251%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:33:06.045209 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%04905004%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:33:06.053455 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%01231003%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:33:06.061838 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%PenneNoodles%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:33:06.069309 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%07831504%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:33:06.078409 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%FIBERONE%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:33:06.086341 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%SpaghettiSauce%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:33:06.094684 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%SpaghettiSauce%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:33:06.102970 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%SpaghettiSauce%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:33:06.111667 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%SpaghettiSauce%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:33:06.120629 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%SmokedSausage%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:33:06.128594 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%SpagehttiMeatballs%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:33:06.137428 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%SpagehttiMeatballs%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:33:06.145853 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%SpagehttiMeatballs%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:33:06.153963 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%04963406%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 15:33:06.162456 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('%SpaghettiSauce%',),
                                         sql='WITH passed_id AS (SELECT id AS passed_id FROM test_items WHERE barcode=%s),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_item_info.*) as item_info,     row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-03-19 18:41:51.871167 --- ERROR --- DatabaseError(message='duplicate key value violates unique constraint "test_shopping_lists_name_key"DETAIL:  Key (name)=(test2) already exists.',
                                         payload=('test2', 'This is the second test', 1, datetime.datetime(2025, 3, 19, 18, 41, 51, 869521), 'plain_list'),
                                         sql='INSERT INTO test_shopping_lists(name, description, author, creation_date, type) VALUES (%s, %s, %s, %s, %s) RETURNING *;')
2025-03-19 18:52:53.385792 --- ERROR --- DatabaseError(message=''NoneType' object is not subscriptable',
                                         payload=(5, 5),
                                         sql='SELECT * FROM test_shopping_listsLIMIT %s OFFSET %s;')
2025-03-19 18:52:54.290657 --- ERROR --- DatabaseError(message=''NoneType' object is not subscriptable',
                                         payload=(5, 5),
                                         sql='SELECT * FROM test_shopping_listsLIMIT %s OFFSET %s;')
2025-03-19 18:53:10.033561 --- ERROR --- DatabaseError(message=''NoneType' object is not subscriptable',
                                         payload=(5, 5),
                                         sql='SELECT * FROM test_shopping_listsLIMIT %s OFFSET %s;')
2025-03-19 18:54:33.781346 --- ERROR --- DatabaseError(message=''NoneType' object is not subscriptable',
                                         payload=(5, 5),
                                         sql='SELECT * FROM test_shopping_listsLIMIT %s OFFSET %s;')
2025-03-19 18:55:19.805867 --- ERROR --- DatabaseError(message=''NoneType' object is not subscriptable',
                                         payload=(5, 5),
                                         sql='SELECT * FROM test_shopping_listsLIMIT %s OFFSET %s;')
2025-03-19 18:56:48.566895 --- ERROR --- DatabaseError(message=''NoneType' object is not subscriptable',
                                         payload=(5, 5),
                                         sql='SELECT * FROM test_shopping_lists LIMIT %s OFFSET %s;')
2025-03-19 18:57:28.915918 --- ERROR --- DatabaseError(message=''NoneType' object is not subscriptable',
                                         payload=(5, 5),
                                         sql='SELECT * FROM test_shopping_lists LIMIT %s OFFSET %s;')
2025-03-20 17:54:34.069242 --- ERROR --- DatabaseError(message='not all arguments converted during string formatting',
                                         payload=%038000221248%,
                                         sql='SELECT * FROM test_itemlinks WHERE barcode=%s;')
2025-03-21 17:32:54.209121 --- ERROR --- DatabaseError(message='invalid input syntax for type jsonLINE 1: ...ole grain oats', qty = '1', uom = 'each', links = 'google.co...                                                             ^DETAIL:  Token "google" is invalid.CONTEXT:  JSON data, line 1: google...',
                                         payload={'id': 4, 'update': {'item_name': 'Whole grain oats', 'qty': '1', 'uom': 'each', 'links': 'google.com'}},
                                         sql='UPDATE test_shopping_list_items SET item_name = %s, qty = %s, uom = %s, links = %s WHERE id=%s RETURNING *;')
2025-03-21 17:33:34.010623 --- ERROR --- DatabaseError(message='invalid input syntax for type jsonLINE 1: ...ole grain oats', qty = '1', uom = 'each', links = 'google.co...                                                             ^DETAIL:  Token "google" is invalid.CONTEXT:  JSON data, line 1: google...',
                                         payload={'id': 4, 'update': {'item_name': 'Whole grain oats', 'qty': '1', 'uom': 'each', 'links': 'google.com'}},
                                         sql='UPDATE test_shopping_list_items SET item_name = %s, qty = %s, uom = %s, links = %s WHERE id=%s RETURNING *;')
2025-03-21 17:34:21.233927 --- ERROR --- DatabaseError(message='invalid input syntax for type jsonLINE 1: ...ole grain oats', qty = '1', uom = 'each', links = 'google.co...                                                             ^DETAIL:  Token "google" is invalid.CONTEXT:  JSON data, line 1: google...',
                                         payload={'id': 4, 'update': {'item_name': 'Whole grain oats', 'qty': '1', 'uom': 'each', 'links': 'google.com'}},
                                         sql='UPDATE test_shopping_list_items SET item_name = %s, qty = %s, uom = %s, links = %s WHERE id=%s RETURNING *;')
2025-03-22 07:55:04.913515 --- ERROR --- DatabaseError(message='syntax error at or near "DSC"LINE 14: ORDER BY sum_cte.total_sum DSC                                    ^',
                                         payload=('', 50, 0),
                                         sql='WITH sum_cte AS (  SELECT mi.id, SUM(mil.quantity_on_hand)::FLOAT8 AS total_sum  FROM main_item_locations mil  JOIN main_items mi ON mil.part_id = mi.id  GROUP BY mi.id)SELECT main_items.*,    row_to_json(main_item_info.*) as item_info,    sum_cte.total_sum as total_qohFROM main_itemsLEFT JOIN sum_cte ON main_items.id = sum_cte.idLEFT JOIN main_item_info ON main_items.item_info_id = main_item_info.id WHERE main_items.search_string LIKE '%%' || %s || '%%' AND sum_cte.total_sum > 0ORDER BY sum_cte.total_sum DSCLIMIT %s OFFSET %s;')
2025-03-23 12:22:07.792923 --- ERROR --- DatabaseError(message='column "g" does not existLINE 2:     (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM t...                                                   ^',
                                         payload=(5, 0),
                                         sql='SELECT *,    (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM test_shopping_list_items WHERE sl_id = test_shopping_lists) AS sl_items FROM test_shopping_lists LIMIT %s OFFSET %s;')
2025-03-23 12:22:20.046597 --- ERROR --- DatabaseError(message='operator does not exist: integer = test_shopping_listsLINE 2: ...'{}') FROM test_shopping_list_items g WHERE sl_id = test_sho...                                                             ^HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.',
                                         payload=(5, 0),
                                         sql='SELECT *,    (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM test_shopping_list_items g WHERE sl_id = test_shopping_lists) AS sl_items FROM test_shopping_lists LIMIT %s OFFSET %s;')
2025-03-23 12:22:35.373028 --- ERROR --- DatabaseError(message='malformed array literal: "[]"LINE 2:     (SELECT COALESCE(array_agg(row_to_json(g)), '[]') FROM t...                                                        ^DETAIL:  "[" must introduce explicitly-specified array dimensions.',
                                         payload=(5, 0),
                                         sql='SELECT *,    (SELECT COALESCE(array_agg(row_to_json(g)), '[]') FROM test_shopping_list_items g WHERE sl_id = test_shopping_lists) AS sl_items FROM test_shopping_lists LIMIT %s OFFSET %s;')
2025-03-23 15:14:31.483955 --- ERROR --- DatabaseError(message='insert or update on table "test_shopping_list_items" violates foreign key constraint "fk_item_id"DETAIL:  Key (item_id)=(0) is not present in table "test_items".',
                                         payload=('5fskqqy', '5', 'custom', 'MyCustomItem', 'Box', 1, 0, '{"main": "https://www.upcitemdb.com/upc/28400199148"}'),
                                         sql='INSERT INTO test_shopping_list_items(uuid, sl_id, item_type, item_name, uom, qty, item_id, links) VALUES (%s, %s, %s, %s, %s, %s, %s, %s) RETURNING *;')
2025-03-23 16:58:49.303277 --- ERROR --- DatabaseError(message='duplicate key value violates unique constraint "test_shopping_list_items_uuid_key"DETAIL:  Key (uuid)=(%078742015101%) already exists.',
                                         payload=('%078742015101%', '3', 'sku', '100% grated parmesan cheese', 'each', 1, 2149, '{}'),
                                         sql='INSERT INTO test_shopping_list_items(uuid, sl_id, item_type, item_name, uom, qty, item_id, links) VALUES (%s, %s, %s, %s, %s, %s, %s, %s) RETURNING *;')
2025-03-23 16:58:50.643859 --- ERROR --- DatabaseError(message='duplicate key value violates unique constraint "test_shopping_list_items_uuid_key"DETAIL:  Key (uuid)=(%078742015101%) already exists.',
                                         payload=('%078742015101%', '3', 'sku', '100% grated parmesan cheese', 'each', 1, 2149, '{}'),
                                         sql='INSERT INTO test_shopping_list_items(uuid, sl_id, item_type, item_name, uom, qty, item_id, links) VALUES (%s, %s, %s, %s, %s, %s, %s, %s) RETURNING *;')
2025-03-23 16:58:50.829794 --- ERROR --- DatabaseError(message='duplicate key value violates unique constraint "test_shopping_list_items_uuid_key"DETAIL:  Key (uuid)=(%078742015101%) already exists.',
                                         payload=('%078742015101%', '3', 'sku', '100% grated parmesan cheese', 'each', 1, 2149, '{}'),
                                         sql='INSERT INTO test_shopping_list_items(uuid, sl_id, item_type, item_name, uom, qty, item_id, links) VALUES (%s, %s, %s, %s, %s, %s, %s, %s) RETURNING *;')
2025-03-23 16:58:58.630008 --- ERROR --- DatabaseError(message='duplicate key value violates unique constraint "test_shopping_list_items_uuid_key"DETAIL:  Key (uuid)=(%078742015101%) already exists.',
                                         payload=('%078742015101%', '3', 'sku', '100% grated parmesan cheese', 'each', 1, 2149, '{}'),
                                         sql='INSERT INTO test_shopping_list_items(uuid, sl_id, item_type, item_name, uom, qty, item_id, links) VALUES (%s, %s, %s, %s, %s, %s, %s, %s) RETURNING *;')
2025-03-23 17:45:22.233163 --- ERROR --- DatabaseError(message='duplicate key value violates unique constraint "test_shopping_list_items_uuid_sl_id_key"DETAIL:  Key (uuid, sl_id)=(%078742015101%, 5) already exists.',
                                         payload=('%078742015101%', '5', 'sku', '100% grated parmesan cheese', 'each', 1, 2149, '{}'),
                                         sql='INSERT INTO test_shopping_list_items(uuid, sl_id, item_type, item_name, uom, qty, item_id, links) VALUES (%s, %s, %s, %s, %s, %s, %s, %s) RETURNING *;')
2025-03-23 17:45:22.848888 --- ERROR --- DatabaseError(message='duplicate key value violates unique constraint "test_shopping_list_items_uuid_sl_id_key"DETAIL:  Key (uuid, sl_id)=(%078742015101%, 5) already exists.',
                                         payload=('%078742015101%', '5', 'sku', '100% grated parmesan cheese', 'each', 1, 2149, '{}'),
                                         sql='INSERT INTO test_shopping_list_items(uuid, sl_id, item_type, item_name, uom, qty, item_id, links) VALUES (%s, %s, %s, %s, %s, %s, %s, %s) RETURNING *;')
2025-03-23 17:45:23.113705 --- ERROR --- DatabaseError(message='duplicate key value violates unique constraint "test_shopping_list_items_uuid_sl_id_key"DETAIL:  Key (uuid, sl_id)=(%078742015101%, 5) already exists.',
                                         payload=('%078742015101%', '5', 'sku', '100% grated parmesan cheese', 'each', 1, 2149, '{}'),
                                         sql='INSERT INTO test_shopping_list_items(uuid, sl_id, item_type, item_name, uom, qty, item_id, links) VALUES (%s, %s, %s, %s, %s, %s, %s, %s) RETURNING *;')
2025-03-23 17:45:23.375900 --- ERROR --- DatabaseError(message='duplicate key value violates unique constraint "test_shopping_list_items_uuid_sl_id_key"DETAIL:  Key (uuid, sl_id)=(%078742015101%, 5) already exists.',
                                         payload=('%078742015101%', '5', 'sku', '100% grated parmesan cheese', 'each', 1, 2149, '{}'),
                                         sql='INSERT INTO test_shopping_list_items(uuid, sl_id, item_type, item_name, uom, qty, item_id, links) VALUES (%s, %s, %s, %s, %s, %s, %s, %s) RETURNING *;')
2025-03-23 17:45:23.832867 --- ERROR --- DatabaseError(message='duplicate key value violates unique constraint "test_shopping_list_items_uuid_sl_id_key"DETAIL:  Key (uuid, sl_id)=(%078742015101%, 5) already exists.',
                                         payload=('%078742015101%', '5', 'sku', '100% grated parmesan cheese', 'each', 1, 2149, '{}'),
                                         sql='INSERT INTO test_shopping_list_items(uuid, sl_id, item_type, item_name, uom, qty, item_id, links) VALUES (%s, %s, %s, %s, %s, %s, %s, %s) RETURNING *;')
2025-03-23 17:45:24.198342 --- ERROR --- DatabaseError(message='duplicate key value violates unique constraint "test_shopping_list_items_uuid_sl_id_key"DETAIL:  Key (uuid, sl_id)=(%078742015101%, 5) already exists.',
                                         payload=('%078742015101%', '5', 'sku', '100% grated parmesan cheese', 'each', 1, 2149, '{}'),
                                         sql='INSERT INTO test_shopping_list_items(uuid, sl_id, item_type, item_name, uom, qty, item_id, links) VALUES (%s, %s, %s, %s, %s, %s, %s, %s) RETURNING *;')
2025-03-23 17:45:24.383560 --- ERROR --- DatabaseError(message='duplicate key value violates unique constraint "test_shopping_list_items_uuid_sl_id_key"DETAIL:  Key (uuid, sl_id)=(%078742015101%, 5) already exists.',
                                         payload=('%078742015101%', '5', 'sku', '100% grated parmesan cheese', 'each', 1, 2149, '{}'),
                                         sql='INSERT INTO test_shopping_list_items(uuid, sl_id, item_type, item_name, uom, qty, item_id, links) VALUES (%s, %s, %s, %s, %s, %s, %s, %s) RETURNING *;')
2025-03-23 17:45:34.555592 --- ERROR --- DatabaseError(message='duplicate key value violates unique constraint "test_shopping_list_items_uuid_sl_id_key"DETAIL:  Key (uuid, sl_id)=(%078742015101%, 5) already exists.',
                                         payload=('%078742015101%', '5', 'sku', '100% grated parmesan cheese', 'each', 1, 2149, '{}'),
                                         sql='INSERT INTO test_shopping_list_items(uuid, sl_id, item_type, item_name, uom, qty, item_id, links) VALUES (%s, %s, %s, %s, %s, %s, %s, %s) RETURNING *;')
2025-03-29 09:11:14.676444 --- ERROR --- DatabaseError(message='duplicate key value violates unique constraint "main_logistics_info_barcode_key"DETAIL:  Key (barcode)=(%070847898245%) already exists.',
                                         payload=('%070847898245%', 1, 1, 1, 1),
                                         sql='INSERT INTO main_logistics_info(barcode, primary_location, primary_zone, auto_issue_location, auto_issue_zone) VALUES (%s, %s, %s, %s, %s) RETURNING *;')
2025-04-03 17:22:29.828709 --- ERROR --- DatabaseError(message='table "test_sku_prefix" does not exist',
                                         payload=DROP TABLE test_sku_prefix CASCADE;,
                                         sql='PrefixTable')
2025-04-03 17:47:25.451559 --- ERROR --- DatabaseError(message='duplicate key value violates unique constraint "test_sku_prefix_name_uuid_key"DETAIL:  Key (name, uuid)=(testprefix, testuuid) already exists.',
                                         payload=('testuuid', 'testprefix', 'this is a test prefix!'),
                                         sql='INSERT INTO test_sku_prefix(uuid, name, description) VALUES (%s, %s, %s) RETURNING *;')
2025-04-05 12:21:16.322390 --- ERROR --- DatabaseError(message='missing FROM-clause entry for table "test_recipes"LINE 13: JOIN logins ON test_recipes.author = logins.id                        ^',
                                         payload=(2,),
                                         sql='WITH passed_id AS (SELECT %s AS passed_id),    cte_recipe_items AS (            SELECT * FROM test_recipe_items items            WHERE items.rp_id = (SELECT passed_id FROM passed_id)        )SELECT (SELECT passed_id FROM passed_id) AS passed_id,     test_recipes.*,     logins.username as submitted_by,     (SELECT COALESCE(array_agg(row_to_json(ris)), '{}') FROM cte_recipe_items ris) AS recipe_items,     row_to_json(test_vendors.*) as vendorFROM test_receiptsJOIN logins ON test_recipes.author = logins.idWHERE test_recipe.id=(SELECT passed_id FROM passed_id)')
2025-04-05 12:22:09.957162 --- ERROR --- DatabaseError(message='missing FROM-clause entry for table "test_recipe"LINE 13: WHERE test_recipe.id=(SELECT passed_id FROM passed_id)               ^',
                                         payload=(2,),
                                         sql='WITH passed_id AS (SELECT %s AS passed_id),    cte_recipe_items AS (            SELECT * FROM test_recipe_items items            WHERE items.rp_id = (SELECT passed_id FROM passed_id)        )SELECT (SELECT passed_id FROM passed_id) AS passed_id,     test_recipes.*,     logins.username as submitted_by,     (SELECT COALESCE(array_agg(row_to_json(ris)), '{}') FROM cte_recipe_items ris) AS recipe_itemsFROM test_recipesJOIN logins ON test_recipes.author = logins.idWHERE test_recipe.id=(SELECT passed_id FROM passed_id)')
2025-04-05 12:24:36.650645 --- ERROR --- DatabaseError(message='name 'row' is not defined',
                                         payload=(2,),
                                         sql='WITH passed_id AS (SELECT %s AS passed_id),    cte_recipe_items AS (            SELECT * FROM test_recipe_items items            WHERE items.rp_id = (SELECT passed_id FROM passed_id)        )SELECT (SELECT passed_id FROM passed_id) AS passed_id,     test_recipes.*,     logins.username as submitted_by,     (SELECT COALESCE(array_agg(row_to_json(ris)), '{}') FROM cte_recipe_items ris) AS recipe_itemsFROM test_recipesJOIN logins ON test_recipes.author = logins.idWHERE test_recipes.id=(SELECT passed_id FROM passed_id)')
2025-04-05 20:59:40.968589 --- ERROR --- DatabaseError(message='column "item_name" of relation "test_recipes" does not existLINE 1: UPDATE test_recipes SET item_name = 'Spicy Bacon Chilli12' W...                                ^',
                                         payload={'id': 1, 'update': {'item_name': 'Spicy Bacon Chilli12'}},
                                         sql='UPDATE test_recipes SET item_name = %s WHERE id=%s RETURNING *;')
2025-04-05 21:23:23.842735 --- ERROR --- DatabaseError(message='syntax error at or near "WHERE"LINE 1: UPDATE test_recipes SET  WHERE id=1 RETURNING *;                                 ^',
                                         payload={'id': 1, 'update': {}},
                                         sql='UPDATE test_recipes SET  WHERE id=%s RETURNING *;')
2025-04-05 21:27:02.277422 --- ERROR --- DatabaseError(message='syntax error at or near "WHERE"LINE 1: UPDATE test_recipes SET  WHERE id=1 RETURNING *;                                 ^',
                                         payload={'id': 1, 'update': {}},
                                         sql='UPDATE test_recipes SET  WHERE id=%s RETURNING *;')
2025-04-05 21:29:51.251551 --- ERROR --- DatabaseError(message='syntax error at or near "WHERE"LINE 1: UPDATE test_recipes SET  WHERE id=1 RETURNING *;                                 ^',
                                         payload={'id': 1, 'update': {}},
                                         sql='UPDATE test_recipes SET  WHERE id=%s RETURNING *;')
2025-04-06 08:59:42.901643 --- ERROR --- DatabaseError(message='syntax error at or near "test_items"LINE 4:             LEFT test_items ON items.item_id = test_items.id                         ^',
                                         payload=(1,),
                                         sql='WITH passed_id AS (SELECT %s AS passed_id),    cte_recipe_items AS (            SELECT * FROM test_recipe_items items            LEFT test_items ON items.item_id = test_items.id            WHERE items.rp_id = (SELECT passed_id FROM passed_id)        )SELECT (SELECT passed_id FROM passed_id) AS passed_id,     test_recipes.*,     logins.username as author,     (SELECT COALESCE(array_agg(row_to_json(ris)), '{}') FROM cte_recipe_items ris) AS recipe_itemsFROM test_recipesJOIN logins ON test_recipes.author = logins.idWHERE test_recipes.id=(SELECT passed_id FROM passed_id)')
2025-04-06 09:09:43.896386 --- ERROR --- DatabaseError(message='syntax error at or near "COALESCE"LINE 4:             COALESCE(test_items.barcode, items.uuid) AS uuid...                    ^',
                                         payload=(1,),
                                         sql='WITH passed_id AS (SELECT %s AS passed_id),    cte_recipe_items AS (            SELECT *            COALESCE(test_items.barcode, items.uuid) AS uuid,            COALESCE(test_item_info.uom, items.uom) AS uom,            COALESCE(test_items.item_name, items.item_name) AS item_name            FROM test_recipe_items items            LEFT JOIN test_items ON items.item_id = test_items.id            LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id            WHERE items.rp_id = (SELECT passed_id FROM passed_id)        )SELECT (SELECT passed_id FROM passed_id) AS passed_id,     test_recipes.*,     logins.username as author,     (SELECT COALESCE(array_agg(row_to_json(ris)), '{}') FROM cte_recipe_items ris) AS recipe_itemsFROM test_recipesJOIN logins ON test_recipes.author = logins.idWHERE test_recipes.id=(SELECT passed_id FROM passed_id)')
2025-04-06 16:49:33.943922 --- ERROR --- DatabaseError(message='column "linked_items" of relation "main_item_info" does not existLINE 2: (barcode, linked_items, shopping_lists, recipes, groups,                   ^',
                                         payload=('%037000771807%', '{}', '{}', '{}', '{}', '', 1.0, 'each', 0.0, 0.0, 0.0, False),
                                         sql='INSERT INTO main_item_info(barcode, linked_items, shopping_lists, recipes, groups, packaging, uom_quantity, uom, cost, safety_stock, lead_time_days, ai_pick) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING *;')
2025-04-07 18:10:43.995134 --- ERROR --- DatabaseError(message='duplicate key value violates unique constraint "units_plural_key"DETAIL:  Key (plural)=(pinches) already exists.',
                                         payload=('pinches', ' pinch', ' Pinch', ' Less than 1/8 teaspoon.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:10:43.999768 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('tsp', ' tsp', ' Teaspoon', ' 5 millilitres in Australia New Zealand UK Canada and the US but approximately 4.93 millilitres in the US.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:10:44.008680 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('dsp', ' dsp', ' Dessertspoon', ' 10 millilitres in Australia.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:10:44.015714 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('tbsp', ' tbsp', ' Tablespoon', ' 20 millilitres in Australia or 15 millilitres in New Zealand the UK Canada and the US.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:10:44.024247 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('fl oz', ' fl oz', ' Fluid ounce', ' 28.41 millilitres in the UK or approximately 29.57 millilitres in the US.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:10:44.032074 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('cups', ' cup', ' Cup', ' 250 millilitres in Australia and New Zealand or approximately 170.48 millilitres in the UK or approximately 227.31 millilitres in Canada and approximately 236.59 millilitres in the US.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:10:44.039602 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('pt', ' pt', ' Pint', ' 570 millilitres in Australia approximately 568.26 millilitres in New Zealand the UK and Canada and approximately 473.18 millilitres in the US.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:10:44.047805 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('qt', ' qt', ' Quart', ' Approximately 1136.52 millilitres in Australia New Zealand the UK and Canada and approximately 946.35 millilitres in the US.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:10:44.056200 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('gal', ' gal', ' Gallon', ' Approximately 4546.09 millilitres in Australia New Zealand the UK and Canada and approximately 3785.41 millilitres in the US.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:10:44.062489 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('jiggers', ' jigger', ' Jigger', ' 1.5 fluid ounces.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:10:44.070300 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('oz', ' oz', ' Ounce', ' 1/4 lb for butter which can also be measured as 3 tablespoons.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:10:44.078265 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('L', ' L', ' Liter', ' Commonly used for volume measurement in the metric system.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:10:44.086375 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('mL', ' mL', ' Milliliter', ' Commonly used for volume measurement in the metric system.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:10:44.093920 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('dm3', ' dm3', ' Cubic decimeter', ' Equivalent to 1 liter.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:10:44.100773 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('g', ' g', ' Gram', ' Commonly used for weight measurement in the metric system.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:10:44.109147 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('kg', ' kg', ' Kilogram', ' Commonly used for weight measurement in the metric system.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:10:44.116151 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('lbs', ' lb', ' Pound', ' Used for weight measurement in the US.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:10:44.123798 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('fluid scruples', ' fluid scruple', ' Fluid scruple', " A unit used in the apothecaries' system but not commonly used in cooking."),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:10:44.131105 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('cm3', ' cm3', ' Cubic centimeter', ' Equivalent to 1 milliliter.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:10:44.138678 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('breakfast cups', ' breakfast cup', ' Breakfast cup', ' Similar in size to the US customary cup and the metric cup.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:10:44.147224 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('tumblers', ' tumbler', ' Tumblerful', ' A unit used in British cookery books and recipes.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:10:44.155810 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('winefulls', ' winefull', ' Wineglassful', ' A unit used in British cookery books and recipes.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:10:44.162996 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('coffee cups', ' coffee cup', ' Coffee cup', ' Can vary from 100 to 200 millilitres.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:10:44.171595 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('sticks of butter', ' stick of butter', ' Stick of butter', ' 1/4 lb or 3 tablespoons.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:10:44.179159 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('smidgens', ' smidgen', ' Smidgen', ' An approximate unit of measure.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:10:44.186951 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('dashes', ' dash', ' Dash', ' An approximate unit of measure.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:10:44.194886 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('drops', ' drop', ' Drop', ' An approximate unit of measure.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:10:44.202379 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('eaches', ' each', ' Each', ' A single unit.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:10:44.210756 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('boxes', ' box', ' Box', ' A Single box of a unit.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:10:44.217824 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('crates', ' crate', ' Crate', ' a single crate of a unit.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:10:44.225840 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('jars', ' jar', ' Jar', ' A single Jar of a unit.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:10:44.233830 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('cans', ' can', ' Can', ' A Single Can of a unit.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:10:44.241115 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('bars', ' bar', ' Bars', ' A Single bar of a unit.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:10:44.248836 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('loaves', ' loaf', ' Loaf', ' A single loaf of a unit.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:10:44.256251 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('packs', ' pack', ' Pack', ' A Single Pack of a unit.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:10:44.263842 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=CREATE TABLE IF NOT EXISTS units (
    id SERIAL PRIMARY KEY,
    plural VARCHAR(32),
    single VARCHAR(32),
    fullname VARCHAR(255),
    description TEXT,
    unique(plural),
    unique(single),
    unique(fullname)
);,
                                         sql='UnitsTable')
2025-04-07 18:11:11.901876 --- ERROR --- DatabaseError(message='duplicate key value violates unique constraint "units_plural_key"DETAIL:  Key (plural)=(pinches) already exists.',
                                         payload=('pinches', ' pinch', ' Pinch', ' Less than 1/8 teaspoon.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:11:11.908951 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('tsp', ' tsp', ' Teaspoon', ' 5 millilitres in Australia New Zealand UK Canada and the US but approximately 4.93 millilitres in the US.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:11:11.917103 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('dsp', ' dsp', ' Dessertspoon', ' 10 millilitres in Australia.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:11:11.924693 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('tbsp', ' tbsp', ' Tablespoon', ' 20 millilitres in Australia or 15 millilitres in New Zealand the UK Canada and the US.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:11:11.932160 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('fl oz', ' fl oz', ' Fluid ounce', ' 28.41 millilitres in the UK or approximately 29.57 millilitres in the US.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:11:11.940305 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('cups', ' cup', ' Cup', ' 250 millilitres in Australia and New Zealand or approximately 170.48 millilitres in the UK or approximately 227.31 millilitres in Canada and approximately 236.59 millilitres in the US.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:11:11.947171 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('pt', ' pt', ' Pint', ' 570 millilitres in Australia approximately 568.26 millilitres in New Zealand the UK and Canada and approximately 473.18 millilitres in the US.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:11:11.954815 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('qt', ' qt', ' Quart', ' Approximately 1136.52 millilitres in Australia New Zealand the UK and Canada and approximately 946.35 millilitres in the US.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:11:11.962887 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('gal', ' gal', ' Gallon', ' Approximately 4546.09 millilitres in Australia New Zealand the UK and Canada and approximately 3785.41 millilitres in the US.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:11:11.970928 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('jiggers', ' jigger', ' Jigger', ' 1.5 fluid ounces.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:11:11.978694 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('oz', ' oz', ' Ounce', ' 1/4 lb for butter which can also be measured as 3 tablespoons.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:11:11.986020 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('L', ' L', ' Liter', ' Commonly used for volume measurement in the metric system.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:11:11.994224 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('mL', ' mL', ' Milliliter', ' Commonly used for volume measurement in the metric system.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:11:12.001600 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('dm3', ' dm3', ' Cubic decimeter', ' Equivalent to 1 liter.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:11:12.009228 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('g', ' g', ' Gram', ' Commonly used for weight measurement in the metric system.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:11:12.017172 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('kg', ' kg', ' Kilogram', ' Commonly used for weight measurement in the metric system.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:11:12.024445 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('lbs', ' lb', ' Pound', ' Used for weight measurement in the US.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:11:12.031947 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('fluid scruples', ' fluid scruple', ' Fluid scruple', " A unit used in the apothecaries' system but not commonly used in cooking."),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:11:12.040208 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('cm3', ' cm3', ' Cubic centimeter', ' Equivalent to 1 milliliter.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:11:12.048172 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('breakfast cups', ' breakfast cup', ' Breakfast cup', ' Similar in size to the US customary cup and the metric cup.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:11:12.055868 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('tumblers', ' tumbler', ' Tumblerful', ' A unit used in British cookery books and recipes.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:11:12.063104 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('winefulls', ' winefull', ' Wineglassful', ' A unit used in British cookery books and recipes.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:11:12.071383 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('coffee cups', ' coffee cup', ' Coffee cup', ' Can vary from 100 to 200 millilitres.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:11:12.079081 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('sticks of butter', ' stick of butter', ' Stick of butter', ' 1/4 lb or 3 tablespoons.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:11:12.087113 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('smidgens', ' smidgen', ' Smidgen', ' An approximate unit of measure.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:11:12.095194 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('dashes', ' dash', ' Dash', ' An approximate unit of measure.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:11:12.103901 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('drops', ' drop', ' Drop', ' An approximate unit of measure.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:11:12.111035 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('eaches', ' each', ' Each', ' A single unit.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:11:12.120008 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('boxes', ' box', ' Box', ' A Single box of a unit.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:11:12.127986 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('crates', ' crate', ' Crate', ' a single crate of a unit.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:11:12.135808 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('jars', ' jar', ' Jar', ' A single Jar of a unit.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:11:12.144135 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('cans', ' can', ' Can', ' A Single Can of a unit.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:11:12.152889 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('bars', ' bar', ' Bars', ' A Single bar of a unit.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:11:12.161167 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('loaves', ' loaf', ' Loaf', ' A single loaf of a unit.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:11:12.169462 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('packs', ' pack', ' Pack', ' A Single Pack of a unit.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:12:49.005060 --- ERROR --- DatabaseError(message='duplicate key value violates unique constraint "units_plural_key"DETAIL:  Key (plural)=(Plural) already exists.',
                                         payload=('Plural', ' Single', ' Fullname', ' Description'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:12:49.012765 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('tsp', ' tsp', ' Teaspoon', ' 5 millilitres in Australia New Zealand UK Canada and the US but approximately 4.93 millilitres in the US.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:12:49.022257 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('dsp', ' dsp', ' Dessertspoon', ' 10 millilitres in Australia.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:12:49.030830 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('tbsp', ' tbsp', ' Tablespoon', ' 20 millilitres in Australia or 15 millilitres in New Zealand the UK Canada and the US.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:12:49.039674 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('fl oz', ' fl oz', ' Fluid ounce', ' 28.41 millilitres in the UK or approximately 29.57 millilitres in the US.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:12:49.048175 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('cups', ' cup', ' Cup', ' 250 millilitres in Australia and New Zealand or approximately 170.48 millilitres in the UK or approximately 227.31 millilitres in Canada and approximately 236.59 millilitres in the US.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:12:49.056041 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('pt', ' pt', ' Pint', ' 570 millilitres in Australia approximately 568.26 millilitres in New Zealand the UK and Canada and approximately 473.18 millilitres in the US.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:12:49.064251 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('qt', ' qt', ' Quart', ' Approximately 1136.52 millilitres in Australia New Zealand the UK and Canada and approximately 946.35 millilitres in the US.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:12:49.072942 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('gal', ' gal', ' Gallon', ' Approximately 4546.09 millilitres in Australia New Zealand the UK and Canada and approximately 3785.41 millilitres in the US.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:12:49.081401 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('jiggers', ' jigger', ' Jigger', ' 1.5 fluid ounces.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:12:49.090546 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('oz', ' oz', ' Ounce', ' 1/4 lb for butter which can also be measured as 3 tablespoons.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:12:49.099456 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('L', ' L', ' Liter', ' Commonly used for volume measurement in the metric system.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:12:49.107916 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('mL', ' mL', ' Milliliter', ' Commonly used for volume measurement in the metric system.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:12:49.116091 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('dm3', ' dm3', ' Cubic decimeter', ' Equivalent to 1 liter.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:12:49.124020 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('g', ' g', ' Gram', ' Commonly used for weight measurement in the metric system.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:12:49.132775 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('kg', ' kg', ' Kilogram', ' Commonly used for weight measurement in the metric system.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:12:49.140932 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('lbs', ' lb', ' Pound', ' Used for weight measurement in the US.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:12:49.148932 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('fluid scruples', ' fluid scruple', ' Fluid scruple', " A unit used in the apothecaries' system but not commonly used in cooking."),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:12:49.157444 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('cm3', ' cm3', ' Cubic centimeter', ' Equivalent to 1 milliliter.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:12:49.166119 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('breakfast cups', ' breakfast cup', ' Breakfast cup', ' Similar in size to the US customary cup and the metric cup.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:12:49.174918 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('tumblers', ' tumbler', ' Tumblerful', ' A unit used in British cookery books and recipes.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:12:49.182730 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('winefulls', ' winefull', ' Wineglassful', ' A unit used in British cookery books and recipes.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:12:49.191743 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('coffee cups', ' coffee cup', ' Coffee cup', ' Can vary from 100 to 200 millilitres.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:12:49.200252 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('sticks of butter', ' stick of butter', ' Stick of butter', ' 1/4 lb or 3 tablespoons.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:12:49.209374 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('smidgens', ' smidgen', ' Smidgen', ' An approximate unit of measure.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:12:49.217544 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('dashes', ' dash', ' Dash', ' An approximate unit of measure.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:12:49.226129 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('drops', ' drop', ' Drop', ' An approximate unit of measure.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:12:49.236147 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('eaches', ' each', ' Each', ' A single unit.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:12:49.244366 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('boxes', ' box', ' Box', ' A Single box of a unit.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:12:49.253119 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('crates', ' crate', ' Crate', ' a single crate of a unit.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:12:49.261763 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('jars', ' jar', ' Jar', ' A single Jar of a unit.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:12:49.269773 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('cans', ' can', ' Can', ' A Single Can of a unit.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:12:49.279465 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('bars', ' bar', ' Bars', ' A Single bar of a unit.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:12:49.287480 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('loaves', ' loaf', ' Loaf', ' A single loaf of a unit.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:12:49.296201 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('packs', ' pack', ' Pack', ' A Single Pack of a unit.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:12:49.306000 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=PrefixTable,
                                         sql='DROP TABLE units CASCADE;')
2025-04-07 18:13:10.285371 --- ERROR --- DatabaseError(message='duplicate key value violates unique constraint "units_plural_key"DETAIL:  Key (plural)=(Plural) already exists.',
                                         payload=('Plural', ' Single', ' Fullname', ' Description'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:13:10.294121 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('tsp', ' tsp', ' Teaspoon', ' 5 millilitres in Australia New Zealand UK Canada and the US but approximately 4.93 millilitres in the US.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:13:10.302719 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('dsp', ' dsp', ' Dessertspoon', ' 10 millilitres in Australia.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:13:10.312275 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('tbsp', ' tbsp', ' Tablespoon', ' 20 millilitres in Australia or 15 millilitres in New Zealand the UK Canada and the US.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:13:10.320616 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('fl oz', ' fl oz', ' Fluid ounce', ' 28.41 millilitres in the UK or approximately 29.57 millilitres in the US.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:13:10.329231 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('cups', ' cup', ' Cup', ' 250 millilitres in Australia and New Zealand or approximately 170.48 millilitres in the UK or approximately 227.31 millilitres in Canada and approximately 236.59 millilitres in the US.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:13:10.339234 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('pt', ' pt', ' Pint', ' 570 millilitres in Australia approximately 568.26 millilitres in New Zealand the UK and Canada and approximately 473.18 millilitres in the US.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:13:10.347584 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('qt', ' qt', ' Quart', ' Approximately 1136.52 millilitres in Australia New Zealand the UK and Canada and approximately 946.35 millilitres in the US.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:13:10.356397 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('gal', ' gal', ' Gallon', ' Approximately 4546.09 millilitres in Australia New Zealand the UK and Canada and approximately 3785.41 millilitres in the US.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:13:10.364495 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('jiggers', ' jigger', ' Jigger', ' 1.5 fluid ounces.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:13:10.371981 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('oz', ' oz', ' Ounce', ' 1/4 lb for butter which can also be measured as 3 tablespoons.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:13:10.380838 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('L', ' L', ' Liter', ' Commonly used for volume measurement in the metric system.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:13:10.389480 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('mL', ' mL', ' Milliliter', ' Commonly used for volume measurement in the metric system.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:13:10.396988 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('dm3', ' dm3', ' Cubic decimeter', ' Equivalent to 1 liter.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:13:10.406045 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('g', ' g', ' Gram', ' Commonly used for weight measurement in the metric system.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:13:10.414346 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('kg', ' kg', ' Kilogram', ' Commonly used for weight measurement in the metric system.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:13:10.422811 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('lbs', ' lb', ' Pound', ' Used for weight measurement in the US.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:13:10.431743 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('fluid scruples', ' fluid scruple', ' Fluid scruple', " A unit used in the apothecaries' system but not commonly used in cooking."),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:13:10.440322 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('cm3', ' cm3', ' Cubic centimeter', ' Equivalent to 1 milliliter.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:13:10.448693 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('breakfast cups', ' breakfast cup', ' Breakfast cup', ' Similar in size to the US customary cup and the metric cup.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:13:10.457055 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('tumblers', ' tumbler', ' Tumblerful', ' A unit used in British cookery books and recipes.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:13:10.465266 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('winefulls', ' winefull', ' Wineglassful', ' A unit used in British cookery books and recipes.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:13:10.473926 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('coffee cups', ' coffee cup', ' Coffee cup', ' Can vary from 100 to 200 millilitres.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:13:10.481942 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('sticks of butter', ' stick of butter', ' Stick of butter', ' 1/4 lb or 3 tablespoons.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:13:10.490407 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('smidgens', ' smidgen', ' Smidgen', ' An approximate unit of measure.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:13:10.498270 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('dashes', ' dash', ' Dash', ' An approximate unit of measure.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:13:10.507063 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('drops', ' drop', ' Drop', ' An approximate unit of measure.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:13:10.516062 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('eaches', ' each', ' Each', ' A single unit.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:13:10.524222 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('boxes', ' box', ' Box', ' A Single box of a unit.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:13:10.532729 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('crates', ' crate', ' Crate', ' a single crate of a unit.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:13:10.541345 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('jars', ' jar', ' Jar', ' A single Jar of a unit.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:13:10.549306 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('cans', ' can', ' Can', ' A Single Can of a unit.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:13:10.558787 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('bars', ' bar', ' Bars', ' A Single bar of a unit.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:13:10.567370 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('loaves', ' loaf', ' Loaf', ' A single loaf of a unit.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:13:10.574985 --- ERROR --- DatabaseError(message='current transaction is aborted, commands ignored until end of transaction block',
                                         payload=('packs', ' pack', ' Pack', ' A Single Pack of a unit.'),
                                         sql='INSERT INTO units(plural, single, fullname, description) VALUES (%s, %s, %s, %s) RETURNING *;')
2025-04-07 18:13:18.198596 --- ERROR --- DatabaseError(message='table "units" does not exist',
                                         payload=PrefixTable,
                                         sql='DROP TABLE units CASCADE;')
2025-04-07 18:49:02.343762 --- ERROR --- DatabaseError(message='operator does not exist: test_item_info = integerLINE 8:         WHERE test_item_info = (SELECT item_info_id FROM ite...                                     ^HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.',
                                         payload=(2016,),
                                         sql='WITH passed_id AS (SELECT %s AS passed_id),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    item_info_id AS (SELECT item_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_item_info AS (        SELECT *        FROM test_item_info        LEFT JOIN units ON test_item_info.uom = units.id        WHERE test_item_info = (SELECT item_info_id FROM item_info_id)    ),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,    (SELECT COALESCE(array_agg(row_to_json(ii)), '{}') FROM cte_item_info ii) AS item_info,    (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id    LEFT JOIN units ON test_item_info.uom = units.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-04-07 18:50:39.627298 --- ERROR --- DatabaseError(message='relation "item_info_id" does not existLINE 8: ...      WHERE test_item_info = (SELECT info_id FROM item_info_...                                                             ^',
                                         payload=(2016,),
                                         sql='WITH passed_id AS (SELECT %s AS passed_id),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    info_id AS (SELECT item_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_item_info AS (        SELECT *        FROM test_item_info        LEFT JOIN units ON test_item_info.uom = units.id        WHERE test_item_info = (SELECT info_id FROM item_info_id)    ),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,    (SELECT COALESCE(array_agg(row_to_json(ii)), '{}') FROM cte_item_info ii) AS item_info,    (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id    LEFT JOIN units ON test_item_info.uom = units.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-04-07 18:51:14.119335 --- ERROR --- DatabaseError(message='operator does not exist: test_item_info = integerLINE 8:         WHERE test_item_info = (SELECT item_info_id FROM inf...                                     ^HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.',
                                         payload=(2016,),
                                         sql='WITH passed_id AS (SELECT %s AS passed_id),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    info_id AS (SELECT item_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_item_info AS (        SELECT *        FROM test_item_info        LEFT JOIN units ON test_item_info.uom = units.id        WHERE test_item_info = (SELECT item_info_id FROM info_id)    ),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,    (SELECT COALESCE(array_agg(row_to_json(ii)), '{}') FROM cte_item_info ii) AS item_info,    (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id    LEFT JOIN units ON test_item_info.uom = units.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-04-07 18:53:02.040807 --- ERROR --- DatabaseError(message='syntax error at or near "FROM"LINE 8:         FROM test_item_info                ^',
                                         payload=(2016,),
                                         sql='WITH passed_id AS (SELECT %s AS passed_id),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    info_id AS (SELECT item_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_item_info AS (        SELECT         test_item_info.*,        row_to_json(units.*) as uom,         FROM test_item_info        LEFT JOIN units ON test_item_info.uom = units.id        WHERE test_item_info.id = (SELECT item_info_id FROM info_id)    ),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,    (SELECT COALESCE(array_agg(row_to_json(ii)), '{}') FROM cte_item_info ii) AS item_info,    (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id    LEFT JOIN units ON test_item_info.uom = units.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-04-07 19:13:00.718908 --- ERROR --- DatabaseError(message='invalid reference to FROM-clause entry for table "test_receipt_items"LINE 6:             LEFT JOIN units ON test_receipt_items.uom = unit...                                       ^HINT:  Perhaps you meant to reference the table alias "items".',
                                         payload=(5,),
                                         sql='WITH passed_id AS (SELECT %s AS passed_id),    cte_receipt_items AS (            SELECT items.* ,            (SELECT COALESCE(row_to_json(un), '{}') FROM units un) AS uom            FROM test_receipt_items items            LEFT JOIN units ON test_receipt_items.uom = units.id            WHERE items.receipt_id = (SELECT passed_id FROM passed_id)        )SELECT (SELECT passed_id FROM passed_id) AS passed_id,     test_receipts.*,     logins.username as submitted_by,     (SELECT COALESCE(array_agg(row_to_json(ris)), '{}') FROM cte_receipt_items ris) AS receipt_items,     row_to_json(test_vendors.*) as vendorFROM test_receiptsJOIN logins ON test_receipts.submitted_by = logins.idLEFT JOIN test_vendors ON test_receipts.vendor_id = test_vendors.id WHERE test_receipts.id=(SELECT passed_id FROM passed_id)')
2025-04-07 19:13:24.483942 --- ERROR --- DatabaseError(message='operator does not exist: character varying = integerLINE 6:             LEFT JOIN units ON items.uom = units.id                                                 ^HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.',
                                         payload=(5,),
                                         sql='WITH passed_id AS (SELECT %s AS passed_id),    cte_receipt_items AS (            SELECT items.* ,            (SELECT COALESCE(row_to_json(un), '{}') FROM units un) AS uom            FROM test_receipt_items items            LEFT JOIN units ON items.uom = units.id            WHERE items.receipt_id = (SELECT passed_id FROM passed_id)        )SELECT (SELECT passed_id FROM passed_id) AS passed_id,     test_receipts.*,     logins.username as submitted_by,     (SELECT COALESCE(array_agg(row_to_json(ris)), '{}') FROM cte_receipt_items ris) AS receipt_items,     row_to_json(test_vendors.*) as vendorFROM test_receiptsJOIN logins ON test_receipts.submitted_by = logins.idLEFT JOIN test_vendors ON test_receipts.vendor_id = test_vendors.id WHERE test_receipts.id=(SELECT passed_id FROM passed_id)')
2025-04-07 19:15:47.046817 --- ERROR --- DatabaseError(message='operator does not exist: character varying = integerLINE 5:             LEFT JOIN units ON items.uom = units.id                                                 ^HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.',
                                         payload=(5,),
                                         sql='WITH passed_id AS (SELECT %s AS passed_id),    cte_receipt_items AS (            SELECT items.*            FROM test_receipt_items items            LEFT JOIN units ON items.uom = units.id            WHERE items.receipt_id = (SELECT passed_id FROM passed_id)        )SELECT (SELECT passed_id FROM passed_id) AS passed_id,     test_receipts.*,     logins.username as submitted_by,     (SELECT COALESCE(array_agg(row_to_json(ris)), '{}') FROM cte_receipt_items ris) AS receipt_items,     row_to_json(test_vendors.*) as vendorFROM test_receiptsJOIN logins ON test_receipts.submitted_by = logins.idLEFT JOIN test_vendors ON test_receipts.vendor_id = test_vendors.id WHERE test_receipts.id=(SELECT passed_id FROM passed_id)')
2025-04-07 19:16:34.486882 --- ERROR --- DatabaseError(message='operator does not exist: character varying = integerLINE 5: ...        LEFT JOIN units ON test_receipt_items.uom = units.id                                                             ^HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.',
                                         payload=(5,),
                                         sql='WITH passed_id AS (SELECT %s AS passed_id),    cte_receipt_items AS (            SELECT test_receipt_items.*            FROM test_receipt_items            LEFT JOIN units ON test_receipt_items.uom = units.id            WHERE test_receipt_items.receipt_id = (SELECT passed_id FROM passed_id)        )SELECT (SELECT passed_id FROM passed_id) AS passed_id,     test_receipts.*,     logins.username as submitted_by,     (SELECT COALESCE(array_agg(row_to_json(ris)), '{}') FROM cte_receipt_items ris) AS receipt_items,     row_to_json(test_vendors.*) as vendorFROM test_receiptsJOIN logins ON test_receipts.submitted_by = logins.idLEFT JOIN test_vendors ON test_receipts.vendor_id = test_vendors.id WHERE test_receipts.id=(SELECT passed_id FROM passed_id)')
2025-04-07 19:19:55.680893 --- ERROR --- DatabaseError(message='more than one row returned by a subquery used as an expression',
                                         payload=(5,),
                                         sql='WITH passed_id AS (SELECT %s AS passed_id),    cte_receipt_items AS (            SELECT items.* ,            (SELECT COALESCE(row_to_json(un), '{}') FROM units un) AS uom            FROM test_receipt_items items            LEFT JOIN units ON items.uom = units.id            WHERE items.receipt_id = (SELECT passed_id FROM passed_id)        )SELECT (SELECT passed_id FROM passed_id) AS passed_id,     test_receipts.*,     logins.username as submitted_by,     (SELECT COALESCE(array_agg(row_to_json(ris)), '{}') FROM cte_receipt_items ris) AS receipt_items,     row_to_json(test_vendors.*) as vendorFROM test_receiptsJOIN logins ON test_receipts.submitted_by = logins.idLEFT JOIN test_vendors ON test_receipts.vendor_id = test_vendors.id WHERE test_receipts.id=(SELECT passed_id FROM passed_id)')
2025-04-08 06:49:10.286120 --- ERROR --- DatabaseError(message='duplicate key value violates unique constraint "test_shopping_list_items_uuid_sl_id_key"DETAIL:  Key (uuid, sl_id)=(%078742015101%, 5) already exists.',
                                         payload=('%078742015101%', '5', 'sku', '100% grated parmesan cheese', 1, 1, 2149, '{}'),
                                         sql='INSERT INTO test_shopping_list_items(uuid, sl_id, item_type, item_name, uom, qty, item_id, links) VALUES (%s, %s, %s, %s, %s, %s, %s, %s) RETURNING *;')
2025-04-09 17:00:37.142181 --- ERROR --- DatabaseError(message='syntax error at or near ";"LINE 24:         GROUP BY test_item_info.id;                                               ^',
                                         payload=(2149,),
                                         sql='WITH passed_id AS (SELECT %s AS passed_id),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    info_id AS (SELECT item_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_item_info_two AS (        SELECT         test_item_info.*,        row_to_json(units.*) as uom         FROM test_item_info        LEFT JOIN units ON test_item_info.uom = units.id        WHERE test_item_info.id = (SELECT item_info_id FROM info_id)    ),    cte_conversions AS (    SELECT         conversions.*     FROM conversions     WHERE conversions.id = ANY(SELECT unnest(conversions_column) FROM test_item_info)    ),    cte_item_info AS (        SELECT         cte_item_info.*,        json_agg(cte_conversions) AS conversions         FROM cte_item_info        LEFT JOIN cte_conversions ON true        GROUP BY test_item_info.id;        ),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,    (SELECT COALESCE(row_to_json(ii), '{}') FROM cte_item_info ii) AS item_info,    (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id    LEFT JOIN units ON test_item_info.uom = units.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-04-09 17:00:53.165583 --- ERROR --- DatabaseError(message='relation "conversions" does not existLINE 15:     FROM conversions                   ^',
                                         payload=(2149,),
                                         sql='WITH passed_id AS (SELECT %s AS passed_id),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    info_id AS (SELECT item_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_item_info_two AS (        SELECT         test_item_info.*,        row_to_json(units.*) as uom         FROM test_item_info        LEFT JOIN units ON test_item_info.uom = units.id        WHERE test_item_info.id = (SELECT item_info_id FROM info_id)    ),    cte_conversions AS (    SELECT         conversions.*     FROM conversions     WHERE conversions.id = ANY(SELECT unnest(conversions_column) FROM test_item_info)    ),    cte_item_info AS (        SELECT         cte_item_info.*,        json_agg(cte_conversions) AS conversions         FROM cte_item_info        LEFT JOIN cte_conversions ON true        GROUP BY test_item_info.id        ),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,    (SELECT COALESCE(row_to_json(ii), '{}') FROM cte_item_info ii) AS item_info,    (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id    LEFT JOIN units ON test_item_info.uom = units.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-04-09 17:02:26.029976 --- ERROR --- DatabaseError(message='column "conversions" does not existLINE 16: ...    WHERE test_conversions.id = ANY(SELECT unnest(conversion...                                                              ^',
                                         payload=(2149,),
                                         sql='WITH passed_id AS (SELECT %s AS passed_id),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    info_id AS (SELECT item_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_item_info_two AS (        SELECT         test_item_info.*,        row_to_json(units.*) as uom         FROM test_item_info        LEFT JOIN units ON test_item_info.uom = units.id        WHERE test_item_info.id = (SELECT item_info_id FROM info_id)    ),    cte_conversions AS (        SELECT             test_conversions.*         FROM test_conversions         WHERE test_conversions.id = ANY(SELECT unnest(conversions) FROM test_item_info)    ),    cte_item_info AS (        SELECT         cte_item_info.*,        json_agg(cte_conversions) AS conversions         FROM cte_item_info        LEFT JOIN cte_conversions ON true        GROUP BY test_item_info.id        ),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,    (SELECT COALESCE(row_to_json(ii), '{}') FROM cte_item_info ii) AS item_info,    (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id    LEFT JOIN units ON test_item_info.uom = units.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-04-09 17:02:55.461835 --- ERROR --- DatabaseError(message='column "conversions" does not existLINE 16: ...    WHERE test_conversions.id = ANY(SELECT unnest(conversion...                                                              ^',
                                         payload=(2149,),
                                         sql='WITH passed_id AS (SELECT %s AS passed_id),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    info_id AS (SELECT item_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_item_info_two AS (        SELECT         test_item_info.*,        row_to_json(units.*) as uom         FROM test_item_info        LEFT JOIN units ON test_item_info.uom = units.id        WHERE test_item_info.id = (SELECT item_info_id FROM info_id)    ),    cte_conversions AS (        SELECT             test_conversions.*         FROM test_conversions         WHERE test_conversions.id = ANY(SELECT unnest(conversions) FROM test_item_info)    ),    cte_item_info AS (        SELECT         cte_item_info_two.*,        json_agg(cte_conversions) AS conversions         FROM cte_item_info_two        LEFT JOIN cte_conversions ON true        GROUP BY test_item_info.id        ),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,    (SELECT COALESCE(row_to_json(ii), '{}') FROM cte_item_info ii) AS item_info,    (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id    LEFT JOIN units ON test_item_info.uom = units.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-04-09 17:03:42.594269 --- ERROR --- DatabaseError(message='column "conversions" does not existLINE 16: ...    WHERE test_conversions.id = ANY(SELECT unnest(conversion...                                                              ^',
                                         payload=(2149,),
                                         sql='WITH passed_id AS (SELECT %s AS passed_id),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    info_id AS (SELECT item_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_item_info AS (        SELECT         test_item_info.*,        row_to_json(units.*) as uom         FROM test_item_info        LEFT JOIN units ON test_item_info.uom = units.id        WHERE test_item_info.id = (SELECT item_info_id FROM info_id)    ),    cte_conversions AS (        SELECT             test_conversions.*         FROM test_conversions         WHERE test_conversions.id = ANY(SELECT unnest(conversions) FROM test_item_info)    ),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,    (SELECT COALESCE(row_to_json(ii), '{}') FROM cte_item_info ii) AS item_info,    (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id    LEFT JOIN units ON test_item_info.uom = units.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-04-09 17:05:18.810964 --- ERROR --- DatabaseError(message='missing FROM-clause entry for table "cte_conversions"LINE 14:         row_to_json(cte_conversions.*) as conversions                              ^',
                                         payload=(2149,),
                                         sql='WITH passed_id AS (SELECT %s AS passed_id),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    info_id AS (SELECT item_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_conversions AS (        SELECT             test_conversions.*         FROM test_conversions        WHERE test_conversions.item_id = (SELECT passed_id FROM passed_id)    ),    cte_item_info AS (        SELECT         test_item_info.*,        row_to_json(units.*) as uom,        row_to_json(cte_conversions.*) as conversions         FROM test_item_info        LEFT JOIN units ON test_item_info.uom = units.id        WHERE test_item_info.id = (SELECT item_info_id FROM info_id)    ),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,    (SELECT COALESCE(row_to_json(ii), '{}') FROM cte_item_info ii) AS item_info,    (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id    LEFT JOIN units ON test_item_info.uom = units.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-04-09 17:06:11.023787 --- ERROR --- DatabaseError(message='syntax error at or near "SELECT"LINE 14:         row_to_json(SELECT * FROM cte_conversions) as conver...                             ^',
                                         payload=(2149,),
                                         sql='WITH passed_id AS (SELECT %s AS passed_id),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    info_id AS (SELECT item_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_conversions AS (        SELECT             test_conversions.*         FROM test_conversions        WHERE test_conversions.item_id = (SELECT passed_id FROM passed_id)    ),    cte_item_info AS (        SELECT         test_item_info.*,        row_to_json(units.*) as uom,        row_to_json(SELECT * FROM cte_conversions) as conversions         FROM test_item_info        LEFT JOIN units ON test_item_info.uom = units.id        WHERE test_item_info.id = (SELECT item_info_id FROM info_id)    ),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,    (SELECT COALESCE(row_to_json(ii), '{}') FROM cte_item_info ii) AS item_info,    (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id    LEFT JOIN units ON test_item_info.uom = units.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-04-09 17:06:29.417010 --- ERROR --- DatabaseError(message='syntax error at or near "FROM"LINE 14:         row_to_json(* FROM cte_conversions) as conversions                                ^',
                                         payload=(2149,),
                                         sql='WITH passed_id AS (SELECT %s AS passed_id),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    info_id AS (SELECT item_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_conversions AS (        SELECT             test_conversions.*         FROM test_conversions        WHERE test_conversions.item_id = (SELECT passed_id FROM passed_id)    ),    cte_item_info AS (        SELECT         test_item_info.*,        row_to_json(units.*) as uom,        row_to_json(* FROM cte_conversions) as conversions         FROM test_item_info        LEFT JOIN units ON test_item_info.uom = units.id        WHERE test_item_info.id = (SELECT item_info_id FROM info_id)    ),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,    (SELECT COALESCE(row_to_json(ii), '{}') FROM cte_item_info ii) AS item_info,    (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id    LEFT JOIN units ON test_item_info.uom = units.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-04-09 17:07:43.627785 --- ERROR --- DatabaseError(message='missing FROM-clause entry for table "cte_conversions"LINE 14:         row_to_json(cte_conversions.*) AS conversions       ...                             ^',
                                         payload=(2149,),
                                         sql='WITH passed_id AS (SELECT %s AS passed_id),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    info_id AS (SELECT item_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_conversions AS (        SELECT             test_conversions.*         FROM test_conversions        WHERE test_conversions.item_id = (SELECT passed_id FROM passed_id)    ),    cte_item_info AS (        SELECT         test_item_info.*,        row_to_json(units.*) as uom,        row_to_json(cte_conversions.*) AS conversions                 FROM test_item_info        LEFT JOIN units ON test_item_info.uom = units.id        WHERE test_item_info.id = (SELECT item_info_id FROM info_id)    ),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,    (SELECT COALESCE(row_to_json(ii), '{}') FROM cte_item_info ii) AS item_info,    (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id    LEFT JOIN units ON test_item_info.uom = units.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-04-09 17:08:29.263327 --- ERROR --- DatabaseError(message='more than one row returned by a subquery used as an expression',
                                         payload=(2149,),
                                         sql='WITH passed_id AS (SELECT %s AS passed_id),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    info_id AS (SELECT item_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_conversions AS (        SELECT             test_conversions.*         FROM test_conversions        WHERE test_conversions.item_id = (SELECT passed_id FROM passed_id)    ),    cte_item_info AS (        SELECT         test_item_info.*,        row_to_json(units.*) as uom,        (SELECT row_to_json(convs) FROM cte_conversions convs) AS conversions         FROM test_item_info        LEFT JOIN units ON test_item_info.uom = units.id        WHERE test_item_info.id = (SELECT item_info_id FROM info_id)    ),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,    (SELECT COALESCE(row_to_json(ii), '{}') FROM cte_item_info ii) AS item_info,    (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id    LEFT JOIN units ON test_item_info.uom = units.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-04-11 16:18:53.997845 --- ERROR --- DatabaseError(message='invalid input syntax for type integer: "each"LINE 3: ...S ('new sku', 10, '%076808514377%', 'unknown', 1, 'each', '{...                                                             ^',
                                         payload=('new sku', 10, '%076808514377%', 'unknown', 1, 'each', '{"cost": 0, "expires": false}', 'Unresolved'),
                                         sql='INSERT INTO main_receipt_items(type, receipt_id, barcode, name, qty, uom, data, status) VALUES (%s, %s, %s, %s, %s, %s, %s, %s) RETURNING *;')
2025-04-11 17:33:40.206669 --- ERROR --- DatabaseError(message='column "prefixes" specified more than onceLINE 3: ...uom, cost, safety_stock, lead_time_days, ai_pick, prefixes)                                                              ^',
                                         payload=('%076808514377%', '{}', '', 1.0, 1, 0.0, 0.0, 0.0, False, []),
                                         sql='INSERT INTO main_item_info(barcode, prefixes, packaging, uom_quantity, uom, cost, safety_stock, lead_time_days, ai_pick, prefixes) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING *;')
2025-04-11 17:36:36.692381 --- ERROR --- DatabaseError(message='not all arguments converted during string formatting',
                                         payload=('%076808514377%', '{}', '', 1.0, 1, 0.0, 0.0, 0.0, False, []),
                                         sql='INSERT INTO main_item_info(barcode, packaging, uom_quantity, uom, cost, safety_stock, lead_time_days, ai_pick, prefixes) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING *;')






2025-04-12 09:38:34.044274 --- ERROR --- DatabaseError(message='syntax error at or near "test_item_info"LINE 18: ...on_agg(p.*) FROM test_prefixes as p WHERE p.id IN test_item_...                                                              ^',
                                         payload=(2149,),
                                         sql='WITH passed_id AS (SELECT %s AS passed_id),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    info_id AS (SELECT item_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_conversions AS (        SELECT             test_conversions.id as conv_id,            test_conversions.conv_factor as conv_factor,            units.* as uom        FROM test_conversions        LEFT JOIN units ON test_conversions.uom_id = units.id        WHERE test_conversions.item_id = (SELECT passed_id FROM passed_id)    ),    cte_item_info AS (        SELECT         test_item_info.*,        row_to_json(units.*) as uom,        COALESCE((SELECT json_agg(convs) FROM cte_conversions convs), '[]'::json) AS conversions,        COALESCE((SELECT json_agg(p.*) FROM test_prefixes as p WHERE p.id IN test_item_info.prefixes), '[]'::json) as prefixes         FROM test_item_info        LEFT JOIN units ON test_item_info.uom = units.id        WHERE test_item_info.id = (SELECT item_info_id FROM info_id)    ),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,    (SELECT COALESCE(row_to_json(ii), '{}') FROM cte_item_info ii) AS item_info,    (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id    LEFT JOIN units ON test_item_info.uom = units.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-04-12 09:39:52.102309 --- ERROR --- DatabaseError(message='relation "test_prefixes" does not existLINE 18:         COALESCE((SELECT json_agg(p.*) FROM test_prefixes as...                                                     ^',
                                         payload=(2149,),
                                         sql='WITH passed_id AS (SELECT %s AS passed_id),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    info_id AS (SELECT item_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_conversions AS (        SELECT             test_conversions.id as conv_id,            test_conversions.conv_factor as conv_factor,            units.* as uom        FROM test_conversions        LEFT JOIN units ON test_conversions.uom_id = units.id        WHERE test_conversions.item_id = (SELECT passed_id FROM passed_id)    ),    cte_item_info AS (        SELECT         test_item_info.*,        row_to_json(units.*) as uom,        COALESCE((SELECT json_agg(convs) FROM cte_conversions convs), '[]'::json) AS conversions,        COALESCE((SELECT json_agg(p.*) FROM test_prefixes as p WHERE p.id IN (test_item_info.prefixes)), '[]'::json) as prefixes         FROM test_item_info        LEFT JOIN units ON test_item_info.uom = units.id        WHERE test_item_info.id = (SELECT item_info_id FROM info_id)    ),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,    (SELECT COALESCE(row_to_json(ii), '{}') FROM cte_item_info ii) AS item_info,    (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id    LEFT JOIN units ON test_item_info.uom = units.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-04-12 09:40:26.149289 --- ERROR --- DatabaseError(message='operator does not exist: integer = integer[]LINE 18: ...son_agg(p.*) FROM test_sku_prefix as p WHERE p.id IN (test_i...                                                              ^HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.',
                                         payload=(2149,),
                                         sql='WITH passed_id AS (SELECT %s AS passed_id),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    info_id AS (SELECT item_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_conversions AS (        SELECT             test_conversions.id as conv_id,            test_conversions.conv_factor as conv_factor,            units.* as uom        FROM test_conversions        LEFT JOIN units ON test_conversions.uom_id = units.id        WHERE test_conversions.item_id = (SELECT passed_id FROM passed_id)    ),    cte_item_info AS (        SELECT         test_item_info.*,        row_to_json(units.*) as uom,        COALESCE((SELECT json_agg(convs) FROM cte_conversions convs), '[]'::json) AS conversions,        COALESCE((SELECT json_agg(p.*) FROM test_sku_prefix as p WHERE p.id IN (test_item_info.prefixes)), '[]'::json) as prefixes         FROM test_item_info        LEFT JOIN units ON test_item_info.uom = units.id        WHERE test_item_info.id = (SELECT item_info_id FROM info_id)    ),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,    (SELECT COALESCE(row_to_json(ii), '{}') FROM cte_item_info ii) AS item_info,    (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id    LEFT JOIN units ON test_item_info.uom = units.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')
2025-04-12 09:41:00.418051 --- ERROR --- DatabaseError(message='operator does not exist: integer @> integer[]LINE 18: ...son_agg(p.*) FROM test_sku_prefix as p WHERE p.id @> test_it...                                                              ^HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.',
                                         payload=(2149,),
                                         sql='WITH passed_id AS (SELECT %s AS passed_id),    logistics_id AS (SELECT logistics_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    info_id AS (SELECT item_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    cte_conversions AS (        SELECT             test_conversions.id as conv_id,            test_conversions.conv_factor as conv_factor,            units.* as uom        FROM test_conversions        LEFT JOIN units ON test_conversions.uom_id = units.id        WHERE test_conversions.item_id = (SELECT passed_id FROM passed_id)    ),    cte_item_info AS (        SELECT         test_item_info.*,        row_to_json(units.*) as uom,        COALESCE((SELECT json_agg(convs) FROM cte_conversions convs), '[]'::json) AS conversions,        COALESCE((SELECT json_agg(p.*) FROM test_sku_prefix as p WHERE p.id @> test_item_info.prefixes), '[]'::json) as prefixes         FROM test_item_info        LEFT JOIN units ON test_item_info.uom = units.id        WHERE test_item_info.id = (SELECT item_info_id FROM info_id)    ),    cte_groups AS (        SELECT             test_groups.*,             test_group_items.uuid,            test_group_items.item_type,            test_group_items.qty        FROM test_groups        JOIN test_group_items ON test_groups.id = test_group_items.gr_id        WHERE test_group_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_shopping_lists AS (        SELECT             test_shopping_lists.*,             test_shopping_list_items.uuid,            test_shopping_list_items.item_type,            test_shopping_list_items.qty        FROM test_shopping_lists        JOIN test_shopping_list_items ON test_shopping_lists.id = test_shopping_list_items.sl_id        WHERE test_shopping_list_items.item_id = (SELECT passed_id FROM passed_id)    ),    cte_itemlinks AS (        SELECT * FROM test_itemlinks WHERE link=(SELECT passed_id FROM passed_id)    ),    cte_item_locations AS (        SELECT * FROM test_item_locations        LEFT JOIN test_locations ON test_locations.id = test_item_locations.location_id        WHERE part_id = (SELECT passed_id FROM passed_id)    ),    cte_logistics_info AS (        SELECT         li.*,         row_to_json(pl) AS primary_location,        row_to_json(ail) AS auto_issue_location,        row_to_json(pz) AS primary_zone,        row_to_json(aiz) AS auto_issue_zone        FROM test_logistics_info AS li        LEFT JOIN test_locations AS pl ON li.primary_location = pl.id        LEFT JOIN test_locations AS ail ON li.auto_issue_location = ail.id        LEFT JOIN test_zones AS pz ON li.primary_zone = pz.id        LEFT JOIN test_zones AS aiz ON li.auto_issue_zone = aiz.id        WHERE li.id=(SELECT logistics_info_id FROM logistics_id)    )SELECT    (SELECT passed_id FROM passed_id) AS passed_id,    test_items.*,    (SELECT COALESCE(row_to_json(logis), '{}') FROM cte_logistics_info logis) AS logistics_info,    row_to_json(test_food_info.*) as food_info,     row_to_json(test_brands.*) as brand,    (SELECT COALESCE(row_to_json(ii), '{}') FROM cte_item_info ii) AS item_info,    (SELECT COALESCE(array_agg(row_to_json(g)), '{}') FROM cte_groups g) AS item_groups,    (SELECT COALESCE(array_agg(row_to_json(sl)), '{}') FROM cte_shopping_lists sl) AS item_shopping_lists,    (SELECT COALESCE(array_agg(row_to_json(il)), '{}') FROM cte_itemlinks il) AS linked_items,    (SELECT COALESCE(array_agg(row_to_json(ils)), '{}') FROM cte_item_locations ils) AS item_locationsFROM test_items    LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id     LEFT JOIN test_food_info ON test_items.food_info_id = test_food_info.id     LEFT JOIN test_brands ON test_items.brand = test_brands.id    LEFT JOIN units ON test_item_info.uom = units.id     LEFT JOIN cte_groups ON test_items.id = cte_groups.id    LEFT JOIN cte_shopping_lists ON test_items.id = cte_shopping_lists.idWHERE test_items.id=(SELECT passed_id FROM passed_id)GROUP BY     test_items.id, test_item_info.id, test_food_info.id, test_brands.id;')

2025-04-12 10:40:51.886361 --- ERROR --- DatabaseError(message='type object 'ItemInfoTable' has no attribute 'cursor'',
                                         payload=test,
                                         sql='SELECT * FROM <connection object at 0x00000181DCE4CF20; dsn: 'user=test password=xxx dbname=test host=192.168.1.67 port=5432', closed: 0>_item_info WHERE id=%s;')
2025-04-12 14:04:48.983858 --- ERROR --- DatabaseError(message='duplicate key value violates unique constraint "main_sku_prefix_name_uuid_key"DETAIL:  Key (name, uuid)=(Soda, %1000%) already exists.',
                                         payload=('%1000%', 'Soda', ''),
                                         sql='INSERT INTO main_sku_prefix(uuid, name, description) VALUES (%s, %s, %s) RETURNING *;')
2025-04-12 14:47:01.980333 --- ERROR --- DatabaseError(message='invalid input syntax for type integer: " Pinch"LINE 1: ... SET name = 'Coca-Cola 12 Pack', qty = '1', uom = ' Pinch', ...                                                             ^',
                                         payload={'id': 66, 'update': {'name': 'Coca-Cola 12 Pack', 'qty': '1', 'uom': ' Pinch', 'data': {'cost': '0', 'expires': False, 'api_data': {'id': '0049000028904', 'lc': 'en', '_id': '0049000028904', 'rev': 20, 'code': '0049000028904', 'lang': 'en', 'link': '', 'teams': 'swipe-studio', 'brands': 'Coca-Cola', 'images': {'1': {'sizes': {'100': {'h': 60, 'w': 100}, '400': {'h': 239, 'w': 400}, 'full': {'h': 957, 'w': 1600}}, 'uploader': 'openfoodfacts-contributors', 'uploaded_t': '1478385267'}, '2': {'sizes': {'100': {'h': 100, 'w': 75}, '400': {'h': 400, 'w': 300}, 'full': {'h': 3328, 'w': 2496}}, 'uploader': 'tanyad1013', 'uploaded_t': 1555187983}, '3': {'sizes': {'100': {'h': 100, 'w': 75}, '400': {'h': 400, 'w': 300}, 'full': {'h': 3328, 'w': 2496}}, 'uploader': 'tanyad1013', 'uploaded_t': 1555188029}, '5': {'sizes': {'100': {'h': 100, 'w': 100}, '400': {'h': 400, 'w': 400}, 'full': {'h': 1400, 'w': 1400}}, 'uploader': 'thaialagata', 'uploaded_t': 1640260897}, 'front_en': {'x1': '0', 'x2': '0', 'y1': '0', 'y2': '0', 'rev': '16', 'angle': '0', 'imgid': '5', 'sizes': {'100': {'h': 78, 'w': 100}, '200': {'h': 156, 'w': 200}, '400': {'h': 311, 'w': 400}, 'full': {'h': 1080, 'w': 1389}}, 'geometry': '0x0-0-0', 'normalize': 'false', 'white_magic': 'false', 'coordinates_image_size': 'full'}, 'ingredients_en': {'x1': None, 'x2': None, 'y1': None, 'y2': None, 'rev': '8', 'angle': None, 'imgid': '3', 'sizes': {'100': {'h': 100, 'w': 75}, '200': {'h': 200, 'w': 150}, '400': {'h': 400, 'w': 300}, 'full': {'h': 3328, 'w': 2496}}, 'geometry': '0x0-0-0', 'normalize': None, 'white_magic': None}}, 'labels': '', 'origin': '', 'states': 'en:to-be-completed, en:nutrition-facts-completed, en:ingredients-completed, en:expiration-date-to-be-completed, en:packaging-code-to-be-completed, en:characteristics-to-be-completed, en:origins-to-be-completed, en:categories-completed, en:brands-completed, en:packaging-completed, en:quantity-completed, en:product-name-completed, en:photos-to-be-validated, en:packaging-photo-to-be-selected, en:nutrition-photo-to-be-selected, en:ingredients-photo-selected, en:front-photo-selected, en:photos-uploaded', 'stores': '', 'traces': '', 'creator': 'openfoodfacts-contributors', 'origins': '', 'scans_n': 18, 'sortkey': 1609090427, 'complete': 0, 'quantity': '12 cans', '_keywords': ['beverage', 'carbonated', 'coca-cola', 'drink'], 'allergens': '', 'countries': 'United States', 'created_t': 1478385267, 'emb_codes': '', 'image_url': 'https://images.openfoodfacts.org/images/products/004/900/002/8904/front_en.16.400.jpg', 'labels_lc': 'en', 'languages': {'en:english': 4}, 'max_imgid': '5', 'misc_tags': ['en:ecoscore-extended-data-computed', 'en:ecoscore-extended-data-version-4', 'en:ecoscore-not-computed', 'en:nutriscore-2021-e-2023-e', 'en:nutriscore-2021-same-as-2023', 'en:nutriscore-computed', 'en:nutrition-fruits-vegetables-legumes-estimate-from-ingredients', 'en:nutrition-fruits-vegetables-nuts-estimate-from-ingredients', 'en:nutrition-no-fiber', 'en:nutrition-no-fiber-or-fruits-vegetables-nuts', 'en:packagings-not-complete', 'en:packagings-not-empty', 'en:packagings-not-empty-but-not-complete', 'en:packagings-number-of-components-2'], 'origin_en': '', 'packaging': 'Aluminium-can, Card-box', 'traces_lc': 'en', 'categories': 'Beverages, Carbonated drinks', 'codes_tags': ['code-13', 'conflict-with-upc-12', '0049000028xxx', '004900002xxxx', '00490000xxxxx', '0049000xxxxxx', '004900xxxxxxx', '00490xxxxxxxx', '0049xxxxxxxxx', '004xxxxxxxxxx', '00xxxxxxxxxxx', '0xxxxxxxxxxxx'], 'labels_old': '', 'nova_group': 4, 'nutriments': {'fat': 0, 'salt': 112.5, 'energy': 586, 'sodium': 45, 'sugars': 39, 'fat_100g': 0, 'fat_unit': 'g', 'proteins': 0, 'fat_value': 0, 'salt_100g': 31.7, 'salt_unit': 'g', 'nova-group': 4, 'salt_value': 112.5, 'energy-kcal': 140, 'energy_100g': 165, 'energy_unit': 'kcal', 'fat_serving': 0, 'sodium_100g': 12.7, 'sodium_unit': 'g', 'sugars_100g': 11, 'sugars_unit': 'g', 'energy_value': 140, 'salt_serving': 112.5, 'sodium_value': 45, 'sugars_value': 39, 'carbohydrates': 39, 'proteins_100g': 0, 'proteins_unit': 'g', 'energy_serving': 586, 'proteins_value': 0, 'sodium_serving': 45, 'sugars_serving': 39, 'nova-group_100g': 4, 'energy-kcal_100g': 39.4, 'energy-kcal_unit': 'kcal', 'proteins_serving': 0, 'energy-kcal_value': 140, 'carbohydrates_100g': 11, 'carbohydrates_unit': 'g', 'nova-group_serving': 4, 'nutrition-score-fr': 32, 'carbohydrates_value': 39, 'energy-kcal_serving': 140, 'carbohydrates_serving': 39, 'nutrition-score-fr_100g': 32, 'energy-kcal_value_computed': 156, 'fruits-vegetables-nuts-estimate-from-ingredients_100g': 0, 'fruits-vegetables-legumes-estimate-from-ingredients_100g': 0, 'fruits-vegetables-nuts-estimate-from-ingredients_serving': 0, 'fruits-vegetables-legumes-estimate-from-ingredients_serving': 0}, 'nutriscore': {'2021': {'data': {'fiber': 0, 'energy': 165, 'is_fat': 0, 'sodium': 12700, 'sugars': 11, 'is_water': 0, 'proteins': 0, 'is_cheese': 0, 'fiber_value': 0, 'is_beverage': 1, 'energy_value': 165, 'fiber_points': 0, 'sodium_value': 12700, 'sugars_value': 11, 'energy_points': 6, 'saturated_fat': 0, 'sodium_points': 10, 'sugars_points': 8, 'proteins_value': 0, 'negative_points': 24, 'positive_points': 0, 'proteins_points': 0, 'saturated_fat_ratio': 0, 'saturated_fat_value': 0, 'saturated_fat_points': 0, 'fruits_vegetables_nuts_colza_walnut_olive_oils': 0, 'fruits_vegetables_nuts_colza_walnut_olive_oils_value': 0, 'fruits_vegetables_nuts_colza_walnut_olive_oils_points': 0}, 'grade': 'e', 'score': 24, 'category_available': 1, 'nutrients_available': 1, 'nutriscore_computed': 1, 'nutriscore_applicable': 1}, '2023': {'data': {'is_water': 0, 'is_cheese': 0, 'components': {'negative': [{'id': 'energy', 'unit': 'kJ', 'value': 165, 'points': 3, 'points_max': 10}, {'id': 'sugars', 'unit': 'g', 'value': 11, 'points': 9, 'points_max': 10}, {'id': 'saturated_fat', 'unit': 'g', 'value': 0, 'points': 0, 'points_max': 10}, {'id': 'salt', 'unit': 'g', 'value': 31.7, 'points': 20, 'points_max': 20}, {'id': 'non_nutritive_sweeteners', 'unit': 'number', 'value': 0, 'points': 0, 'points_max': 4}], 'positive': [{'id': 'proteins', 'unit': 'g', 'value': 0, 'points': 0, 'points_max': 7}, {'id': 'fiber', 'unit': 'g', 'value': None, 'points': 0, 'points_max': 5}, {'id': 'fruits_vegetables_legumes', 'unit': '%', 'value': 0, 'points': 0, 'points_max': 6}]}, 'is_beverage': 1, 'count_proteins': 1, 'negative_points': 32, 'positive_points': 0, 'positive_nutrients': ['proteins', 'fiber', 'fruits_vegetables_legumes'], 'is_red_meat_product': 0, 'negative_points_max': 54, 'positive_points_max': 18, 'count_proteins_reason': 'beverage', 'is_fat_oil_nuts_seeds': 0}, 'grade': 'e', 'score': 32, 'category_available': 1, 'nutrients_available': 1, 'nutriscore_computed': 1, 'nutriscore_applicable': 1}}, 'origins_lc': 'en', 'packagings': [{'shape': 'en:can', 'material': 'en:aluminium'}, {'shape': 'en:box'}], 'teams_tags': ['swipe-studio'], 'update_key': 'sort', 'additives_n': 2, 'brands_tags': ['coca-cola'], 'cities_tags': [], 'food_groups': 'en:unsweetened-beverages', 'ingredients': [{'id': 'en:pledse-recycle-cans', 'text': 'pledse recycle cans', 'percent_max': 100, 'percent_min': 9.09090909090909, 'is_in_taxonomy': 0, 'percent_estimate': 54.5454545454545}, {'id': 'en:cartons-cts-ainer-fructose-corn-syrup-1-can-phosphoric-acid', 'text': 'cartons cts ainer fructose corn syrup 1 can phosphoric acid', 'percent_max': 50, 'percent_min': 0, 'is_in_taxonomy': 0, 'percent_estimate': 22.7272727272727}, {'id': 'en:natural-carbonated-water', 'text': 'natural carbonated water', 'percent_max': 33.3333333333333, 'percent_min': 0, 'is_in_taxonomy': 0, 'percent_estimate': 11.3636363636364}, {'id': 'en:high-caramel-color', 'text': 'high caramel color', 'percent_max': 25, 'percent_min': 0, 'is_in_taxonomy': 0, 'percent_estimate': 5.68181818181818}, {'id': 'en:flavouring', 'text': 'flavors', 'vegan': 'maybe', 'vegetarian': 'maybe', 'percent_max': '5', 'percent_min': 0, 'is_in_taxonomy': 1, 'percent_estimate': 2.5}, {'id': 'en:caffeine', 'text': 'caffeine', 'vegan': 'yes', 'vegetarian': 'yes', 'percent_max': '5', 'percent_min': 0, 'is_in_taxonomy': 1, 'percent_estimate': 1.59090909090909}, {'id': 'en:canned-under-authority-of-the-coca-cola-company-atlanta', 'text': 'canned under authority of the coca-cola company atlanta', 'percent_max': '5', 'percent_min': 0, 'is_in_taxonomy': 0, 'percent_estimate': 0.795454545454547}, {'id': 'en:ga-30313', 'text': 'ga 30313', 'percent_max': '5', 'percent_min': 0, 'is_in_taxonomy': 0, 'percent_estimate': 0.397727272727273}, {'id': 'en:canner-s-name-and-address-appear-on-each-can', 'text': "canner's name and address appear on each can", 'percent_max': '5', 'percent_min': 0, 'is_in_taxonomy': 0, 'percent_estimate': 0.19886363636364}, {'id': 'en:caffeine-content', 'text': 'caffeine content', 'quantity': '34 mg', 'quantity_g': 0.034, 'ingredients': [{'id': 'en:12-fl-oz-02017-the-coca-cola-140-daily-value-0-2-14-g-company-consumer-information-ugars-78-call-1-800-438-2653-coke', 'text': '12 fl oz 02017 the coca-cola 140 daily value 0% 2% 14% g company consumer information ugars 78%| call 1-800-438-2653 coke', 'percent_max': '5', 'percent_min': 0, 'is_in_taxonomy': 0, 'percent_estimate': 0.0994318181818201}], 'percent_max': '5', 'percent_min': 0, 'is_in_taxonomy': 0, 'percent_estimate': 0.0994318181818201}, {'id': 'en:com-l-saturated-fat-tary-fiber-and-potassium-coke-scan-here-for-more-food-information-rchase-floz-cans', 'text': 'com l saturated fat tary fiber and potassium coke scan here for more food information rchase floz cans', 'percent_max': '5', 'percent_min': 0, 'is_in_taxonomy': 0, 'percent_estimate': 0.099431818181813}], 'labels_tags': [], 'nova_groups': '4', 'origins_old': '', 'states_tags': ['en:to-be-completed', 'en:nutrition-facts-completed', 'en:ingredients-completed', 'en:expiration-date-to-be-completed', 'en:packaging-code-to-be-completed', 'en:characteristics-to-be-completed', 'en:origins-to-be-completed', 'en:categories-completed', 'en:brands-completed', 'en:packaging-completed', 'en:quantity-completed', 'en:product-name-completed', 'en:photos-to-be-validated', 'en:packaging-photo-to-be-selected', 'en:nutrition-photo-to-be-selected', 'en:ingredients-photo-selected', 'en:front-photo-selected', 'en:photos-uploaded'], 'stores_tags': [], 'traces_tags': [], 'allergens_lc': 'en', 'completeness': 0.775, 'countries_lc': 'en', 'data_sources': 'App - Horizon, App - InFood, Apps', 'editors_tags': ['ecoscore-impact-estimator', 'foodless', 'inf', 'openfoodfacts-contributors', 'swipe-studio', 'tanyad1013', 'teolemon', 'thaialagata'], 'generic_name': '', 'last_image_t': 1640260897, 'origins_tags': [], 'packaging_lc': 'en', 'packagings_n': 2, 'product_name': 'Coca-Cola', 'product_type': 'food', 'serving_size': '355ml', 'categories_lc': 'en', 'checkers_tags': [], 'ecoscore_data': {'scores': {}, 'status': 'unknown', 'missing': {'labels': 1, 'origins': 1, 'packagings': 1, 'agb_category': 1}, 'agribalyse': {'warning': 'missing_agribalyse_match'}, 'adjustments': {'packaging': {'score': -28, 'value': -13, 'warning': 'unspecified_material', 'packagings': [{'shape': 'en:can', 'material': 'en:heavy-aluminium', 'ecoscore_shape_ratio': 1, 'ecoscore_material_score': 72}, {'shape': 'en:box', 'material': 'en:unknown', 'ecoscore_shape_ratio': 1, 'ecoscore_material_score': 0}], 'non_recyclable_and_non_biodegradable_materials': 0}, 'production_system': {'value': 0, 'labels': [], 'warning': 'no_label'}, 'threatened_species': {}, 'origins_of_ingredients': {'value': -5, 'values': {'ad': -5, 'al': -5, 'at': -5, 'ax': -5, 'ba': -5, 'be': -5, 'bg': -5, 'ch': -5, 'cy': -5, 'cz': -5, 'de': -5, 'dk': -5, 'dz': -5, 'ee': -5, 'eg': -5, 'es': -5, 'fi': -5, 'fo': -5, 'fr': -5, 'gg': -5, 'gi': -5, 'gr': -5, 'hr': -5, 'hu': -5, 'ie': -5, 'il': -5, 'im': -5, 'is': -5, 'it': -5, 'je': -5, 'lb': -5, 'li': -5, 'lt': -5, 'lu': -5, 'lv': -5, 'ly': -5, 'ma': -5, 'mc': -5, 'md': -5, 'me': -5, 'mk': -5, 'mt': -5, 'nl': -5, 'no': -5, 'pl': -5, 'ps': -5, 'pt': -5, 'ro': -5, 'rs': -5, 'se': -5, 'si': -5, 'sj': -5, 'sk': -5, 'sm': -5, 'sy': -5, 'tn': -5, 'tr': -5, 'ua': -5, 'uk': -5, 'us': -5, 'va': -5, 'xk': -5, 'world': -5}, 'warning': 'origins_are_100_percent_unknown', 'epi_score': 0, 'epi_value': -5, 'aggregated_origins': [{'origin': 'en:unknown', 'percent': 100, 'epi_score': '0', 'transportation_score': 0}], 'transportation_score': 0, 'transportation_value': 0, 'transportation_scores': {'ad': 0, 'al': 0, 'at': 0, 'ax': 0, 'ba': 0, 'be': 0, 'bg': 0, 'ch': 0, 'cy': 0, 'cz': 0, 'de': 0, 'dk': 0, 'dz': 0, 'ee': 0, 'eg': 0, 'es': 0, 'fi': 0, 'fo': 0, 'fr': 0, 'gg': 0, 'gi': 0, 'gr': 0, 'hr': 0, 'hu': 0, 'ie': 0, 'il': 0, 'im': 0, 'is': 0, 'it': 0, 'je': 0, 'lb': 0, 'li': 0, 'lt': 0, 'lu': 0, 'lv': 0, 'ly': 0, 'ma': 0, 'mc': 0, 'md': 0, 'me': 0, 'mk': 0, 'mt': 0, 'nl': 0, 'no': 0, 'pl': 0, 'ps': 0, 'pt': 0, 'ro': 0, 'rs': 0, 'se': 0, 'si': 0, 'sj': 0, 'sk': 0, 'sm': 0, 'sy': 0, 'tn': 0, 'tr': 0, 'ua': 0, 'uk': 0, 'us': 0, 'va': 0, 'xk': 0, 'world': 0}, 'transportation_values': {'ad': 0, 'al': 0, 'at': 0, 'ax': 0, 'ba': 0, 'be': 0, 'bg': 0, 'ch': 0, 'cy': 0, 'cz': 0, 'de': 0, 'dk': 0, 'dz': 0, 'ee': 0, 'eg': 0, 'es': 0, 'fi': 0, 'fo': 0, 'fr': 0, 'gg': 0, 'gi': 0, 'gr': 0, 'hr': 0, 'hu': 0, 'ie': 0, 'il': 0, 'im': 0, 'is': 0, 'it': 0, 'je': 0, 'lb': 0, 'li': 0, 'lt': 0, 'lu': 0, 'lv': 0, 'ly': 0, 'ma': 0, 'mc': 0, 'md': 0, 'me': 0, 'mk': 0, 'mt': 0, 'nl': 0, 'no': 0, 'pl': 0, 'ps': 0, 'pt': 0, 'ro': 0, 'rs': 0, 'se': 0, 'si': 0, 'sj': 0, 'sk': 0, 'sm': 0, 'sy': 0, 'tn': 0, 'tr': 0, 'ua': 0, 'uk': 0, 'us': 0, 'va': 0, 'xk': 0, 'world': 0}, 'origins_from_categories': ['en:unknown'], 'origins_from_origins_field': ['en:unknown']}}, 'missing_agribalyse_match_warning': 1}, 'ecoscore_tags': ['unknown'], 'ingredients_n': 12, 'minerals_tags': [], 'packaging_old': 'en:card-box,en:aluminium-can', 'pnns_groups_1': 'Beverages', 'pnns_groups_2': 'Unsweetened beverages', 'vitamins_tags': [], 'weighers_tags': [], 'additives_tags': ['en:e150c', 'en:e338'], 'allergens_tags': [], 'categories_old': 'Beverages, Carbonated drinks', 'countries_tags': ['en:united-states'], 'ecoscore_grade': 'unknown', 'emb_codes_tags': [], 'informers_tags': ['openfoodfacts-contributors', 'tanyad1013', 'teolemon', 'swipe-studio', 'ecoscore-impact-estimator'], 'ingredients_lc': 'en', 'languages_tags': ['en:english', 'en:1'], 'last_updated_t': 1738753791, 'nutrition_data': 'on', 'packaging_tags': ['en:aluminium-can', 'en:card-box'], 'packaging_text': '', 'popularity_key': 23900000011, 'schema_version': 998, 'unique_scans_n': 11, 'categories_tags': ['en:beverages', 'en:carbonated-drinks'], 'correctors_tags': ['openfoodfacts-contributors', 'tanyad1013', 'teolemon', 'inf', 'swipe-studio', 'thaialagata', 'ecoscore-impact-estimator'], 'expiration_date': '', 'generic_name_en': '', 'image_front_url': 'https://images.openfoodfacts.org/images/products/004/900/002/8904/front_en.16.400.jpg', 'image_small_url': 'https://images.openfoodfacts.org/images/products/004/900/002/8904/front_en.16.200.jpg', 'image_thumb_url': 'https://images.openfoodfacts.org/images/products/004/900/002/8904/front_en.16.100.jpg', 'languages_codes': {'en': 4}, 'last_modified_t': 1728751740, 'nutrient_levels': {'fat': 'low', 'salt': 'high', 'sugars': 'high'}, 'nutriscore_data': {'grade': 'e', 'score': 32, 'is_water': 0, 'is_cheese': 0, 'components': {'negative': [{'id': 'energy', 'unit': 'kJ', 'value': 165, 'points': 3, 'points_max': 10}, {'id': 'sugars', 'unit': 'g', 'value': 11, 'points': 9, 'points_max': 10}, {'id': 'saturated_fat', 'unit': 'g', 'value': 0, 'points': 0, 'points_max': 10}, {'id': 'salt', 'unit': 'g', 'value': 31.7, 'points': 20, 'points_max': 20}, {'id': 'non_nutritive_sweeteners', 'unit': 'number', 'value': 0, 'points': 0, 'points_max': 4}], 'positive': [{'id': 'proteins', 'unit': 'g', 'value': 0, 'points': 0, 'points_max': 7}, {'id': 'fiber', 'unit': 'g', 'value': None, 'points': 0, 'points_max': 5}, {'id': 'fruits_vegetables_legumes', 'unit': '%', 'value': 0, 'points': 0, 'points_max': 6}]}, 'is_beverage': 1, 'count_proteins': 1, 'negative_points': 32, 'positive_points': 0, 'positive_nutrients': ['proteins', 'fiber', 'fruits_vegetables_legumes'], 'is_red_meat_product': 0, 'negative_points_max': 54, 'positive_points_max': 18, 'count_proteins_reason': 'beverage', 'is_fat_oil_nuts_seeds': 0}, 'nutriscore_tags': ['e'], 'popularity_tags': ['top-country-fr-scans-2019', 'bottom-25-percent-scans-2020', 'bottom-20-percent-scans-2020', 'top-85-percent-scans-2020', 'top-90-percent-scans-2020', 'top-5000-us-scans-2020', 'top-10000-us-scans-2020', 'top-50000-us-scans-2020', 'top-100000-us-scans-2020', 'top-country-us-scans-2020', 'top-75-percent-scans-2021', 'top-80-percent-scans-2021', 'top-85-percent-scans-2021', 'top-90-percent-scans-2021', 'top-5000-ua-scans-2021', 'top-10000-ua-scans-2021', 'top-50000-ua-scans-2021', 'top-100000-ua-scans-2021', 'top-country-ua-scans-2021', 'top-50000-us-scans-2021', 'top-100000-us-scans-2021', 'top-75-percent-scans-2022', 'top-80-percent-scans-2022', 'top-85-percent-scans-2022', 'top-90-percent-scans-2022', 'top-1000-us-scans-2022', 'top-5000-us-scans-2022', 'top-10000-us-scans-2022', 'top-50000-us-scans-2022', 'top-100000-us-scans-2022', 'top-country-us-scans-2022', 'top-75-percent-scans-2023', 'top-80-percent-scans-2023', 'top-85-percent-scans-2023', 'top-90-percent-scans-2023', 'top-5000-mx-scans-2023', 'top-10000-mx-scans-2023', 'top-50000-mx-scans-2023', 'top-100000-mx-scans-2023', 'top-country-mx-scans-2023', 'top-100000-scans-2024', 'at-least-5-scans-2024', 'at-least-10-scans-2024', 'top-75-percent-scans-2024', 'top-80-percent-scans-2024', 'top-85-percent-scans-2024', 'top-90-percent-scans-2024', 'top-10000-us-scans-2024', 'top-50000-us-scans-2024', 'top-100000-us-scans-2024', 'top-country-us-scans-2024', 'top-100000-fr-scans-2024', 'top-50000-it-scans-2024', 'top-100000-it-scans-2024', 'top-10000-in-scans-2024', 'top-50000-in-scans-2024', 'top-100000-in-scans-2024', 'top-5000-lv-scans-2024', 'top-10000-lv-scans-2024', 'top-50000-lv-scans-2024', 'top-100000-lv-scans-2024', 'top-5000-sg-scans-2024', 'top-10000-sg-scans-2024', 'top-50000-sg-scans-2024', 'top-100000-sg-scans-2024', 'top-50000-nl-scans-2024', 'top-100000-nl-scans-2024', 'top-50000-es-scans-2024', 'top-100000-es-scans-2024'], 'product_name_en': 'Coca-Cola', 'purchase_places': '', 'selected_images': {'front': {'small': {'en': 'https://images.openfoodfacts.org/images/products/004/900/002/8904/front_en.16.200.jpg'}, 'thumb': {'en': 'https://images.openfoodfacts.org/images/products/004/900/002/8904/front_en.16.100.jpg'}, 'display': {'en': 'https://images.openfoodfacts.org/images/products/004/900/002/8904/front_en.16.400.jpg'}}, 'ingredients': {'small': {'en': 'https://images.openfoodfacts.org/images/products/004/900/002/8904/ingredients_en.8.200.jpg'}, 'thumb': {'en': 'https://images.openfoodfacts.org/images/products/004/900/002/8904/ingredients_en.8.100.jpg'}, 'display': {'en': 'https://images.openfoodfacts.org/images/products/004/900/002/8904/ingredients_en.8.400.jpg'}}}, 'amino_acids_tags': [], 'entry_dates_tags': ['2016-11-05', '2016-11', '2016'], 'food_groups_tags': ['en:beverages', 'en:unsweetened-beverages'], 'ingredients_tags': ['en:pledse-recycle-cans', 'en:cartons-cts-ainer-fructose-corn-syrup-1-can-phosphoric-acid', 'en:natural-carbonated-water', 'en:high-caramel-color', 'en:flavouring', 'en:caffeine', 'en:canned-under-authority-of-the-coca-cola-company-atlanta', 'en:ga-30313', 'en:canner-s-name-and-address-appear-on-each-can', 'en:caffeine-content', 'en:com-l-saturated-fat-tary-fiber-and-potassium-coke-scan-here-for-more-food-information-rchase-floz-cans', 'en:12-fl-oz-02017-the-coca-cola-140-daily-value-0-2-14-g-company-consumer-information-ugars-78-call-1-800-438-2653-coke'], 'ingredients_text': "pledse recycle cans, cartons cts ainer fructose corn syrup 1 can phosphoric acid, natural carbonated water, high caramel color, flavors, caffeine, canned under authority of the coca-cola company atlanta, ga 30313, canner's name and address appear on each can, caffeine content: 34 mg/12 fl oz 02017 the coca-cola 140 daily value 0% 2% 14% g company consumer information ugars 78%| call 1-800-438-2653 coke,com l saturated fat tary fiber and potassium coke scan here for more food information rchase floz cans", 'labels_hierarchy': [], 'nova_group_debug': '', 'nova_groups_tags': ['en:4-ultra-processed-food-and-drink-products'], 'nucleotides_tags': [], 'nutriscore_grade': 'e', 'nutriscore_score': 32, 'nutrition_grades': 'e', 'product_quantity': '0', 'serving_quantity': '355', 'states_hierarchy': ['en:to-be-completed', 'en:nutrition-facts-completed', 'en:ingredients-completed', 'en:expiration-date-to-be-completed', 'en:packaging-code-to-be-completed', 'en:characteristics-to-be-completed', 'en:origins-to-be-completed', 'en:categories-completed', 'en:brands-completed', 'en:packaging-completed', 'en:quantity-completed', 'en:product-name-completed', 'en:photos-to-be-validated', 'en:packaging-photo-to-be-selected', 'en:nutrition-photo-to-be-selected', 'en:ingredients-photo-selected', 'en:front-photo-selected', 'en:photos-uploaded'], 'traces_from_user': '(en) ', 'traces_hierarchy': [], 'data_quality_tags': ['en:packaging-data-incomplete', 'en:ingredients-percent-analysis-ok', 'en:ecoscore-extended-data-computed', 'en:ecoscore-extended-data-less-precise-than-agribalyse', 'en:food-groups-1-known', 'en:food-groups-2-known', 'en:food-groups-3-unknown', 'en:ingredients-unknown-score-above-5', 'en:ingredients-80-percent-unknown', 'en:ingredients-ingredient-tag-length-greater-than-50', 'en:ingredients-ingredient-tag-length-greater-than-100', 'en:nutrition-value-very-high-for-category-salt', 'en:product-quantity-under-1g', 'en:serving-quantity-over-product-quantity', 'en:ecoscore-origins-of-ingredients-origins-are-100-percent-unknown', 'en:ecoscore-packaging-unspecified-material', 'en:ecoscore-production-system-no-label'], 'data_sources_tags': ['app-horizon', 'app-infood', 'apps'], 'ingredients_debug': ['pledse recycle cans& cartons cts ainer FRUCTOSE CORN SYRUP 1 Can PHOSPHORIC ACID', ',', None, None, None, ' NATURAL CARBONATED WATER', ',', None, None, None, ' HIGH CARAMEL COLOR', ',', None, None, None, ' FLAVORS', ',', None, None, None, ' CAFFEINE', '. ', None, None, None, 'CANNED UNDER AUTHORITY OF THE COCA-COLA COMPANY ATLANTA', ',', None, None, None, ' GA 30313', '. ', None, None, None, "CANNER'S NAME AND ADDRESS APPEAR ON EACH CAN", '. ', None, None, None, 'CAFFEINE CONTENT', ':', ':', None, None, ' 34 mg', '/', None, None, '/', '12 fl oz 02017 THE COCA-COLA 140 Daily Value 0% 2% 14% g COMPANY CONSUMER INFORMATION ugars 78%| CALL 1-800-438-2653 coke.com l saturated fat tary fiber and potassium Coke SCAN HERE FoR MORE FOOD INFORMATION RCHASE FLOZ CANS'], 'origins_hierarchy': [], 'packaging_text_en': '', 'ingredients_n_tags': ['12', '11-20'], 'minerals_prev_tags': [], 'nutriscore_version': '2023', 'nutrition_data_per': 'serving', 'nutrition_grade_fr': 'e', 'photographers_tags': ['openfoodfacts-contributors', 'tanyad1013', 'thaialagata'], 'pnns_groups_1_tags': ['beverages', 'known'], 'pnns_groups_2_tags': ['unsweetened-beverages', 'known'], 'vitamins_prev_tags': [], 'allergens_from_user': '(en) ', 'allergens_hierarchy': [], 'category_properties': {}, 'countries_hierarchy': ['en:united-states'], 'ingredients_text_en': "pledse recycle cans, cartons cts ainer fructose corn syrup 1 can phosphoric acid, natural carbonated water, high caramel color, flavors, caffeine, canned under authority of the coca-cola company atlanta, ga 30313, canner's name and address appear on each can, caffeine content: 34 mg/12 fl oz 02017 the coca-cola 140 daily value 0% 2% 14% g company consumer information ugars 78%| call 1-800-438-2653 coke,com l saturated fat tary fiber and potassium coke scan here for more food information rchase floz cans", 'known_ingredients_n': 2, 'languages_hierarchy': ['en:english'], 'main_countries_tags': [], 'nova_groups_markers': {'4': [['additives', 'en:e150c'], ['ingredients', 'en:flavouring']]}, 'packaging_hierarchy': ['en:Aluminium-can', 'en:Card-box'], 'added_countries_tags': [], 'categories_hierarchy': ['en:beverages', 'en:carbonated-drinks'], 'compared_to_category': 'en:carbonated-drinks', 'ingredients_analysis': {'en:vegan-status-unknown': ['en:pledse-recycle-cans', 'en:cartons-cts-ainer-fructose-corn-syrup-1-can-phosphoric-acid', 'en:natural-carbonated-water', 'en:high-caramel-color', 'en:canned-under-authority-of-the-coca-cola-company-atlanta', 'en:ga-30313', 'en:canner-s-name-and-address-appear-on-each-can', 'en:caffeine-content', 'en:12-fl-oz-02017-the-coca-cola-140-daily-value-0-2-14-g-company-consumer-information-ugars-78-call-1-800-438-2653-coke', 'en:com-l-saturated-fat-tary-fiber-and-potassium-coke-scan-here-for-more-food-information-rchase-floz-cans'], 'en:palm-oil-content-unknown': ['en:pledse-recycle-cans', 'en:cartons-cts-ainer-fructose-corn-syrup-1-can-phosphoric-acid', 'en:natural-carbonated-water', 'en:high-caramel-color', 'en:canned-under-authority-of-the-coca-cola-company-atlanta', 'en:ga-30313', 'en:canner-s-name-and-address-appear-on-each-can', 'en:caffeine-content', 'en:12-fl-oz-02017-the-coca-cola-140-daily-value-0-2-14-g-company-consumer-information-ugars-78-call-1-800-438-2653-coke', 'en:com-l-saturated-fat-tary-fiber-and-potassium-coke-scan-here-for-more-food-information-rchase-floz-cans'], 'en:vegetarian-status-unknown': ['en:pledse-recycle-cans', 'en:cartons-cts-ainer-fructose-corn-syrup-1-can-phosphoric-acid', 'en:natural-carbonated-water', 'en:high-caramel-color', 'en:canned-under-authority-of-the-coca-cola-company-atlanta', 'en:ga-30313', 'en:canner-s-name-and-address-appear-on-each-can', 'en:caffeine-content', 'en:12-fl-oz-02017-the-coca-cola-140-daily-value-0-2-14-g-company-consumer-information-ugars-78-call-1-800-438-2653-coke', 'en:com-l-saturated-fat-tary-fiber-and-potassium-coke-scan-here-for-more-food-information-rchase-floz-cans']}, 'last_edit_dates_tags': ['2024-10-12', '2024-10', '2024'], 'manufacturing_places': '', 'nutrient_levels_tags': ['en:fat-in-low-quantity', 'en:sugars-in-high-quantity', 'en:salt-in-high-quantity'], 'nutriscore_2021_tags': ['e'], 'nutriscore_2023_tags': ['e'], 'packagings_materials': {'all': {}, 'en:metal': {}, 'en:unknown': {}}, 'purchase_places_tags': [], 'amino_acids_prev_tags': [], 'categories_properties': {}, 'ciqual_food_name_tags': ['unknown'], 'image_front_small_url': 'https://images.openfoodfacts.org/images/products/004/900/002/8904/front_en.16.200.jpg', 'image_front_thumb_url': 'https://images.openfoodfacts.org/images/products/004/900/002/8904/front_en.16.100.jpg', 'image_ingredients_url': 'https://images.openfoodfacts.org/images/products/004/900/002/8904/ingredients_en.8.400.jpg', 'ingredients_hierarchy': ['en:pledse-recycle-cans', 'en:cartons-cts-ainer-fructose-corn-syrup-1-can-phosphoric-acid', 'en:natural-carbonated-water', 'en:high-caramel-color', 'en:flavouring', 'en:caffeine', 'en:canned-under-authority-of-the-coca-cola-company-atlanta', 'en:ga-30313', 'en:canner-s-name-and-address-appear-on-each-can', 'en:caffeine-content', 'en:com-l-saturated-fat-tary-fiber-and-potassium-coke-scan-here-for-more-food-information-rchase-floz-cans', 'en:12-fl-oz-02017-the-coca-cola-140-daily-value-0-2-14-g-company-consumer-information-ugars-78-call-1-800-438-2653-coke'], 'ingredients_ids_debug': ['pledse-recycle-cans-cartons-cts-ainer-fructose-corn-syrup-1-can-phosphoric-acid', 'natural-carbonated-water', 'high-caramel-color', 'flavors', 'caffeine', 'canned-under-authority-of-the-coca-cola-company-atlanta', 'ga-30313', 'canner-s-name-and-address-appear-on-each-can', 'caffeine-content', '34-mg', '12-fl-oz-02017-the-coca-cola-140-daily-value-0-2-14-g-company-consumer-information-ugars-78-call-1-800-438-2653-coke-com-l-saturated-fat-tary-fiber-and-potassium-coke-scan-here-for-more-food-information-rchase-floz-cans'], 'last_image_dates_tags': ['2021-12-23', '2021-12', '2021'], 'nucleotides_prev_tags': [], 'nutrition_grades_tags': ['e'], 'nutrition_score_debug': '', 'packaging_shapes_tags': ['en:box', 'en:can'], 'serving_quantity_unit': 'ml', 'unknown_ingredients_n': 10, 'data_quality_bugs_tags': [], 'data_quality_info_tags': ['en:packaging-data-incomplete', 'en:ingredients-percent-analysis-ok', 'en:ecoscore-extended-data-computed', 'en:ecoscore-extended-data-less-precise-than-agribalyse', 'en:food-groups-1-known', 'en:food-groups-2-known', 'en:food-groups-3-unknown'], 'ingredients_text_debug': "pledse recycle cans& cartons cts ainer FRUCTOSE CORN SYRUP 1 Can PHOSPHORIC ACID, NATURAL CARBONATED WATER, HIGH CARAMEL COLOR, FLAVORS, CAFFEINE. CANNED UNDER AUTHORITY OF THE COCA-COLA COMPANY ATLANTA, GA 30313. CANNER'S NAME AND ADDRESS APPEAR ON EACH CAN. CAFFEINE CONTENT: 34 mg/12 fl oz 02017 THE COCA-COLA 140 Daily Value 0% 2% 14% g COMPANY CONSUMER INFORMATION ugars 78%| CALL 1-800-438-2653 coke.com l saturated fat tary fiber and potassium Coke SCAN HERE FoR MORE FOOD INFORMATION RCHASE FLOZ CANS", 'removed_countries_tags': [], 'unknown_nutrients_tags': [], 'additives_original_tags': ['en:e338', 'en:e150c'], 'traces_from_ingredients': '', 'data_quality_errors_tags': [], 'debug_param_sorted_langs': ['en'], 'ingredients_sweeteners_n': 0, 'nutrition_score_beverage': 1, 'packaging_materials_tags': ['en:aluminium'], 'packaging_recycling_tags': [], 'ingredients_analysis_tags': ['en:palm-oil-content-unknown', 'en:vegan-status-unknown', 'en:vegetarian-status-unknown'], 'ingredients_original_tags': ['en:pledse-recycle-cans', 'en:cartons-cts-ainer-fructose-corn-syrup-1-can-phosphoric-acid', 'en:natural-carbonated-water', 'en:high-caramel-color', 'en:flavouring', 'en:caffeine', 'en:canned-under-authority-of-the-coca-cola-company-atlanta', 'en:ga-30313', 'en:canner-s-name-and-address-appear-on-each-can', 'en:caffeine-content', 'en:com-l-saturated-fat-tary-fiber-and-potassium-coke-scan-here-for-more-food-information-rchase-floz-cans', 'en:12-fl-oz-02017-the-coca-cola-140-daily-value-0-2-14-g-company-consumer-information-ugars-78-call-1-800-438-2653-coke'], 'interface_version_created': '20120622', 'manufacturing_places_tags': [], 'nutriscore_score_opposite': -32, 'allergens_from_ingredients': '', 'categories_properties_tags': ['all-products', 'categories-known', 'agribalyse-food-code-unknown', 'agribalyse-proxy-food-code-unknown', 'ciqual-food-code-unknown', 'agribalyse-unknown'], 'data_quality_warnings_tags': ['en:ingredients-unknown-score-above-5', 'en:ingredients-80-percent-unknown', 'en:ingredients-ingredient-tag-length-greater-than-50', 'en:ingredients-ingredient-tag-length-greater-than-100', 'en:nutrition-value-very-high-for-category-salt', 'en:product-quantity-under-1g', 'en:serving-quantity-over-product-quantity', 'en:ecoscore-origins-of-ingredients-origins-are-100-percent-unknown', 'en:ecoscore-packaging-unspecified-material', 'en:ecoscore-production-system-no-label'], 'interface_version_modified': '20150316.jqm2', 'image_ingredients_small_url': 'https://images.openfoodfacts.org/images/products/004/900/002/8904/ingredients_en.8.200.jpg', 'image_ingredients_thumb_url': 'https://images.openfoodfacts.org/images/products/004/900/002/8904/ingredients_en.8.100.jpg', 'ingredients_from_palm_oil_n': 0, 'nutrition_data_prepared_per': '100g', 'ingredients_percent_analysis': 1, 'ingredients_from_palm_oil_tags': [], 'ingredients_text_with_allergens': "pledse recycle cans, cartons cts ainer fructose corn syrup 1 can phosphoric acid, natural carbonated water, high caramel color, flavors, caffeine, canned under authority of the coca-cola company atlanta, ga 30313, canner's name and address appear on each can, caffeine content: 34 mg/12 fl oz 02017 the coca-cola 140 daily value 0% 2% 14% g company consumer information ugars 78%| call 1-800-438-2653 coke,com l saturated fat tary fiber and potassium coke scan here for more food information rchase floz cans", 'ingredients_without_ciqual_codes': ['en:12-fl-oz-02017-the-coca-cola-140-daily-value-0-2-14-g-company-consumer-information-ugars-78-call-1-800-438-2653-coke', 'en:caffeine', 'en:caffeine-content', 'en:canned-under-authority-of-the-coca-cola-company-atlanta', 'en:canner-s-name-and-address-appear-on-each-can', 'en:cartons-cts-ainer-fructose-corn-syrup-1-can-phosphoric-acid', 'en:com-l-saturated-fat-tary-fiber-and-potassium-coke-scan-here-for-more-food-information-rchase-floz-cans', 'en:flavouring', 'en:ga-30313', 'en:high-caramel-color', 'en:natural-carbonated-water', 'en:pledse-recycle-cans'], 'nutrition_score_warning_no_fiber': 1, 'ingredients_without_ecobalyse_ids': ['en:12-fl-oz-02017-the-coca-cola-140-daily-value-0-2-14-g-company-consumer-information-ugars-78-call-1-800-438-2653-coke', 'en:caffeine', 'en:caffeine-content', 'en:canned-under-authority-of-the-coca-cola-company-atlanta', 'en:canner-s-name-and-address-appear-on-each-can', 'en:cartons-cts-ainer-fructose-corn-syrup-1-can-phosphoric-acid', 'en:com-l-saturated-fat-tary-fiber-and-potassium-coke-scan-here-for-more-food-information-rchase-floz-cans', 'en:flavouring', 'en:ga-30313', 'en:high-caramel-color', 'en:natural-carbonated-water', 'en:pledse-recycle-cans'], 'other_nutritional_substances_tags': [], 'ingredients_text_with_allergens_en': "pledse recycle cans, cartons cts ainer fructose corn syrup 1 can phosphoric acid, natural carbonated water, high caramel color, flavors, caffeine, canned under authority of the coca-cola company atlanta, ga 30313, canner's name and address appear on each can, caffeine content: 34 mg/12 fl oz 02017 the coca-cola 140 daily value 0% 2% 14% g company consumer information ugars 78%| call 1-800-438-2653 coke,com l saturated fat tary fiber and potassium coke scan here for more food information rchase floz cans", 'ingredients_without_ciqual_codes_n': 12, 'ingredients_without_ecobalyse_ids_n': 12, 'ingredients_with_specified_percent_n': 0, 'ingredients_non_nutritive_sweeteners_n': 0, 'ingredients_with_specified_percent_sum': 0, 'ingredients_with_unspecified_percent_n': 11, 'ingredients_that_may_be_from_palm_oil_n': 0, 'ingredients_with_unspecified_percent_sum': 100, 'ingredients_that_may_be_from_palm_oil_tags': [], 'ingredients_from_or_that_may_be_from_palm_oil_n': 0, 'nutrition_score_warning_fruits_vegetables_nuts_estimate_from_ingredients': 1, 'nutrition_score_warning_fruits_vegetables_legumes_estimate_from_ingredients': 1, 'nutrition_score_warning_fruits_vegetables_nuts_estimate_from_ingredients_value': 0, 'nutrition_score_warning_fruits_vegetables_legumes_estimate_from_ingredients_value': 0}}}},
                                         sql='UPDATE main_receipt_items SET name = %s, qty = %s, uom = %s, data = %s WHERE id=%s RETURNING *;')
2025-04-12 14:48:31.330764 --- ERROR --- DatabaseError(message='invalid input syntax for type integer: " Pinch"LINE 1: ...pt_items SET name = 'Coca-Cola', qty = '1', uom = ' Pinch', ...                                                             ^',
                                         payload={'id': 66, 'update': {'name': 'Coca-Cola', 'qty': '1', 'uom': ' Pinch', 'data': {'cost': '7.92', 'expires': False, 'api_data': {'id': '0049000028904', 'lc': 'en', '_id': '0049000028904', 'rev': 20, 'code': '0049000028904', 'lang': 'en', 'link': '', 'teams': 'swipe-studio', 'brands': 'Coca-Cola', 'images': {'1': {'sizes': {'100': {'h': 60, 'w': 100}, '400': {'h': 239, 'w': 400}, 'full': {'h': 957, 'w': 1600}}, 'uploader': 'openfoodfacts-contributors', 'uploaded_t': '1478385267'}, '2': {'sizes': {'100': {'h': 100, 'w': 75}, '400': {'h': 400, 'w': 300}, 'full': {'h': 3328, 'w': 2496}}, 'uploader': 'tanyad1013', 'uploaded_t': 1555187983}, '3': {'sizes': {'100': {'h': 100, 'w': 75}, '400': {'h': 400, 'w': 300}, 'full': {'h': 3328, 'w': 2496}}, 'uploader': 'tanyad1013', 'uploaded_t': 1555188029}, '5': {'sizes': {'100': {'h': 100, 'w': 100}, '400': {'h': 400, 'w': 400}, 'full': {'h': 1400, 'w': 1400}}, 'uploader': 'thaialagata', 'uploaded_t': 1640260897}, 'front_en': {'x1': '0', 'x2': '0', 'y1': '0', 'y2': '0', 'rev': '16', 'angle': '0', 'imgid': '5', 'sizes': {'100': {'h': 78, 'w': 100}, '200': {'h': 156, 'w': 200}, '400': {'h': 311, 'w': 400}, 'full': {'h': 1080, 'w': 1389}}, 'geometry': '0x0-0-0', 'normalize': 'false', 'white_magic': 'false', 'coordinates_image_size': 'full'}, 'ingredients_en': {'x1': None, 'x2': None, 'y1': None, 'y2': None, 'rev': '8', 'angle': None, 'imgid': '3', 'sizes': {'100': {'h': 100, 'w': 75}, '200': {'h': 200, 'w': 150}, '400': {'h': 400, 'w': 300}, 'full': {'h': 3328, 'w': 2496}}, 'geometry': '0x0-0-0', 'normalize': None, 'white_magic': None}}, 'labels': '', 'origin': '', 'states': 'en:to-be-completed, en:nutrition-facts-completed, en:ingredients-completed, en:expiration-date-to-be-completed, en:packaging-code-to-be-completed, en:characteristics-to-be-completed, en:origins-to-be-completed, en:categories-completed, en:brands-completed, en:packaging-completed, en:quantity-completed, en:product-name-completed, en:photos-to-be-validated, en:packaging-photo-to-be-selected, en:nutrition-photo-to-be-selected, en:ingredients-photo-selected, en:front-photo-selected, en:photos-uploaded', 'stores': '', 'traces': '', 'creator': 'openfoodfacts-contributors', 'origins': '', 'scans_n': 18, 'sortkey': 1609090427, 'complete': 0, 'quantity': '12 cans', '_keywords': ['beverage', 'carbonated', 'coca-cola', 'drink'], 'allergens': '', 'countries': 'United States', 'created_t': 1478385267, 'emb_codes': '', 'image_url': 'https://images.openfoodfacts.org/images/products/004/900/002/8904/front_en.16.400.jpg', 'labels_lc': 'en', 'languages': {'en:english': 4}, 'max_imgid': '5', 'misc_tags': ['en:ecoscore-extended-data-computed', 'en:ecoscore-extended-data-version-4', 'en:ecoscore-not-computed', 'en:nutriscore-2021-e-2023-e', 'en:nutriscore-2021-same-as-2023', 'en:nutriscore-computed', 'en:nutrition-fruits-vegetables-legumes-estimate-from-ingredients', 'en:nutrition-fruits-vegetables-nuts-estimate-from-ingredients', 'en:nutrition-no-fiber', 'en:nutrition-no-fiber-or-fruits-vegetables-nuts', 'en:packagings-not-complete', 'en:packagings-not-empty', 'en:packagings-not-empty-but-not-complete', 'en:packagings-number-of-components-2'], 'origin_en': '', 'packaging': 'Aluminium-can, Card-box', 'traces_lc': 'en', 'categories': 'Beverages, Carbonated drinks', 'codes_tags': ['code-13', 'conflict-with-upc-12', '0049000028xxx', '004900002xxxx', '00490000xxxxx', '0049000xxxxxx', '004900xxxxxxx', '00490xxxxxxxx', '0049xxxxxxxxx', '004xxxxxxxxxx', '00xxxxxxxxxxx', '0xxxxxxxxxxxx'], 'labels_old': '', 'nova_group': 4, 'nutriments': {'fat': 0, 'salt': 112.5, 'energy': 586, 'sodium': 45, 'sugars': 39, 'fat_100g': 0, 'fat_unit': 'g', 'proteins': 0, 'fat_value': 0, 'salt_100g': 31.7, 'salt_unit': 'g', 'nova-group': 4, 'salt_value': 112.5, 'energy-kcal': 140, 'energy_100g': 165, 'energy_unit': 'kcal', 'fat_serving': 0, 'sodium_100g': 12.7, 'sodium_unit': 'g', 'sugars_100g': 11, 'sugars_unit': 'g', 'energy_value': 140, 'salt_serving': 112.5, 'sodium_value': 45, 'sugars_value': 39, 'carbohydrates': 39, 'proteins_100g': 0, 'proteins_unit': 'g', 'energy_serving': 586, 'proteins_value': 0, 'sodium_serving': 45, 'sugars_serving': 39, 'nova-group_100g': 4, 'energy-kcal_100g': 39.4, 'energy-kcal_unit': 'kcal', 'proteins_serving': 0, 'energy-kcal_value': 140, 'carbohydrates_100g': 11, 'carbohydrates_unit': 'g', 'nova-group_serving': 4, 'nutrition-score-fr': 32, 'carbohydrates_value': 39, 'energy-kcal_serving': 140, 'carbohydrates_serving': 39, 'nutrition-score-fr_100g': 32, 'energy-kcal_value_computed': 156, 'fruits-vegetables-nuts-estimate-from-ingredients_100g': 0, 'fruits-vegetables-legumes-estimate-from-ingredients_100g': 0, 'fruits-vegetables-nuts-estimate-from-ingredients_serving': 0, 'fruits-vegetables-legumes-estimate-from-ingredients_serving': 0}, 'nutriscore': {'2021': {'data': {'fiber': 0, 'energy': 165, 'is_fat': 0, 'sodium': 12700, 'sugars': 11, 'is_water': 0, 'proteins': 0, 'is_cheese': 0, 'fiber_value': 0, 'is_beverage': 1, 'energy_value': 165, 'fiber_points': 0, 'sodium_value': 12700, 'sugars_value': 11, 'energy_points': 6, 'saturated_fat': 0, 'sodium_points': 10, 'sugars_points': 8, 'proteins_value': 0, 'negative_points': 24, 'positive_points': 0, 'proteins_points': 0, 'saturated_fat_ratio': 0, 'saturated_fat_value': 0, 'saturated_fat_points': 0, 'fruits_vegetables_nuts_colza_walnut_olive_oils': 0, 'fruits_vegetables_nuts_colza_walnut_olive_oils_value': 0, 'fruits_vegetables_nuts_colza_walnut_olive_oils_points': 0}, 'grade': 'e', 'score': 24, 'category_available': 1, 'nutrients_available': 1, 'nutriscore_computed': 1, 'nutriscore_applicable': 1}, '2023': {'data': {'is_water': 0, 'is_cheese': 0, 'components': {'negative': [{'id': 'energy', 'unit': 'kJ', 'value': 165, 'points': 3, 'points_max': 10}, {'id': 'sugars', 'unit': 'g', 'value': 11, 'points': 9, 'points_max': 10}, {'id': 'saturated_fat', 'unit': 'g', 'value': 0, 'points': 0, 'points_max': 10}, {'id': 'salt', 'unit': 'g', 'value': 31.7, 'points': 20, 'points_max': 20}, {'id': 'non_nutritive_sweeteners', 'unit': 'number', 'value': 0, 'points': 0, 'points_max': 4}], 'positive': [{'id': 'proteins', 'unit': 'g', 'value': 0, 'points': 0, 'points_max': 7}, {'id': 'fiber', 'unit': 'g', 'value': None, 'points': 0, 'points_max': 5}, {'id': 'fruits_vegetables_legumes', 'unit': '%', 'value': 0, 'points': 0, 'points_max': 6}]}, 'is_beverage': 1, 'count_proteins': 1, 'negative_points': 32, 'positive_points': 0, 'positive_nutrients': ['proteins', 'fiber', 'fruits_vegetables_legumes'], 'is_red_meat_product': 0, 'negative_points_max': 54, 'positive_points_max': 18, 'count_proteins_reason': 'beverage', 'is_fat_oil_nuts_seeds': 0}, 'grade': 'e', 'score': 32, 'category_available': 1, 'nutrients_available': 1, 'nutriscore_computed': 1, 'nutriscore_applicable': 1}}, 'origins_lc': 'en', 'packagings': [{'shape': 'en:can', 'material': 'en:aluminium'}, {'shape': 'en:box'}], 'teams_tags': ['swipe-studio'], 'update_key': 'sort', 'additives_n': 2, 'brands_tags': ['coca-cola'], 'cities_tags': [], 'food_groups': 'en:unsweetened-beverages', 'ingredients': [{'id': 'en:pledse-recycle-cans', 'text': 'pledse recycle cans', 'percent_max': 100, 'percent_min': 9.09090909090909, 'is_in_taxonomy': 0, 'percent_estimate': 54.5454545454545}, {'id': 'en:cartons-cts-ainer-fructose-corn-syrup-1-can-phosphoric-acid', 'text': 'cartons cts ainer fructose corn syrup 1 can phosphoric acid', 'percent_max': 50, 'percent_min': 0, 'is_in_taxonomy': 0, 'percent_estimate': 22.7272727272727}, {'id': 'en:natural-carbonated-water', 'text': 'natural carbonated water', 'percent_max': 33.3333333333333, 'percent_min': 0, 'is_in_taxonomy': 0, 'percent_estimate': 11.3636363636364}, {'id': 'en:high-caramel-color', 'text': 'high caramel color', 'percent_max': 25, 'percent_min': 0, 'is_in_taxonomy': 0, 'percent_estimate': 5.68181818181818}, {'id': 'en:flavouring', 'text': 'flavors', 'vegan': 'maybe', 'vegetarian': 'maybe', 'percent_max': '5', 'percent_min': 0, 'is_in_taxonomy': 1, 'percent_estimate': 2.5}, {'id': 'en:caffeine', 'text': 'caffeine', 'vegan': 'yes', 'vegetarian': 'yes', 'percent_max': '5', 'percent_min': 0, 'is_in_taxonomy': 1, 'percent_estimate': 1.59090909090909}, {'id': 'en:canned-under-authority-of-the-coca-cola-company-atlanta', 'text': 'canned under authority of the coca-cola company atlanta', 'percent_max': '5', 'percent_min': 0, 'is_in_taxonomy': 0, 'percent_estimate': 0.795454545454547}, {'id': 'en:ga-30313', 'text': 'ga 30313', 'percent_max': '5', 'percent_min': 0, 'is_in_taxonomy': 0, 'percent_estimate': 0.397727272727273}, {'id': 'en:canner-s-name-and-address-appear-on-each-can', 'text': "canner's name and address appear on each can", 'percent_max': '5', 'percent_min': 0, 'is_in_taxonomy': 0, 'percent_estimate': 0.19886363636364}, {'id': 'en:caffeine-content', 'text': 'caffeine content', 'quantity': '34 mg', 'quantity_g': 0.034, 'ingredients': [{'id': 'en:12-fl-oz-02017-the-coca-cola-140-daily-value-0-2-14-g-company-consumer-information-ugars-78-call-1-800-438-2653-coke', 'text': '12 fl oz 02017 the coca-cola 140 daily value 0% 2% 14% g company consumer information ugars 78%| call 1-800-438-2653 coke', 'percent_max': '5', 'percent_min': 0, 'is_in_taxonomy': 0, 'percent_estimate': 0.0994318181818201}], 'percent_max': '5', 'percent_min': 0, 'is_in_taxonomy': 0, 'percent_estimate': 0.0994318181818201}, {'id': 'en:com-l-saturated-fat-tary-fiber-and-potassium-coke-scan-here-for-more-food-information-rchase-floz-cans', 'text': 'com l saturated fat tary fiber and potassium coke scan here for more food information rchase floz cans', 'percent_max': '5', 'percent_min': 0, 'is_in_taxonomy': 0, 'percent_estimate': 0.099431818181813}], 'labels_tags': [], 'nova_groups': '4', 'origins_old': '', 'states_tags': ['en:to-be-completed', 'en:nutrition-facts-completed', 'en:ingredients-completed', 'en:expiration-date-to-be-completed', 'en:packaging-code-to-be-completed', 'en:characteristics-to-be-completed', 'en:origins-to-be-completed', 'en:categories-completed', 'en:brands-completed', 'en:packaging-completed', 'en:quantity-completed', 'en:product-name-completed', 'en:photos-to-be-validated', 'en:packaging-photo-to-be-selected', 'en:nutrition-photo-to-be-selected', 'en:ingredients-photo-selected', 'en:front-photo-selected', 'en:photos-uploaded'], 'stores_tags': [], 'traces_tags': [], 'allergens_lc': 'en', 'completeness': 0.775, 'countries_lc': 'en', 'data_sources': 'App - Horizon, App - InFood, Apps', 'editors_tags': ['ecoscore-impact-estimator', 'foodless', 'inf', 'openfoodfacts-contributors', 'swipe-studio', 'tanyad1013', 'teolemon', 'thaialagata'], 'generic_name': '', 'last_image_t': 1640260897, 'origins_tags': [], 'packaging_lc': 'en', 'packagings_n': 2, 'product_name': 'Coca-Cola', 'product_type': 'food', 'serving_size': '355ml', 'categories_lc': 'en', 'checkers_tags': [], 'ecoscore_data': {'scores': {}, 'status': 'unknown', 'missing': {'labels': 1, 'origins': 1, 'packagings': 1, 'agb_category': 1}, 'agribalyse': {'warning': 'missing_agribalyse_match'}, 'adjustments': {'packaging': {'score': -28, 'value': -13, 'warning': 'unspecified_material', 'packagings': [{'shape': 'en:can', 'material': 'en:heavy-aluminium', 'ecoscore_shape_ratio': 1, 'ecoscore_material_score': 72}, {'shape': 'en:box', 'material': 'en:unknown', 'ecoscore_shape_ratio': 1, 'ecoscore_material_score': 0}], 'non_recyclable_and_non_biodegradable_materials': 0}, 'production_system': {'value': 0, 'labels': [], 'warning': 'no_label'}, 'threatened_species': {}, 'origins_of_ingredients': {'value': -5, 'values': {'ad': -5, 'al': -5, 'at': -5, 'ax': -5, 'ba': -5, 'be': -5, 'bg': -5, 'ch': -5, 'cy': -5, 'cz': -5, 'de': -5, 'dk': -5, 'dz': -5, 'ee': -5, 'eg': -5, 'es': -5, 'fi': -5, 'fo': -5, 'fr': -5, 'gg': -5, 'gi': -5, 'gr': -5, 'hr': -5, 'hu': -5, 'ie': -5, 'il': -5, 'im': -5, 'is': -5, 'it': -5, 'je': -5, 'lb': -5, 'li': -5, 'lt': -5, 'lu': -5, 'lv': -5, 'ly': -5, 'ma': -5, 'mc': -5, 'md': -5, 'me': -5, 'mk': -5, 'mt': -5, 'nl': -5, 'no': -5, 'pl': -5, 'ps': -5, 'pt': -5, 'ro': -5, 'rs': -5, 'se': -5, 'si': -5, 'sj': -5, 'sk': -5, 'sm': -5, 'sy': -5, 'tn': -5, 'tr': -5, 'ua': -5, 'uk': -5, 'us': -5, 'va': -5, 'xk': -5, 'world': -5}, 'warning': 'origins_are_100_percent_unknown', 'epi_score': 0, 'epi_value': -5, 'aggregated_origins': [{'origin': 'en:unknown', 'percent': 100, 'epi_score': '0', 'transportation_score': 0}], 'transportation_score': 0, 'transportation_value': 0, 'transportation_scores': {'ad': 0, 'al': 0, 'at': 0, 'ax': 0, 'ba': 0, 'be': 0, 'bg': 0, 'ch': 0, 'cy': 0, 'cz': 0, 'de': 0, 'dk': 0, 'dz': 0, 'ee': 0, 'eg': 0, 'es': 0, 'fi': 0, 'fo': 0, 'fr': 0, 'gg': 0, 'gi': 0, 'gr': 0, 'hr': 0, 'hu': 0, 'ie': 0, 'il': 0, 'im': 0, 'is': 0, 'it': 0, 'je': 0, 'lb': 0, 'li': 0, 'lt': 0, 'lu': 0, 'lv': 0, 'ly': 0, 'ma': 0, 'mc': 0, 'md': 0, 'me': 0, 'mk': 0, 'mt': 0, 'nl': 0, 'no': 0, 'pl': 0, 'ps': 0, 'pt': 0, 'ro': 0, 'rs': 0, 'se': 0, 'si': 0, 'sj': 0, 'sk': 0, 'sm': 0, 'sy': 0, 'tn': 0, 'tr': 0, 'ua': 0, 'uk': 0, 'us': 0, 'va': 0, 'xk': 0, 'world': 0}, 'transportation_values': {'ad': 0, 'al': 0, 'at': 0, 'ax': 0, 'ba': 0, 'be': 0, 'bg': 0, 'ch': 0, 'cy': 0, 'cz': 0, 'de': 0, 'dk': 0, 'dz': 0, 'ee': 0, 'eg': 0, 'es': 0, 'fi': 0, 'fo': 0, 'fr': 0, 'gg': 0, 'gi': 0, 'gr': 0, 'hr': 0, 'hu': 0, 'ie': 0, 'il': 0, 'im': 0, 'is': 0, 'it': 0, 'je': 0, 'lb': 0, 'li': 0, 'lt': 0, 'lu': 0, 'lv': 0, 'ly': 0, 'ma': 0, 'mc': 0, 'md': 0, 'me': 0, 'mk': 0, 'mt': 0, 'nl': 0, 'no': 0, 'pl': 0, 'ps': 0, 'pt': 0, 'ro': 0, 'rs': 0, 'se': 0, 'si': 0, 'sj': 0, 'sk': 0, 'sm': 0, 'sy': 0, 'tn': 0, 'tr': 0, 'ua': 0, 'uk': 0, 'us': 0, 'va': 0, 'xk': 0, 'world': 0}, 'origins_from_categories': ['en:unknown'], 'origins_from_origins_field': ['en:unknown']}}, 'missing_agribalyse_match_warning': 1}, 'ecoscore_tags': ['unknown'], 'ingredients_n': 12, 'minerals_tags': [], 'packaging_old': 'en:card-box,en:aluminium-can', 'pnns_groups_1': 'Beverages', 'pnns_groups_2': 'Unsweetened beverages', 'vitamins_tags': [], 'weighers_tags': [], 'additives_tags': ['en:e150c', 'en:e338'], 'allergens_tags': [], 'categories_old': 'Beverages, Carbonated drinks', 'countries_tags': ['en:united-states'], 'ecoscore_grade': 'unknown', 'emb_codes_tags': [], 'informers_tags': ['openfoodfacts-contributors', 'tanyad1013', 'teolemon', 'swipe-studio', 'ecoscore-impact-estimator'], 'ingredients_lc': 'en', 'languages_tags': ['en:english', 'en:1'], 'last_updated_t': 1738753791, 'nutrition_data': 'on', 'packaging_tags': ['en:aluminium-can', 'en:card-box'], 'packaging_text': '', 'popularity_key': 23900000011, 'schema_version': 998, 'unique_scans_n': 11, 'categories_tags': ['en:beverages', 'en:carbonated-drinks'], 'correctors_tags': ['openfoodfacts-contributors', 'tanyad1013', 'teolemon', 'inf', 'swipe-studio', 'thaialagata', 'ecoscore-impact-estimator'], 'expiration_date': '', 'generic_name_en': '', 'image_front_url': 'https://images.openfoodfacts.org/images/products/004/900/002/8904/front_en.16.400.jpg', 'image_small_url': 'https://images.openfoodfacts.org/images/products/004/900/002/8904/front_en.16.200.jpg', 'image_thumb_url': 'https://images.openfoodfacts.org/images/products/004/900/002/8904/front_en.16.100.jpg', 'languages_codes': {'en': 4}, 'last_modified_t': 1728751740, 'nutrient_levels': {'fat': 'low', 'salt': 'high', 'sugars': 'high'}, 'nutriscore_data': {'grade': 'e', 'score': 32, 'is_water': 0, 'is_cheese': 0, 'components': {'negative': [{'id': 'energy', 'unit': 'kJ', 'value': 165, 'points': 3, 'points_max': 10}, {'id': 'sugars', 'unit': 'g', 'value': 11, 'points': 9, 'points_max': 10}, {'id': 'saturated_fat', 'unit': 'g', 'value': 0, 'points': 0, 'points_max': 10}, {'id': 'salt', 'unit': 'g', 'value': 31.7, 'points': 20, 'points_max': 20}, {'id': 'non_nutritive_sweeteners', 'unit': 'number', 'value': 0, 'points': 0, 'points_max': 4}], 'positive': [{'id': 'proteins', 'unit': 'g', 'value': 0, 'points': 0, 'points_max': 7}, {'id': 'fiber', 'unit': 'g', 'value': None, 'points': 0, 'points_max': 5}, {'id': 'fruits_vegetables_legumes', 'unit': '%', 'value': 0, 'points': 0, 'points_max': 6}]}, 'is_beverage': 1, 'count_proteins': 1, 'negative_points': 32, 'positive_points': 0, 'positive_nutrients': ['proteins', 'fiber', 'fruits_vegetables_legumes'], 'is_red_meat_product': 0, 'negative_points_max': 54, 'positive_points_max': 18, 'count_proteins_reason': 'beverage', 'is_fat_oil_nuts_seeds': 0}, 'nutriscore_tags': ['e'], 'popularity_tags': ['top-country-fr-scans-2019', 'bottom-25-percent-scans-2020', 'bottom-20-percent-scans-2020', 'top-85-percent-scans-2020', 'top-90-percent-scans-2020', 'top-5000-us-scans-2020', 'top-10000-us-scans-2020', 'top-50000-us-scans-2020', 'top-100000-us-scans-2020', 'top-country-us-scans-2020', 'top-75-percent-scans-2021', 'top-80-percent-scans-2021', 'top-85-percent-scans-2021', 'top-90-percent-scans-2021', 'top-5000-ua-scans-2021', 'top-10000-ua-scans-2021', 'top-50000-ua-scans-2021', 'top-100000-ua-scans-2021', 'top-country-ua-scans-2021', 'top-50000-us-scans-2021', 'top-100000-us-scans-2021', 'top-75-percent-scans-2022', 'top-80-percent-scans-2022', 'top-85-percent-scans-2022', 'top-90-percent-scans-2022', 'top-1000-us-scans-2022', 'top-5000-us-scans-2022', 'top-10000-us-scans-2022', 'top-50000-us-scans-2022', 'top-100000-us-scans-2022', 'top-country-us-scans-2022', 'top-75-percent-scans-2023', 'top-80-percent-scans-2023', 'top-85-percent-scans-2023', 'top-90-percent-scans-2023', 'top-5000-mx-scans-2023', 'top-10000-mx-scans-2023', 'top-50000-mx-scans-2023', 'top-100000-mx-scans-2023', 'top-country-mx-scans-2023', 'top-100000-scans-2024', 'at-least-5-scans-2024', 'at-least-10-scans-2024', 'top-75-percent-scans-2024', 'top-80-percent-scans-2024', 'top-85-percent-scans-2024', 'top-90-percent-scans-2024', 'top-10000-us-scans-2024', 'top-50000-us-scans-2024', 'top-100000-us-scans-2024', 'top-country-us-scans-2024', 'top-100000-fr-scans-2024', 'top-50000-it-scans-2024', 'top-100000-it-scans-2024', 'top-10000-in-scans-2024', 'top-50000-in-scans-2024', 'top-100000-in-scans-2024', 'top-5000-lv-scans-2024', 'top-10000-lv-scans-2024', 'top-50000-lv-scans-2024', 'top-100000-lv-scans-2024', 'top-5000-sg-scans-2024', 'top-10000-sg-scans-2024', 'top-50000-sg-scans-2024', 'top-100000-sg-scans-2024', 'top-50000-nl-scans-2024', 'top-100000-nl-scans-2024', 'top-50000-es-scans-2024', 'top-100000-es-scans-2024'], 'product_name_en': 'Coca-Cola', 'purchase_places': '', 'selected_images': {'front': {'small': {'en': 'https://images.openfoodfacts.org/images/products/004/900/002/8904/front_en.16.200.jpg'}, 'thumb': {'en': 'https://images.openfoodfacts.org/images/products/004/900/002/8904/front_en.16.100.jpg'}, 'display': {'en': 'https://images.openfoodfacts.org/images/products/004/900/002/8904/front_en.16.400.jpg'}}, 'ingredients': {'small': {'en': 'https://images.openfoodfacts.org/images/products/004/900/002/8904/ingredients_en.8.200.jpg'}, 'thumb': {'en': 'https://images.openfoodfacts.org/images/products/004/900/002/8904/ingredients_en.8.100.jpg'}, 'display': {'en': 'https://images.openfoodfacts.org/images/products/004/900/002/8904/ingredients_en.8.400.jpg'}}}, 'amino_acids_tags': [], 'entry_dates_tags': ['2016-11-05', '2016-11', '2016'], 'food_groups_tags': ['en:beverages', 'en:unsweetened-beverages'], 'ingredients_tags': ['en:pledse-recycle-cans', 'en:cartons-cts-ainer-fructose-corn-syrup-1-can-phosphoric-acid', 'en:natural-carbonated-water', 'en:high-caramel-color', 'en:flavouring', 'en:caffeine', 'en:canned-under-authority-of-the-coca-cola-company-atlanta', 'en:ga-30313', 'en:canner-s-name-and-address-appear-on-each-can', 'en:caffeine-content', 'en:com-l-saturated-fat-tary-fiber-and-potassium-coke-scan-here-for-more-food-information-rchase-floz-cans', 'en:12-fl-oz-02017-the-coca-cola-140-daily-value-0-2-14-g-company-consumer-information-ugars-78-call-1-800-438-2653-coke'], 'ingredients_text': "pledse recycle cans, cartons cts ainer fructose corn syrup 1 can phosphoric acid, natural carbonated water, high caramel color, flavors, caffeine, canned under authority of the coca-cola company atlanta, ga 30313, canner's name and address appear on each can, caffeine content: 34 mg/12 fl oz 02017 the coca-cola 140 daily value 0% 2% 14% g company consumer information ugars 78%| call 1-800-438-2653 coke,com l saturated fat tary fiber and potassium coke scan here for more food information rchase floz cans", 'labels_hierarchy': [], 'nova_group_debug': '', 'nova_groups_tags': ['en:4-ultra-processed-food-and-drink-products'], 'nucleotides_tags': [], 'nutriscore_grade': 'e', 'nutriscore_score': 32, 'nutrition_grades': 'e', 'product_quantity': '0', 'serving_quantity': '355', 'states_hierarchy': ['en:to-be-completed', 'en:nutrition-facts-completed', 'en:ingredients-completed', 'en:expiration-date-to-be-completed', 'en:packaging-code-to-be-completed', 'en:characteristics-to-be-completed', 'en:origins-to-be-completed', 'en:categories-completed', 'en:brands-completed', 'en:packaging-completed', 'en:quantity-completed', 'en:product-name-completed', 'en:photos-to-be-validated', 'en:packaging-photo-to-be-selected', 'en:nutrition-photo-to-be-selected', 'en:ingredients-photo-selected', 'en:front-photo-selected', 'en:photos-uploaded'], 'traces_from_user': '(en) ', 'traces_hierarchy': [], 'data_quality_tags': ['en:packaging-data-incomplete', 'en:ingredients-percent-analysis-ok', 'en:ecoscore-extended-data-computed', 'en:ecoscore-extended-data-less-precise-than-agribalyse', 'en:food-groups-1-known', 'en:food-groups-2-known', 'en:food-groups-3-unknown', 'en:ingredients-unknown-score-above-5', 'en:ingredients-80-percent-unknown', 'en:ingredients-ingredient-tag-length-greater-than-50', 'en:ingredients-ingredient-tag-length-greater-than-100', 'en:nutrition-value-very-high-for-category-salt', 'en:product-quantity-under-1g', 'en:serving-quantity-over-product-quantity', 'en:ecoscore-origins-of-ingredients-origins-are-100-percent-unknown', 'en:ecoscore-packaging-unspecified-material', 'en:ecoscore-production-system-no-label'], 'data_sources_tags': ['app-horizon', 'app-infood', 'apps'], 'ingredients_debug': ['pledse recycle cans& cartons cts ainer FRUCTOSE CORN SYRUP 1 Can PHOSPHORIC ACID', ',', None, None, None, ' NATURAL CARBONATED WATER', ',', None, None, None, ' HIGH CARAMEL COLOR', ',', None, None, None, ' FLAVORS', ',', None, None, None, ' CAFFEINE', '. ', None, None, None, 'CANNED UNDER AUTHORITY OF THE COCA-COLA COMPANY ATLANTA', ',', None, None, None, ' GA 30313', '. ', None, None, None, "CANNER'S NAME AND ADDRESS APPEAR ON EACH CAN", '. ', None, None, None, 'CAFFEINE CONTENT', ':', ':', None, None, ' 34 mg', '/', None, None, '/', '12 fl oz 02017 THE COCA-COLA 140 Daily Value 0% 2% 14% g COMPANY CONSUMER INFORMATION ugars 78%| CALL 1-800-438-2653 coke.com l saturated fat tary fiber and potassium Coke SCAN HERE FoR MORE FOOD INFORMATION RCHASE FLOZ CANS'], 'origins_hierarchy': [], 'packaging_text_en': '', 'ingredients_n_tags': ['12', '11-20'], 'minerals_prev_tags': [], 'nutriscore_version': '2023', 'nutrition_data_per': 'serving', 'nutrition_grade_fr': 'e', 'photographers_tags': ['openfoodfacts-contributors', 'tanyad1013', 'thaialagata'], 'pnns_groups_1_tags': ['beverages', 'known'], 'pnns_groups_2_tags': ['unsweetened-beverages', 'known'], 'vitamins_prev_tags': [], 'allergens_from_user': '(en) ', 'allergens_hierarchy': [], 'category_properties': {}, 'countries_hierarchy': ['en:united-states'], 'ingredients_text_en': "pledse recycle cans, cartons cts ainer fructose corn syrup 1 can phosphoric acid, natural carbonated water, high caramel color, flavors, caffeine, canned under authority of the coca-cola company atlanta, ga 30313, canner's name and address appear on each can, caffeine content: 34 mg/12 fl oz 02017 the coca-cola 140 daily value 0% 2% 14% g company consumer information ugars 78%| call 1-800-438-2653 coke,com l saturated fat tary fiber and potassium coke scan here for more food information rchase floz cans", 'known_ingredients_n': 2, 'languages_hierarchy': ['en:english'], 'main_countries_tags': [], 'nova_groups_markers': {'4': [['additives', 'en:e150c'], ['ingredients', 'en:flavouring']]}, 'packaging_hierarchy': ['en:Aluminium-can', 'en:Card-box'], 'added_countries_tags': [], 'categories_hierarchy': ['en:beverages', 'en:carbonated-drinks'], 'compared_to_category': 'en:carbonated-drinks', 'ingredients_analysis': {'en:vegan-status-unknown': ['en:pledse-recycle-cans', 'en:cartons-cts-ainer-fructose-corn-syrup-1-can-phosphoric-acid', 'en:natural-carbonated-water', 'en:high-caramel-color', 'en:canned-under-authority-of-the-coca-cola-company-atlanta', 'en:ga-30313', 'en:canner-s-name-and-address-appear-on-each-can', 'en:caffeine-content', 'en:12-fl-oz-02017-the-coca-cola-140-daily-value-0-2-14-g-company-consumer-information-ugars-78-call-1-800-438-2653-coke', 'en:com-l-saturated-fat-tary-fiber-and-potassium-coke-scan-here-for-more-food-information-rchase-floz-cans'], 'en:palm-oil-content-unknown': ['en:pledse-recycle-cans', 'en:cartons-cts-ainer-fructose-corn-syrup-1-can-phosphoric-acid', 'en:natural-carbonated-water', 'en:high-caramel-color', 'en:canned-under-authority-of-the-coca-cola-company-atlanta', 'en:ga-30313', 'en:canner-s-name-and-address-appear-on-each-can', 'en:caffeine-content', 'en:12-fl-oz-02017-the-coca-cola-140-daily-value-0-2-14-g-company-consumer-information-ugars-78-call-1-800-438-2653-coke', 'en:com-l-saturated-fat-tary-fiber-and-potassium-coke-scan-here-for-more-food-information-rchase-floz-cans'], 'en:vegetarian-status-unknown': ['en:pledse-recycle-cans', 'en:cartons-cts-ainer-fructose-corn-syrup-1-can-phosphoric-acid', 'en:natural-carbonated-water', 'en:high-caramel-color', 'en:canned-under-authority-of-the-coca-cola-company-atlanta', 'en:ga-30313', 'en:canner-s-name-and-address-appear-on-each-can', 'en:caffeine-content', 'en:12-fl-oz-02017-the-coca-cola-140-daily-value-0-2-14-g-company-consumer-information-ugars-78-call-1-800-438-2653-coke', 'en:com-l-saturated-fat-tary-fiber-and-potassium-coke-scan-here-for-more-food-information-rchase-floz-cans']}, 'last_edit_dates_tags': ['2024-10-12', '2024-10', '2024'], 'manufacturing_places': '', 'nutrient_levels_tags': ['en:fat-in-low-quantity', 'en:sugars-in-high-quantity', 'en:salt-in-high-quantity'], 'nutriscore_2021_tags': ['e'], 'nutriscore_2023_tags': ['e'], 'packagings_materials': {'all': {}, 'en:metal': {}, 'en:unknown': {}}, 'purchase_places_tags': [], 'amino_acids_prev_tags': [], 'categories_properties': {}, 'ciqual_food_name_tags': ['unknown'], 'image_front_small_url': 'https://images.openfoodfacts.org/images/products/004/900/002/8904/front_en.16.200.jpg', 'image_front_thumb_url': 'https://images.openfoodfacts.org/images/products/004/900/002/8904/front_en.16.100.jpg', 'image_ingredients_url': 'https://images.openfoodfacts.org/images/products/004/900/002/8904/ingredients_en.8.400.jpg', 'ingredients_hierarchy': ['en:pledse-recycle-cans', 'en:cartons-cts-ainer-fructose-corn-syrup-1-can-phosphoric-acid', 'en:natural-carbonated-water', 'en:high-caramel-color', 'en:flavouring', 'en:caffeine', 'en:canned-under-authority-of-the-coca-cola-company-atlanta', 'en:ga-30313', 'en:canner-s-name-and-address-appear-on-each-can', 'en:caffeine-content', 'en:com-l-saturated-fat-tary-fiber-and-potassium-coke-scan-here-for-more-food-information-rchase-floz-cans', 'en:12-fl-oz-02017-the-coca-cola-140-daily-value-0-2-14-g-company-consumer-information-ugars-78-call-1-800-438-2653-coke'], 'ingredients_ids_debug': ['pledse-recycle-cans-cartons-cts-ainer-fructose-corn-syrup-1-can-phosphoric-acid', 'natural-carbonated-water', 'high-caramel-color', 'flavors', 'caffeine', 'canned-under-authority-of-the-coca-cola-company-atlanta', 'ga-30313', 'canner-s-name-and-address-appear-on-each-can', 'caffeine-content', '34-mg', '12-fl-oz-02017-the-coca-cola-140-daily-value-0-2-14-g-company-consumer-information-ugars-78-call-1-800-438-2653-coke-com-l-saturated-fat-tary-fiber-and-potassium-coke-scan-here-for-more-food-information-rchase-floz-cans'], 'last_image_dates_tags': ['2021-12-23', '2021-12', '2021'], 'nucleotides_prev_tags': [], 'nutrition_grades_tags': ['e'], 'nutrition_score_debug': '', 'packaging_shapes_tags': ['en:box', 'en:can'], 'serving_quantity_unit': 'ml', 'unknown_ingredients_n': 10, 'data_quality_bugs_tags': [], 'data_quality_info_tags': ['en:packaging-data-incomplete', 'en:ingredients-percent-analysis-ok', 'en:ecoscore-extended-data-computed', 'en:ecoscore-extended-data-less-precise-than-agribalyse', 'en:food-groups-1-known', 'en:food-groups-2-known', 'en:food-groups-3-unknown'], 'ingredients_text_debug': "pledse recycle cans& cartons cts ainer FRUCTOSE CORN SYRUP 1 Can PHOSPHORIC ACID, NATURAL CARBONATED WATER, HIGH CARAMEL COLOR, FLAVORS, CAFFEINE. CANNED UNDER AUTHORITY OF THE COCA-COLA COMPANY ATLANTA, GA 30313. CANNER'S NAME AND ADDRESS APPEAR ON EACH CAN. CAFFEINE CONTENT: 34 mg/12 fl oz 02017 THE COCA-COLA 140 Daily Value 0% 2% 14% g COMPANY CONSUMER INFORMATION ugars 78%| CALL 1-800-438-2653 coke.com l saturated fat tary fiber and potassium Coke SCAN HERE FoR MORE FOOD INFORMATION RCHASE FLOZ CANS", 'removed_countries_tags': [], 'unknown_nutrients_tags': [], 'additives_original_tags': ['en:e338', 'en:e150c'], 'traces_from_ingredients': '', 'data_quality_errors_tags': [], 'debug_param_sorted_langs': ['en'], 'ingredients_sweeteners_n': 0, 'nutrition_score_beverage': 1, 'packaging_materials_tags': ['en:aluminium'], 'packaging_recycling_tags': [], 'ingredients_analysis_tags': ['en:palm-oil-content-unknown', 'en:vegan-status-unknown', 'en:vegetarian-status-unknown'], 'ingredients_original_tags': ['en:pledse-recycle-cans', 'en:cartons-cts-ainer-fructose-corn-syrup-1-can-phosphoric-acid', 'en:natural-carbonated-water', 'en:high-caramel-color', 'en:flavouring', 'en:caffeine', 'en:canned-under-authority-of-the-coca-cola-company-atlanta', 'en:ga-30313', 'en:canner-s-name-and-address-appear-on-each-can', 'en:caffeine-content', 'en:com-l-saturated-fat-tary-fiber-and-potassium-coke-scan-here-for-more-food-information-rchase-floz-cans', 'en:12-fl-oz-02017-the-coca-cola-140-daily-value-0-2-14-g-company-consumer-information-ugars-78-call-1-800-438-2653-coke'], 'interface_version_created': '20120622', 'manufacturing_places_tags': [], 'nutriscore_score_opposite': -32, 'allergens_from_ingredients': '', 'categories_properties_tags': ['all-products', 'categories-known', 'agribalyse-food-code-unknown', 'agribalyse-proxy-food-code-unknown', 'ciqual-food-code-unknown', 'agribalyse-unknown'], 'data_quality_warnings_tags': ['en:ingredients-unknown-score-above-5', 'en:ingredients-80-percent-unknown', 'en:ingredients-ingredient-tag-length-greater-than-50', 'en:ingredients-ingredient-tag-length-greater-than-100', 'en:nutrition-value-very-high-for-category-salt', 'en:product-quantity-under-1g', 'en:serving-quantity-over-product-quantity', 'en:ecoscore-origins-of-ingredients-origins-are-100-percent-unknown', 'en:ecoscore-packaging-unspecified-material', 'en:ecoscore-production-system-no-label'], 'interface_version_modified': '20150316.jqm2', 'image_ingredients_small_url': 'https://images.openfoodfacts.org/images/products/004/900/002/8904/ingredients_en.8.200.jpg', 'image_ingredients_thumb_url': 'https://images.openfoodfacts.org/images/products/004/900/002/8904/ingredients_en.8.100.jpg', 'ingredients_from_palm_oil_n': 0, 'nutrition_data_prepared_per': '100g', 'ingredients_percent_analysis': 1, 'ingredients_from_palm_oil_tags': [], 'ingredients_text_with_allergens': "pledse recycle cans, cartons cts ainer fructose corn syrup 1 can phosphoric acid, natural carbonated water, high caramel color, flavors, caffeine, canned under authority of the coca-cola company atlanta, ga 30313, canner's name and address appear on each can, caffeine content: 34 mg/12 fl oz 02017 the coca-cola 140 daily value 0% 2% 14% g company consumer information ugars 78%| call 1-800-438-2653 coke,com l saturated fat tary fiber and potassium coke scan here for more food information rchase floz cans", 'ingredients_without_ciqual_codes': ['en:12-fl-oz-02017-the-coca-cola-140-daily-value-0-2-14-g-company-consumer-information-ugars-78-call-1-800-438-2653-coke', 'en:caffeine', 'en:caffeine-content', 'en:canned-under-authority-of-the-coca-cola-company-atlanta', 'en:canner-s-name-and-address-appear-on-each-can', 'en:cartons-cts-ainer-fructose-corn-syrup-1-can-phosphoric-acid', 'en:com-l-saturated-fat-tary-fiber-and-potassium-coke-scan-here-for-more-food-information-rchase-floz-cans', 'en:flavouring', 'en:ga-30313', 'en:high-caramel-color', 'en:natural-carbonated-water', 'en:pledse-recycle-cans'], 'nutrition_score_warning_no_fiber': 1, 'ingredients_without_ecobalyse_ids': ['en:12-fl-oz-02017-the-coca-cola-140-daily-value-0-2-14-g-company-consumer-information-ugars-78-call-1-800-438-2653-coke', 'en:caffeine', 'en:caffeine-content', 'en:canned-under-authority-of-the-coca-cola-company-atlanta', 'en:canner-s-name-and-address-appear-on-each-can', 'en:cartons-cts-ainer-fructose-corn-syrup-1-can-phosphoric-acid', 'en:com-l-saturated-fat-tary-fiber-and-potassium-coke-scan-here-for-more-food-information-rchase-floz-cans', 'en:flavouring', 'en:ga-30313', 'en:high-caramel-color', 'en:natural-carbonated-water', 'en:pledse-recycle-cans'], 'other_nutritional_substances_tags': [], 'ingredients_text_with_allergens_en': "pledse recycle cans, cartons cts ainer fructose corn syrup 1 can phosphoric acid, natural carbonated water, high caramel color, flavors, caffeine, canned under authority of the coca-cola company atlanta, ga 30313, canner's name and address appear on each can, caffeine content: 34 mg/12 fl oz 02017 the coca-cola 140 daily value 0% 2% 14% g company consumer information ugars 78%| call 1-800-438-2653 coke,com l saturated fat tary fiber and potassium coke scan here for more food information rchase floz cans", 'ingredients_without_ciqual_codes_n': 12, 'ingredients_without_ecobalyse_ids_n': 12, 'ingredients_with_specified_percent_n': 0, 'ingredients_non_nutritive_sweeteners_n': 0, 'ingredients_with_specified_percent_sum': 0, 'ingredients_with_unspecified_percent_n': 11, 'ingredients_that_may_be_from_palm_oil_n': 0, 'ingredients_with_unspecified_percent_sum': 100, 'ingredients_that_may_be_from_palm_oil_tags': [], 'ingredients_from_or_that_may_be_from_palm_oil_n': 0, 'nutrition_score_warning_fruits_vegetables_nuts_estimate_from_ingredients': 1, 'nutrition_score_warning_fruits_vegetables_legumes_estimate_from_ingredients': 1, 'nutrition_score_warning_fruits_vegetables_nuts_estimate_from_ingredients_value': 0, 'nutrition_score_warning_fruits_vegetables_legumes_estimate_from_ingredients_value': 0}}}},
                                         sql='UPDATE main_receipt_items SET name = %s, qty = %s, uom = %s, data = %s WHERE id=%s RETURNING *;')
2025-04-12 14:48:46.046062 --- ERROR --- DatabaseError(message='invalid input syntax for type integer: " Pinch"LINE 1: ...= 'Blueberry bagels, blueberry', qty = '1', uom = ' Pinch', ...                                                             ^',
                                         payload={'id': 61, 'update': {'name': 'Blueberry bagels, blueberry', 'qty': '1', 'uom': ' Pinch', 'data': {'cost': '2.43', 'expires': False}}},
                                         sql='UPDATE main_receipt_items SET name = %s, qty = %s, uom = %s, data = %s WHERE id=%s RETURNING *;')
2025-04-12 14:49:19.676918 --- ERROR --- DatabaseError(message='invalid input syntax for type integer: " Pinch"LINE 1: ..._items SET name = 'Cooked rice', qty = '2', uom = ' Pinch', ...                                                             ^',
                                         payload={'id': 63, 'update': {'name': 'Cooked rice', 'qty': '2', 'uom': ' Pinch', 'data': {'cost': '2.48', 'expires': False}}},
                                         sql='UPDATE main_receipt_items SET name = %s, qty = %s, uom = %s, data = %s WHERE id=%s RETURNING *;')
2025-04-12 14:49:35.333826 --- ERROR --- DatabaseError(message='invalid input syntax for type integer: " Pinch"LINE 1: ..._items SET name = 'Cooked rice', qty = '2', uom = ' Pinch', ...                                                             ^',
                                         payload={'id': 63, 'update': {'name': 'Cooked rice', 'qty': '2', 'uom': ' Pinch', 'data': {'cost': '2.48', 'expires': False}}},
                                         sql='UPDATE main_receipt_items SET name = %s, qty = %s, uom = %s, data = %s WHERE id=%s RETURNING *;')
2025-04-12 15:41:19.681064 --- ERROR --- DatabaseError(message='column "files" of relation "test_recipes" does not existLINE 1: UPDATE test_recipes SET files = '{"Order_details_-_Walmart.c...                                ^',
                                         payload={'id': '7', 'update': {'files': {'Order_details_-_Walmart.com_04122025.pdf': {'file_path': 'Order_details_-_Walmart.com_04122025.pdf', 'file_type': 'application/pdf', 'file_size': 255703, 'uploaded_by': 'jadowyne'}}}},
                                         sql='UPDATE test_recipes SET files = %s WHERE id=%s RETURNING *;')
2025-04-12 17:33:28.283678 --- ERROR --- DatabaseError(message='tuple index out of range',
                                         payload=('', 50, 0),
                                         sql='WITH passed_id AS (SELECT %s AS passed_id),    info_id AS (SELECT item_info_id FROM test_items WHERE id=(SELECT passed_id FROM passed_id)),    sum_cte AS (      SELECT mi.id, SUM(mil.quantity_on_hand)::FLOAT8 AS total_sum      FROM test_item_locations mil      JOIN test_items mi ON mil.part_id = mi.id      GROUP BY mi.id    ),    cte_item_info AS (        SELECT         test_item_info.*,        row_to_json(units.*) as uom,        FROM test_item_info        LEFT JOIN units ON test_item_info.uom = units.id        WHERE test_item_info.id = (SELECT item_info_id FROM info_id)    )SELECT test_items.*,    (SELECT COALESCE(row_to_json(ii), '{}') FROM cte_item_info ii) AS item_info,    sum_cte.total_sum as total_qohFROM test_itemsLEFT JOIN sum_cte ON test_items.id = sum_cte.idLEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.idWHERE test_items.search_string LIKE '%%' || %s || '%%'ORDER BY test_items.item_name ASCLIMIT %s OFFSET %s;')
2025-04-12 17:36:38.542221 --- ERROR --- DatabaseError(message='subquery must return only one columnLINE 11:     (SELECT * FROM units WHERE id=test_item_info.uom) as uom             ^',
                                         payload=('', 50, 0),
                                         sql='WITH sum_cte AS (      SELECT mi.id, SUM(mil.quantity_on_hand)::FLOAT8 AS total_sum      FROM test_item_locations mil      JOIN test_items mi ON mil.part_id = mi.id      GROUP BY mi.id    )SELECT test_items.*,    row_to_json(test_item_info.*) as item_info,    sum_cte.total_sum as total_qoh,    (SELECT * FROM units WHERE id=test_item_info.uom) as uomFROM test_itemsLEFT JOIN sum_cte ON test_items.id = sum_cte.idLEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.idWHERE test_items.search_string LIKE '%%' || %s || '%%'ORDER BY test_items.item_name ASCLIMIT %s OFFSET %s;')
2025-04-12 17:38:03.263608 --- ERROR --- DatabaseError(message='subquery must return only one columnLINE 11:     (SELECT * FROM units WHERE units.id=test_item_info.uom) ...             ^',
                                         payload=('', 50, 0),
                                         sql='WITH sum_cte AS (      SELECT mi.id, SUM(mil.quantity_on_hand)::FLOAT8 AS total_sum      FROM test_item_locations mil      JOIN test_items mi ON mil.part_id = mi.id      GROUP BY mi.id    )SELECT test_items.*,    row_to_json(test_item_info.*) as item_info,    sum_cte.total_sum as total_qoh,    (SELECT * FROM units WHERE units.id=test_item_info.uom) as uomFROM test_itemsLEFT JOIN sum_cte ON test_items.id = sum_cte.idLEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.idWHERE test_items.search_string LIKE '%%' || %s || '%%'ORDER BY test_items.item_name ASCLIMIT %s OFFSET %s;')
2025-04-12 17:38:40.948842 --- ERROR --- DatabaseError(message='subquery must return only one columnLINE 11:     (SELECT units.* FROM units WHERE units.id=test_item_info...             ^',
                                         payload=('', 50, 0),
                                         sql='WITH sum_cte AS (      SELECT mi.id, SUM(mil.quantity_on_hand)::FLOAT8 AS total_sum      FROM test_item_locations mil      JOIN test_items mi ON mil.part_id = mi.id      GROUP BY mi.id    )SELECT test_items.*,    row_to_json(test_item_info.*) as item_info,    sum_cte.total_sum as total_qoh,    (SELECT units.* FROM units WHERE units.id=test_item_info.uom) as uomFROM test_itemsLEFT JOIN sum_cte ON test_items.id = sum_cte.idLEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.idWHERE test_items.search_string LIKE '%%' || %s || '%%'ORDER BY test_items.item_name ASCLIMIT %s OFFSET %s;')
2025-04-12 18:10:19.256336 --- ERROR --- DatabaseError(message='COALESCE types integer and character varying cannot be matchedLINE 5:             COALESCE(test_item_info.uom, items.uom) AS uom,                                                 ^',
                                         payload=(2,),
                                         sql='WITH passed_id AS (SELECT %s AS passed_id),    cte_recipe_items AS (            SELECT items.*,            COALESCE(test_items.barcode, items.uuid) AS uuid,            COALESCE(test_item_info.uom, items.uom) AS uom,            COALESCE(test_items.item_name, items.item_name) AS item_name,            COALESCE(test_items.links, items.links) AS links            FROM test_recipe_items items            LEFT JOIN test_items ON items.item_id = test_items.id            LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id            WHERE items.rp_id = (SELECT passed_id FROM passed_id)            ORDER BY items.item_name ASC        )SELECT (SELECT passed_id FROM passed_id) AS passed_id,     test_recipes.*,     logins.username as author,     (SELECT COALESCE(array_agg(row_to_json(ris)), '{}') FROM cte_recipe_items ris) AS recipe_itemsFROM test_recipesJOIN logins ON test_recipes.author = logins.idWHERE test_recipes.id=(SELECT passed_id FROM passed_id)')
2025-04-12 18:13:23.317269 --- ERROR --- DatabaseError(message='COALESCE types integer and character varying cannot be matchedLINE 5:             COALESCE(test_item_info.uom, items.uom) AS uom,                                                 ^',
                                         payload=(2,),
                                         sql='WITH passed_id AS (SELECT %s AS passed_id),    cte_recipe_items AS (            SELECT items.*,            COALESCE(test_items.barcode, items.uuid) AS uuid,            COALESCE(test_item_info.uom, items.uom) AS uom,            COALESCE(test_items.item_name, items.item_name) AS item_name,            COALESCE(test_items.links, items.links) AS links            FROM test_recipe_items items            LEFT JOIN test_items ON items.item_id = test_items.id            LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id            WHERE items.rp_id = (SELECT passed_id FROM passed_id)            ORDER BY items.item_name ASC        )SELECT (SELECT passed_id FROM passed_id) AS passed_id,     test_recipes.*,     logins.username as author,     (SELECT COALESCE(array_agg(row_to_json(ris)), '{}') FROM cte_recipe_items ris) AS recipe_itemsFROM test_recipesJOIN logins ON test_recipes.author = logins.idWHERE test_recipes.id=(SELECT passed_id FROM passed_id)')
2025-04-12 18:29:43.068612 --- ERROR --- DatabaseError(message='column test_item_info.conversions does not existLINE 8:             COALESCE(array_agg(test_item_info.conversions), ...                                       ^',
                                         payload=(1,),
                                         sql='WITH passed_id AS (SELECT %s AS passed_id),    cte_recipe_items AS (            SELECT items.*,            COALESCE(test_items.barcode, items.uuid) AS uuid,            COALESCE(test_item_info.uom, items.uom) AS uom,            COALESCE(test_items.item_name, items.item_name) AS item_name,            COALESCE(test_items.links, items.links) AS links,            COALESCE(array_agg(test_item_info.conversions), '[]'::json) AS conversions            FROM test_recipe_items items            LEFT JOIN test_items ON items.item_id = test_items.id            LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id            WHERE items.rp_id = (SELECT passed_id FROM passed_id)            ORDER BY items.item_name ASC        )SELECT (SELECT passed_id FROM passed_id) AS passed_id,     test_recipes.*,     logins.username as author,     (SELECT COALESCE(array_agg(row_to_json(ris)), '{}') FROM cte_recipe_items ris) AS recipe_itemsFROM test_recipesJOIN logins ON test_recipes.author = logins.idWHERE test_recipes.id=(SELECT passed_id FROM passed_id)')
2025-04-12 18:30:31.073095 --- ERROR --- DatabaseError(message='syntax error at or near "SELECT"LINE 8:             COALESCE(array_agg(SELECT * FROM test_conversion...                                       ^',
                                         payload=(1,),
                                         sql='WITH passed_id AS (SELECT %s AS passed_id),    cte_recipe_items AS (            SELECT items.*,            COALESCE(test_items.barcode, items.uuid) AS uuid,            COALESCE(test_item_info.uom, items.uom) AS uom,            COALESCE(test_items.item_name, items.item_name) AS item_name,            COALESCE(test_items.links, items.links) AS links,            COALESCE(array_agg(SELECT * FROM test_conversions WHERE item_id=(SELECT passed_id FROM passed_id)), '[]'::json) AS conversions            FROM test_recipe_items items            LEFT JOIN test_items ON items.item_id = test_items.id            LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id            WHERE items.rp_id = (SELECT passed_id FROM passed_id)            ORDER BY items.item_name ASC        )SELECT (SELECT passed_id FROM passed_id) AS passed_id,     test_recipes.*,     logins.username as author,     (SELECT COALESCE(array_agg(row_to_json(ris)), '{}') FROM cte_recipe_items ris) AS recipe_itemsFROM test_recipesJOIN logins ON test_recipes.author = logins.idWHERE test_recipes.id=(SELECT passed_id FROM passed_id)')
2025-04-12 18:30:56.976889 --- ERROR --- DatabaseError(message='syntax error at or near "AS"LINE 8: ...s WHERE item_id=(SELECT passed_id FROM passed_id) AS convers...                                                             ^',
                                         payload=(1,),
                                         sql='WITH passed_id AS (SELECT %s AS passed_id),    cte_recipe_items AS (            SELECT items.*,            COALESCE(test_items.barcode, items.uuid) AS uuid,            COALESCE(test_item_info.uom, items.uom) AS uom,            COALESCE(test_items.item_name, items.item_name) AS item_name,            COALESCE(test_items.links, items.links) AS links,            (SELECT * FROM test_conversions WHERE item_id=(SELECT passed_id FROM passed_id) AS conversions            FROM test_recipe_items items            LEFT JOIN test_items ON items.item_id = test_items.id            LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id            WHERE items.rp_id = (SELECT passed_id FROM passed_id)            ORDER BY items.item_name ASC        )SELECT (SELECT passed_id FROM passed_id) AS passed_id,     test_recipes.*,     logins.username as author,     (SELECT COALESCE(array_agg(row_to_json(ris)), '{}') FROM cte_recipe_items ris) AS recipe_itemsFROM test_recipesJOIN logins ON test_recipes.author = logins.idWHERE test_recipes.id=(SELECT passed_id FROM passed_id)')
2025-04-12 18:31:32.917433 --- ERROR --- DatabaseError(message='syntax error at or near "AS"LINE 8: ...RE conv.item_id=(SELECT passed_id FROM passed_id) AS convers...                                                             ^',
                                         payload=(1,),
                                         sql='WITH passed_id AS (SELECT %s AS passed_id),    cte_recipe_items AS (            SELECT items.*,            COALESCE(test_items.barcode, items.uuid) AS uuid,            COALESCE(test_item_info.uom, items.uom) AS uom,            COALESCE(test_items.item_name, items.item_name) AS item_name,            COALESCE(test_items.links, items.links) AS links,            (SELECT * FROM test_conversions conv WHERE conv.item_id=(SELECT passed_id FROM passed_id) AS conversions            FROM test_recipe_items items            LEFT JOIN test_items ON items.item_id = test_items.id            LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id            WHERE items.rp_id = (SELECT passed_id FROM passed_id)            ORDER BY items.item_name ASC        )SELECT (SELECT passed_id FROM passed_id) AS passed_id,     test_recipes.*,     logins.username as author,     (SELECT COALESCE(array_agg(row_to_json(ris)), '{}') FROM cte_recipe_items ris) AS recipe_itemsFROM test_recipesJOIN logins ON test_recipes.author = logins.idWHERE test_recipes.id=(SELECT passed_id FROM passed_id)')
2025-04-12 18:31:41.215951 --- ERROR --- DatabaseError(message='syntax error at or near "AS"LINE 8: ...RE conv.item_id=(SELECT passed_id FROM passed_id) AS convers...                                                             ^',
                                         payload=(1,),
                                         sql='WITH passed_id AS (SELECT %s AS passed_id),    cte_recipe_items AS (            SELECT items.*,            COALESCE(test_items.barcode, items.uuid) AS uuid,            COALESCE(test_item_info.uom, items.uom) AS uom,            COALESCE(test_items.item_name, items.item_name) AS item_name,            COALESCE(test_items.links, items.links) AS links,            (SELECT conv.* FROM test_conversions conv WHERE conv.item_id=(SELECT passed_id FROM passed_id) AS conversions            FROM test_recipe_items items            LEFT JOIN test_items ON items.item_id = test_items.id            LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id            WHERE items.rp_id = (SELECT passed_id FROM passed_id)            ORDER BY items.item_name ASC        )SELECT (SELECT passed_id FROM passed_id) AS passed_id,     test_recipes.*,     logins.username as author,     (SELECT COALESCE(array_agg(row_to_json(ris)), '{}') FROM cte_recipe_items ris) AS recipe_itemsFROM test_recipesJOIN logins ON test_recipes.author = logins.idWHERE test_recipes.id=(SELECT passed_id FROM passed_id)')
2025-04-12 18:32:10.052409 --- ERROR --- DatabaseError(message='subquery must return only one columnLINE 8:             (SELECT conv.* FROM test_conversions conv WHERE ...                    ^',
                                         payload=(1,),
                                         sql='WITH passed_id AS (SELECT %s AS passed_id),    cte_recipe_items AS (            SELECT items.*,            COALESCE(test_items.barcode, items.uuid) AS uuid,            COALESCE(test_item_info.uom, items.uom) AS uom,            COALESCE(test_items.item_name, items.item_name) AS item_name,            COALESCE(test_items.links, items.links) AS links,            (SELECT conv.* FROM test_conversions conv WHERE conv.item_id=(SELECT passed_id FROM passed_id)) AS conversions            FROM test_recipe_items items            LEFT JOIN test_items ON items.item_id = test_items.id            LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id            WHERE items.rp_id = (SELECT passed_id FROM passed_id)            ORDER BY items.item_name ASC        )SELECT (SELECT passed_id FROM passed_id) AS passed_id,     test_recipes.*,     logins.username as author,     (SELECT COALESCE(array_agg(row_to_json(ris)), '{}') FROM cte_recipe_items ris) AS recipe_itemsFROM test_recipesJOIN logins ON test_recipes.author = logins.idWHERE test_recipes.id=(SELECT passed_id FROM passed_id)')
2025-04-12 18:32:18.359130 --- ERROR --- DatabaseError(message='syntax error at or near "SELECT"LINE 8:             array_agg(SELECT conv.* FROM test_conversions co...                              ^',
                                         payload=(1,),
                                         sql='WITH passed_id AS (SELECT %s AS passed_id),    cte_recipe_items AS (            SELECT items.*,            COALESCE(test_items.barcode, items.uuid) AS uuid,            COALESCE(test_item_info.uom, items.uom) AS uom,            COALESCE(test_items.item_name, items.item_name) AS item_name,            COALESCE(test_items.links, items.links) AS links,            array_agg(SELECT conv.* FROM test_conversions conv WHERE conv.item_id=(SELECT passed_id FROM passed_id)) AS conversions            FROM test_recipe_items items            LEFT JOIN test_items ON items.item_id = test_items.id            LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id            WHERE items.rp_id = (SELECT passed_id FROM passed_id)            ORDER BY items.item_name ASC        )SELECT (SELECT passed_id FROM passed_id) AS passed_id,     test_recipes.*,     logins.username as author,     (SELECT COALESCE(array_agg(row_to_json(ris)), '{}') FROM cte_recipe_items ris) AS recipe_itemsFROM test_recipesJOIN logins ON test_recipes.author = logins.idWHERE test_recipes.id=(SELECT passed_id FROM passed_id)')
2025-04-12 18:32:47.717764 --- ERROR --- DatabaseError(message='syntax error at or near "SELECT"LINE 8:             array_agg(row_to_json(SELECT conv.* FROM test_co...                                          ^',
                                         payload=(1,),
                                         sql='WITH passed_id AS (SELECT %s AS passed_id),    cte_recipe_items AS (            SELECT items.*,            COALESCE(test_items.barcode, items.uuid) AS uuid,            COALESCE(test_item_info.uom, items.uom) AS uom,            COALESCE(test_items.item_name, items.item_name) AS item_name,            COALESCE(test_items.links, items.links) AS links,            array_agg(row_to_json(SELECT conv.* FROM test_conversions conv WHERE conv.item_id=(SELECT passed_id FROM passed_id))) AS conversions            FROM test_recipe_items items            LEFT JOIN test_items ON items.item_id = test_items.id            LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id            WHERE items.rp_id = (SELECT passed_id FROM passed_id)            ORDER BY items.item_name ASC        )SELECT (SELECT passed_id FROM passed_id) AS passed_id,     test_recipes.*,     logins.username as author,     (SELECT COALESCE(array_agg(row_to_json(ris)), '{}') FROM cte_recipe_items ris) AS recipe_itemsFROM test_recipesJOIN logins ON test_recipes.author = logins.idWHERE test_recipes.id=(SELECT passed_id FROM passed_id)')
2025-04-12 18:32:55.779238 --- ERROR --- DatabaseError(message='syntax error at or near "AS"LINE 8: ...E conv.item_id=(SELECT passed_id FROM passed_id)) AS convers...                                                             ^',
                                         payload=(1,),
                                         sql='WITH passed_id AS (SELECT %s AS passed_id),    cte_recipe_items AS (            SELECT items.*,            COALESCE(test_items.barcode, items.uuid) AS uuid,            COALESCE(test_item_info.uom, items.uom) AS uom,            COALESCE(test_items.item_name, items.item_name) AS item_name,            COALESCE(test_items.links, items.links) AS links,            array_agg((SELECT conv.* FROM test_conversions conv WHERE conv.item_id=(SELECT passed_id FROM passed_id)) AS conversions            FROM test_recipe_items items            LEFT JOIN test_items ON items.item_id = test_items.id            LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id            WHERE items.rp_id = (SELECT passed_id FROM passed_id)            ORDER BY items.item_name ASC        )SELECT (SELECT passed_id FROM passed_id) AS passed_id,     test_recipes.*,     logins.username as author,     (SELECT COALESCE(array_agg(row_to_json(ris)), '{}') FROM cte_recipe_items ris) AS recipe_itemsFROM test_recipesJOIN logins ON test_recipes.author = logins.idWHERE test_recipes.id=(SELECT passed_id FROM passed_id)')
2025-04-12 18:33:11.361795 --- ERROR --- DatabaseError(message='subquery must return only one columnLINE 8:             array_agg((SELECT conv.* FROM test_conversions c...                              ^',
                                         payload=(1,),
                                         sql='WITH passed_id AS (SELECT %s AS passed_id),    cte_recipe_items AS (            SELECT items.*,            COALESCE(test_items.barcode, items.uuid) AS uuid,            COALESCE(test_item_info.uom, items.uom) AS uom,            COALESCE(test_items.item_name, items.item_name) AS item_name,            COALESCE(test_items.links, items.links) AS links,            array_agg((SELECT conv.* FROM test_conversions conv WHERE conv.item_id=(SELECT passed_id FROM passed_id))) AS conversions            FROM test_recipe_items items            LEFT JOIN test_items ON items.item_id = test_items.id            LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id            WHERE items.rp_id = (SELECT passed_id FROM passed_id)            ORDER BY items.item_name ASC        )SELECT (SELECT passed_id FROM passed_id) AS passed_id,     test_recipes.*,     logins.username as author,     (SELECT COALESCE(array_agg(row_to_json(ris)), '{}') FROM cte_recipe_items ris) AS recipe_itemsFROM test_recipesJOIN logins ON test_recipes.author = logins.idWHERE test_recipes.id=(SELECT passed_id FROM passed_id)')
2025-04-12 18:36:44.331323 --- ERROR --- DatabaseError(message='COALESCE types test_conversions[] and json cannot be matchedLINE 8: ...nversions conv WHERE conv.item_id=test_items.id), '[]'::json...                                                             ^',
                                         payload=(1,),
                                         sql='WITH passed_id AS (SELECT %s AS passed_id),    cte_recipe_items AS (            SELECT items.*,            COALESCE(test_items.barcode, items.uuid) AS uuid,            COALESCE(test_item_info.uom, items.uom) AS uom,            COALESCE(test_items.item_name, items.item_name) AS item_name,            COALESCE(test_items.links, items.links) AS links,            COALESCE((SELECT array_agg(conv) FROM test_conversions conv WHERE conv.item_id=test_items.id), '[]'::json) AS conversions            FROM test_recipe_items items            LEFT JOIN test_items ON items.item_id = test_items.id            LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id            WHERE items.rp_id = (SELECT passed_id FROM passed_id)            ORDER BY items.item_name ASC        )SELECT (SELECT passed_id FROM passed_id) AS passed_id,     test_recipes.*,     logins.username as author,     (SELECT COALESCE(array_agg(row_to_json(ris)), '{}') FROM cte_recipe_items ris) AS recipe_itemsFROM test_recipesJOIN logins ON test_recipes.author = logins.idWHERE test_recipes.id=(SELECT passed_id FROM passed_id)')
2025-04-12 18:37:05.400764 --- ERROR --- DatabaseError(message='COALESCE types test_conversions[] and json cannot be matchedLINE 8: ...nversions conv WHERE conv.item_id=test_items.id), '{}'::json...                                                             ^',
                                         payload=(1,),
                                         sql='WITH passed_id AS (SELECT %s AS passed_id),    cte_recipe_items AS (            SELECT items.*,            COALESCE(test_items.barcode, items.uuid) AS uuid,            COALESCE(test_item_info.uom, items.uom) AS uom,            COALESCE(test_items.item_name, items.item_name) AS item_name,            COALESCE(test_items.links, items.links) AS links,            COALESCE((SELECT array_agg(conv) FROM test_conversions conv WHERE conv.item_id=test_items.id), '{}'::json) AS conversions            FROM test_recipe_items items            LEFT JOIN test_items ON items.item_id = test_items.id            LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id            WHERE items.rp_id = (SELECT passed_id FROM passed_id)            ORDER BY items.item_name ASC        )SELECT (SELECT passed_id FROM passed_id) AS passed_id,     test_recipes.*,     logins.username as author,     (SELECT COALESCE(array_agg(row_to_json(ris)), '{}') FROM cte_recipe_items ris) AS recipe_itemsFROM test_recipesJOIN logins ON test_recipes.author = logins.idWHERE test_recipes.id=(SELECT passed_id FROM passed_id)')
2025-04-12 18:37:34.772339 --- ERROR --- DatabaseError(message='COALESCE types test_conversions[] and json cannot be matchedLINE 8: ...nversions conv WHERE conv.item_id=test_items.id), '[]'::json...                                                             ^',
                                         payload=(1,),
                                         sql='WITH passed_id AS (SELECT %s AS passed_id),    cte_recipe_items AS (            SELECT items.*,            COALESCE(test_items.barcode, items.uuid) AS uuid,            COALESCE(test_item_info.uom, items.uom) AS uom,            COALESCE(test_items.item_name, items.item_name) AS item_name,            COALESCE(test_items.links, items.links) AS links,            COALESCE((SELECT array_agg(conv) FROM test_conversions conv WHERE conv.item_id=test_items.id), '[]'::json) AS conversions            FROM test_recipe_items items            LEFT JOIN test_items ON items.item_id = test_items.id            LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id            WHERE items.rp_id = (SELECT passed_id FROM passed_id)            ORDER BY items.item_name ASC        )SELECT (SELECT passed_id FROM passed_id) AS passed_id,     test_recipes.*,     logins.username as author,     (SELECT COALESCE(array_agg(row_to_json(ris)), '{}') FROM cte_recipe_items ris) AS recipe_itemsFROM test_recipesJOIN logins ON test_recipes.author = logins.idWHERE test_recipes.id=(SELECT passed_id FROM passed_id)')
2025-04-12 18:37:42.827271 --- ERROR --- DatabaseError(message='malformed array literal: "[]"LINE 8: ...nversions conv WHERE conv.item_id=test_items.id), '[]') AS c...                                                             ^DETAIL:  "[" must introduce explicitly-specified array dimensions.',
                                         payload=(1,),
                                         sql='WITH passed_id AS (SELECT %s AS passed_id),    cte_recipe_items AS (            SELECT items.*,            COALESCE(test_items.barcode, items.uuid) AS uuid,            COALESCE(test_item_info.uom, items.uom) AS uom,            COALESCE(test_items.item_name, items.item_name) AS item_name,            COALESCE(test_items.links, items.links) AS links,            COALESCE((SELECT array_agg(conv) FROM test_conversions conv WHERE conv.item_id=test_items.id), '[]') AS conversions            FROM test_recipe_items items            LEFT JOIN test_items ON items.item_id = test_items.id            LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id            WHERE items.rp_id = (SELECT passed_id FROM passed_id)            ORDER BY items.item_name ASC        )SELECT (SELECT passed_id FROM passed_id) AS passed_id,     test_recipes.*,     logins.username as author,     (SELECT COALESCE(array_agg(row_to_json(ris)), '{}') FROM cte_recipe_items ris) AS recipe_itemsFROM test_recipesJOIN logins ON test_recipes.author = logins.idWHERE test_recipes.id=(SELECT passed_id FROM passed_id)')
2025-04-12 18:38:29.456797 --- ERROR --- DatabaseError(message='type "type_of_conversion[]" does not existLINE 8: ... conv WHERE conv.item_id=test_items.id), ARRAY[]::type_of_co...                                                             ^',
                                         payload=(1,),
                                         sql='WITH passed_id AS (SELECT %s AS passed_id),    cte_recipe_items AS (            SELECT items.*,            COALESCE(test_items.barcode, items.uuid) AS uuid,            COALESCE(test_item_info.uom, items.uom) AS uom,            COALESCE(test_items.item_name, items.item_name) AS item_name,            COALESCE(test_items.links, items.links) AS links,            COALESCE((SELECT array_agg(conv) FROM test_conversions conv WHERE conv.item_id=test_items.id), ARRAY[]::type_of_conversion[]) AS conversions            FROM test_recipe_items items            LEFT JOIN test_items ON items.item_id = test_items.id            LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id            WHERE items.rp_id = (SELECT passed_id FROM passed_id)            ORDER BY items.item_name ASC        )SELECT (SELECT passed_id FROM passed_id) AS passed_id,     test_recipes.*,     logins.username as author,     (SELECT COALESCE(array_agg(row_to_json(ris)), '{}') FROM cte_recipe_items ris) AS recipe_itemsFROM test_recipesJOIN logins ON test_recipes.author = logins.idWHERE test_recipes.id=(SELECT passed_id FROM passed_id)')
2025-04-12 18:38:37.378760 --- ERROR --- DatabaseError(message='cannot determine type of empty arrayLINE 8: ...nversions conv WHERE conv.item_id=test_items.id), ARRAY[]) A...                                                             ^HINT:  Explicitly cast to the desired type, for example ARRAY[]::integer[].',
                                         payload=(1,),
                                         sql='WITH passed_id AS (SELECT %s AS passed_id),    cte_recipe_items AS (            SELECT items.*,            COALESCE(test_items.barcode, items.uuid) AS uuid,            COALESCE(test_item_info.uom, items.uom) AS uom,            COALESCE(test_items.item_name, items.item_name) AS item_name,            COALESCE(test_items.links, items.links) AS links,            COALESCE((SELECT array_agg(conv) FROM test_conversions conv WHERE conv.item_id=test_items.id), ARRAY[]) AS conversions            FROM test_recipe_items items            LEFT JOIN test_items ON items.item_id = test_items.id            LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id            WHERE items.rp_id = (SELECT passed_id FROM passed_id)            ORDER BY items.item_name ASC        )SELECT (SELECT passed_id FROM passed_id) AS passed_id,     test_recipes.*,     logins.username as author,     (SELECT COALESCE(array_agg(row_to_json(ris)), '{}') FROM cte_recipe_items ris) AS recipe_itemsFROM test_recipesJOIN logins ON test_recipes.author = logins.idWHERE test_recipes.id=(SELECT passed_id FROM passed_id)')
2025-04-12 18:39:17.420643 --- ERROR --- DatabaseError(message='COALESCE could not convert type integer[] to test_conversions[]LINE 8: ...nversions conv WHERE conv.item_id=test_items.id), ARRAY[]::i...                                                             ^',
                                         payload=(1,),
                                         sql='WITH passed_id AS (SELECT %s AS passed_id),    cte_recipe_items AS (            SELECT items.*,            COALESCE(test_items.barcode, items.uuid) AS uuid,            COALESCE(test_item_info.uom, items.uom) AS uom,            COALESCE(test_items.item_name, items.item_name) AS item_name,            COALESCE(test_items.links, items.links) AS links,            COALESCE((SELECT array_agg(conv) FROM test_conversions conv WHERE conv.item_id=test_items.id), ARRAY[]::integer[]) AS conversions            FROM test_recipe_items items            LEFT JOIN test_items ON items.item_id = test_items.id            LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id            WHERE items.rp_id = (SELECT passed_id FROM passed_id)            ORDER BY items.item_name ASC        )SELECT (SELECT passed_id FROM passed_id) AS passed_id,     test_recipes.*,     logins.username as author,     (SELECT COALESCE(array_agg(row_to_json(ris)), '{}') FROM cte_recipe_items ris) AS recipe_itemsFROM test_recipesJOIN logins ON test_recipes.author = logins.idWHERE test_recipes.id=(SELECT passed_id FROM passed_id)')
2025-04-12 18:48:41.423855 --- ERROR --- DatabaseError(message='subquery must return only one columnLINE 5:             (SELECT * FROM units WHERE id=COALESCE(test_item...                    ^',
                                         payload=(1,),
                                         sql='WITH passed_id AS (SELECT %s AS passed_id),    cte_recipe_items AS (            SELECT items.*,            COALESCE(test_items.barcode, items.uuid) AS uuid,            (SELECT * FROM units WHERE id=COALESCE(test_item_info.uom, items.uom)) as uom,            COALESCE(test_items.item_name, items.item_name) AS item_name,            COALESCE(test_items.links, items.links) AS links,            (SELECT COALESCE(array_agg(conv), '{}') FROM test_conversions conv WHERE conv.item_id=test_items.id) AS conversions            FROM test_recipe_items items            LEFT JOIN test_items ON items.item_id = test_items.id            LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id            WHERE items.rp_id = (SELECT passed_id FROM passed_id)            ORDER BY items.item_name ASC        )SELECT (SELECT passed_id FROM passed_id) AS passed_id,     test_recipes.*,     logins.username as author,     (SELECT COALESCE(array_agg(row_to_json(ris)), '{}') FROM cte_recipe_items ris) AS recipe_itemsFROM test_recipesJOIN logins ON test_recipes.author = logins.idWHERE test_recipes.id=(SELECT passed_id FROM passed_id)')
2025-04-12 18:49:05.057244 --- ERROR --- DatabaseError(message='subquery must return only one columnLINE 5:             (SELECT * FROM units WHERE units.id=COALESCE(tes...                    ^',
                                         payload=(1,),
                                         sql='WITH passed_id AS (SELECT %s AS passed_id),    cte_recipe_items AS (            SELECT items.*,            COALESCE(test_items.barcode, items.uuid) AS uuid,            (SELECT * FROM units WHERE units.id=COALESCE(test_item_info.uom, items.uom)) as uom,            COALESCE(test_items.item_name, items.item_name) AS item_name,            COALESCE(test_items.links, items.links) AS links,            (SELECT COALESCE(array_agg(conv), '{}') FROM test_conversions conv WHERE conv.item_id=test_items.id) AS conversions            FROM test_recipe_items items            LEFT JOIN test_items ON items.item_id = test_items.id            LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id            WHERE items.rp_id = (SELECT passed_id FROM passed_id)            ORDER BY items.item_name ASC        )SELECT (SELECT passed_id FROM passed_id) AS passed_id,     test_recipes.*,     logins.username as author,     (SELECT COALESCE(array_agg(row_to_json(ris)), '{}') FROM cte_recipe_items ris) AS recipe_itemsFROM test_recipesJOIN logins ON test_recipes.author = logins.idWHERE test_recipes.id=(SELECT passed_id FROM passed_id)')
2025-04-12 18:49:40.541238 --- ERROR --- DatabaseError(message='subquery must return only one columnLINE 5:             (SELECT units.* FROM units WHERE units.id=COALES...                    ^',
                                         payload=(1,),
                                         sql='WITH passed_id AS (SELECT %s AS passed_id),    cte_recipe_items AS (            SELECT items.*,            COALESCE(test_items.barcode, items.uuid) AS uuid,            (SELECT units.* FROM units WHERE units.id=COALESCE(test_item_info.uom, items.uom)) as uom,            COALESCE(test_items.item_name, items.item_name) AS item_name,            COALESCE(test_items.links, items.links) AS links,            (SELECT COALESCE(array_agg(conv), '{}') FROM test_conversions conv WHERE conv.item_id=test_items.id) AS conversions            FROM test_recipe_items items            LEFT JOIN test_items ON items.item_id = test_items.id            LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id            WHERE items.rp_id = (SELECT passed_id FROM passed_id)            ORDER BY items.item_name ASC        )SELECT (SELECT passed_id FROM passed_id) AS passed_id,     test_recipes.*,     logins.username as author,     (SELECT COALESCE(array_agg(row_to_json(ris)), '{}') FROM cte_recipe_items ris) AS recipe_itemsFROM test_recipesJOIN logins ON test_recipes.author = logins.idWHERE test_recipes.id=(SELECT passed_id FROM passed_id)')
2025-04-12 18:50:56.070555 --- ERROR --- DatabaseError(message='invalid reference to FROM-clause entry for table "units"LINE 7:                 WHERE units.id=COALESCE(test_item_info.uom, ...                              ^HINT:  Perhaps you meant to reference the table alias "u".',
                                         payload=(1,),
                                         sql='WITH passed_id AS (SELECT %s AS passed_id),    cte_recipe_items AS (            SELECT items.*,            COALESCE(test_items.barcode, items.uuid) AS uuid,            (SELECT u.* FROM units u                JOIN test_item_info si ON u.id = COALESCE(si.uom, items.uom)                WHERE units.id=COALESCE(test_item_info.uom, items.uom)) as uom,            COALESCE(test_items.item_name, items.item_name) AS item_name,            COALESCE(test_items.links, items.links) AS links,            (SELECT COALESCE(array_agg(conv), '{}') FROM test_conversions conv WHERE conv.item_id=test_items.id) AS conversions            FROM test_recipe_items items            LEFT JOIN test_items ON items.item_id = test_items.id            LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id            WHERE items.rp_id = (SELECT passed_id FROM passed_id)            ORDER BY items.item_name ASC        )SELECT (SELECT passed_id FROM passed_id) AS passed_id,     test_recipes.*,     logins.username as author,     (SELECT COALESCE(array_agg(row_to_json(ris)), '{}') FROM cte_recipe_items ris) AS recipe_itemsFROM test_recipesJOIN logins ON test_recipes.author = logins.idWHERE test_recipes.id=(SELECT passed_id FROM passed_id)')
2025-04-12 19:02:26.980825 --- ERROR --- DatabaseError(message='function array_agg(test_conversions, units) does not existLINE 9:             (SELECT COALESCE(array_agg(conv.*, units.*), '{}...                                     ^HINT:  No function matches the given name and argument types. You might need to add explicit type casts.',
                                         payload=(1,),
                                         sql='WITH passed_id AS (SELECT %s AS passed_id),    cte_recipe_items AS (            SELECT items.*,            COALESCE(test_items.barcode, items.uuid) AS uuid,            COALESCE(test_item_info.uom, items.uom) AS uom,            COALESCE(test_items.item_name, items.item_name) AS item_name,            COALESCE(test_items.links, items.links) AS links,            row_to_json(units.*) as uom,            (SELECT COALESCE(array_agg(conv.*, units.*), '{}') FROM test_conversions conv                 JOIN units ON conv.uom_id = units.id                WHERE conv.item_id=test_items.id) AS conversions            FROM test_recipe_items items            LEFT JOIN test_items ON items.item_id = test_items.id            LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id            LEFT JOIN units ON units.id = COALESCE(test_item_info.uom, items.uom)            WHERE items.rp_id = (SELECT passed_id FROM passed_id)            ORDER BY items.item_name ASC        )SELECT (SELECT passed_id FROM passed_id) AS passed_id,     test_recipes.*,     logins.username as author,     (SELECT COALESCE(array_agg(row_to_json(ris)), '{}') FROM cte_recipe_items ris) AS recipe_itemsFROM test_recipesJOIN logins ON test_recipes.author = logins.idWHERE test_recipes.id=(SELECT passed_id FROM passed_id)')
2025-04-12 19:02:47.287761 --- ERROR --- DatabaseError(message='column "units.id" must appear in the GROUP BY clause or be used in an aggregate functionLINE 9: ...         (SELECT COALESCE(array_agg(conv), '{}'), units.* FR...                                                             ^',
                                         payload=(1,),
                                         sql='WITH passed_id AS (SELECT %s AS passed_id),    cte_recipe_items AS (            SELECT items.*,            COALESCE(test_items.barcode, items.uuid) AS uuid,            COALESCE(test_item_info.uom, items.uom) AS uom,            COALESCE(test_items.item_name, items.item_name) AS item_name,            COALESCE(test_items.links, items.links) AS links,            row_to_json(units.*) as uom,            (SELECT COALESCE(array_agg(conv), '{}'), units.* FROM test_conversions conv                 JOIN units ON conv.uom_id = units.id                WHERE conv.item_id=test_items.id) AS conversions            FROM test_recipe_items items            LEFT JOIN test_items ON items.item_id = test_items.id            LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id            LEFT JOIN units ON units.id = COALESCE(test_item_info.uom, items.uom)            WHERE items.rp_id = (SELECT passed_id FROM passed_id)            ORDER BY items.item_name ASC        )SELECT (SELECT passed_id FROM passed_id) AS passed_id,     test_recipes.*,     logins.username as author,     (SELECT COALESCE(array_agg(row_to_json(ris)), '{}') FROM cte_recipe_items ris) AS recipe_itemsFROM test_recipesJOIN logins ON test_recipes.author = logins.idWHERE test_recipes.id=(SELECT passed_id FROM passed_id)')
2025-04-12 19:03:21.792399 --- ERROR --- DatabaseError(message='subquery must return only one columnLINE 9:             (SELECT COALESCE(array_agg(conv), '{}'), COALESC...                    ^',
                                         payload=(1,),
                                         sql='WITH passed_id AS (SELECT %s AS passed_id),    cte_recipe_items AS (            SELECT items.*,            COALESCE(test_items.barcode, items.uuid) AS uuid,            COALESCE(test_item_info.uom, items.uom) AS uom,            COALESCE(test_items.item_name, items.item_name) AS item_name,            COALESCE(test_items.links, items.links) AS links,            row_to_json(units.*) as uom,            (SELECT COALESCE(array_agg(conv), '{}'), COALESCE(array_agg(units.*), '{}') FROM test_conversions conv                 JOIN units ON conv.uom_id = units.id                WHERE conv.item_id=test_items.id) AS conversions            FROM test_recipe_items items            LEFT JOIN test_items ON items.item_id = test_items.id            LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id            LEFT JOIN units ON units.id = COALESCE(test_item_info.uom, items.uom)            WHERE items.rp_id = (SELECT passed_id FROM passed_id)            ORDER BY items.item_name ASC        )SELECT (SELECT passed_id FROM passed_id) AS passed_id,     test_recipes.*,     logins.username as author,     (SELECT COALESCE(array_agg(row_to_json(ris)), '{}') FROM cte_recipe_items ris) AS recipe_itemsFROM test_recipesJOIN logins ON test_recipes.author = logins.idWHERE test_recipes.id=(SELECT passed_id FROM passed_id)')
2025-04-12 19:03:28.192710 --- ERROR --- DatabaseError(message='subquery must return only one columnLINE 9:             (SELECT COALESCE(array_agg(conv), '{}'), COALESC...                    ^',
                                         payload=(1,),
                                         sql='WITH passed_id AS (SELECT %s AS passed_id),    cte_recipe_items AS (            SELECT items.*,            COALESCE(test_items.barcode, items.uuid) AS uuid,            COALESCE(test_item_info.uom, items.uom) AS uom,            COALESCE(test_items.item_name, items.item_name) AS item_name,            COALESCE(test_items.links, items.links) AS links,            row_to_json(units.*) as uom,            (SELECT COALESCE(array_agg(conv), '{}'), COALESCE(array_agg(units), '{}') FROM test_conversions conv                 JOIN units ON conv.uom_id = units.id                WHERE conv.item_id=test_items.id) AS conversions            FROM test_recipe_items items            LEFT JOIN test_items ON items.item_id = test_items.id            LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id            LEFT JOIN units ON units.id = COALESCE(test_item_info.uom, items.uom)            WHERE items.rp_id = (SELECT passed_id FROM passed_id)            ORDER BY items.item_name ASC        )SELECT (SELECT passed_id FROM passed_id) AS passed_id,     test_recipes.*,     logins.username as author,     (SELECT COALESCE(array_agg(row_to_json(ris)), '{}') FROM cte_recipe_items ris) AS recipe_itemsFROM test_recipesJOIN logins ON test_recipes.author = logins.idWHERE test_recipes.id=(SELECT passed_id FROM passed_id)')
2025-04-12 19:05:06.060302 --- ERROR --- DatabaseError(message='function row_to_json(test_conversions, units) does not existLINE 9:              (SELECT COALESCE(array_agg(row_to_json(conv, un...                                                ^HINT:  No function matches the given name and argument types. You might need to add explicit type casts.',
                                         payload=(1,),
                                         sql='WITH passed_id AS (SELECT %s AS passed_id),    cte_recipe_items AS (            SELECT items.*,            COALESCE(test_items.barcode, items.uuid) AS uuid,            COALESCE(test_item_info.uom, items.uom) AS uom,            COALESCE(test_items.item_name, items.item_name) AS item_name,            COALESCE(test_items.links, items.links) AS links,            row_to_json(units.*) as uom,             (SELECT COALESCE(array_agg(row_to_json(conv, unit_conv.*)), '{}')                FROM test_conversions conv                LEFT JOIN units unit_conv ON conv.uom_id = unit_conv.id                WHERE conv.item_id=test_items.id) AS conversions            FROM test_recipe_items items            LEFT JOIN test_items ON items.item_id = test_items.id            LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id            LEFT JOIN units ON units.id = COALESCE(test_item_info.uom, items.uom)            WHERE items.rp_id = (SELECT passed_id FROM passed_id)            ORDER BY items.item_name ASC        )SELECT (SELECT passed_id FROM passed_id) AS passed_id,     test_recipes.*,     logins.username as author,     (SELECT COALESCE(array_agg(row_to_json(ris)), '{}') FROM cte_recipe_items ris) AS recipe_itemsFROM test_recipesJOIN logins ON test_recipes.author = logins.idWHERE test_recipes.id=(SELECT passed_id FROM passed_id)')
2025-04-12 19:06:11.616756 --- ERROR --- DatabaseError(message='subquery must return only one columnLINE 9:              (SELECT conv.*, unit_conv.*                     ^',
                                         payload=(1,),
                                         sql='WITH passed_id AS (SELECT %s AS passed_id),    cte_recipe_items AS (            SELECT items.*,            COALESCE(test_items.barcode, items.uuid) AS uuid,            COALESCE(test_item_info.uom, items.uom) AS uom,            COALESCE(test_items.item_name, items.item_name) AS item_name,            COALESCE(test_items.links, items.links) AS links,            row_to_json(units.*) as uom,             (SELECT conv.*, unit_conv.*                FROM test_conversions conv                LEFT JOIN units unit_conv ON conv.uom_id = unit_conv.id                WHERE conv.item_id=test_items.id) AS conversions            FROM test_recipe_items items            LEFT JOIN test_items ON items.item_id = test_items.id            LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id            LEFT JOIN units ON units.id = COALESCE(test_item_info.uom, items.uom)            WHERE items.rp_id = (SELECT passed_id FROM passed_id)            ORDER BY items.item_name ASC        )SELECT (SELECT passed_id FROM passed_id) AS passed_id,     test_recipes.*,     logins.username as author,     (SELECT COALESCE(array_agg(row_to_json(ris)), '{}') FROM cte_recipe_items ris) AS recipe_itemsFROM test_recipesJOIN logins ON test_recipes.author = logins.idWHERE test_recipes.id=(SELECT passed_id FROM passed_id)')
2025-04-12 19:06:23.233789 --- ERROR --- DatabaseError(message='function array_agg(test_conversions, units) does not existLINE 9:             (SELECT array_agg(conv.*, unit_conv.*)                            ^HINT:  No function matches the given name and argument types. You might need to add explicit type casts.',
                                         payload=(1,),
                                         sql='WITH passed_id AS (SELECT %s AS passed_id),    cte_recipe_items AS (            SELECT items.*,            COALESCE(test_items.barcode, items.uuid) AS uuid,            COALESCE(test_item_info.uom, items.uom) AS uom,            COALESCE(test_items.item_name, items.item_name) AS item_name,            COALESCE(test_items.links, items.links) AS links,            row_to_json(units.*) as uom,            (SELECT array_agg(conv.*, unit_conv.*)                FROM test_conversions conv                LEFT JOIN units unit_conv ON conv.uom_id = unit_conv.id                WHERE conv.item_id=test_items.id) AS conversions            FROM test_recipe_items items            LEFT JOIN test_items ON items.item_id = test_items.id            LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id            LEFT JOIN units ON units.id = COALESCE(test_item_info.uom, items.uom)            WHERE items.rp_id = (SELECT passed_id FROM passed_id)            ORDER BY items.item_name ASC        )SELECT (SELECT passed_id FROM passed_id) AS passed_id,     test_recipes.*,     logins.username as author,     (SELECT COALESCE(array_agg(row_to_json(ris)), '{}') FROM cte_recipe_items ris) AS recipe_itemsFROM test_recipesJOIN logins ON test_recipes.author = logins.idWHERE test_recipes.id=(SELECT passed_id FROM passed_id)')
2025-04-12 19:06:46.193165 --- ERROR --- DatabaseError(message='missing FROM-clause entry for table "unit_conv"LINE 9:             (SELECT array_agg(conv.*, unit_conv.*)                                              ^',
                                         payload=(1,),
                                         sql='WITH passed_id AS (SELECT %s AS passed_id),    cte_recipe_items AS (            SELECT items.*,            COALESCE(test_items.barcode, items.uuid) AS uuid,            COALESCE(test_item_info.uom, items.uom) AS uom,            COALESCE(test_items.item_name, items.item_name) AS item_name,            COALESCE(test_items.links, items.links) AS links,            row_to_json(units.*) as uom,            (SELECT array_agg(conv.*, unit_conv.*)                FROM test_conversions conv                LEFT JOIN units ON conv.uom_id = units.id                WHERE conv.item_id=test_items.id) AS conversions            FROM test_recipe_items items            LEFT JOIN test_items ON items.item_id = test_items.id            LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id            LEFT JOIN units ON units.id = COALESCE(test_item_info.uom, items.uom)            WHERE items.rp_id = (SELECT passed_id FROM passed_id)            ORDER BY items.item_name ASC        )SELECT (SELECT passed_id FROM passed_id) AS passed_id,     test_recipes.*,     logins.username as author,     (SELECT COALESCE(array_agg(row_to_json(ris)), '{}') FROM cte_recipe_items ris) AS recipe_itemsFROM test_recipesJOIN logins ON test_recipes.author = logins.idWHERE test_recipes.id=(SELECT passed_id FROM passed_id)')
2025-04-12 19:07:04.030707 --- ERROR --- DatabaseError(message='function row_to_json(test_conversions, units) does not existLINE 9:             (SELECT row_to_json(conv.*, units.*)                            ^HINT:  No function matches the given name and argument types. You might need to add explicit type casts.',
                                         payload=(1,),
                                         sql='WITH passed_id AS (SELECT %s AS passed_id),    cte_recipe_items AS (            SELECT items.*,            COALESCE(test_items.barcode, items.uuid) AS uuid,            COALESCE(test_item_info.uom, items.uom) AS uom,            COALESCE(test_items.item_name, items.item_name) AS item_name,            COALESCE(test_items.links, items.links) AS links,            row_to_json(units.*) as uom,            (SELECT row_to_json(conv.*, units.*)                FROM test_conversions conv                LEFT JOIN units ON conv.uom_id = units.id                WHERE conv.item_id=test_items.id) AS conversions            FROM test_recipe_items items            LEFT JOIN test_items ON items.item_id = test_items.id            LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id            LEFT JOIN units ON units.id = COALESCE(test_item_info.uom, items.uom)            WHERE items.rp_id = (SELECT passed_id FROM passed_id)            ORDER BY items.item_name ASC        )SELECT (SELECT passed_id FROM passed_id) AS passed_id,     test_recipes.*,     logins.username as author,     (SELECT COALESCE(array_agg(row_to_json(ris)), '{}') FROM cte_recipe_items ris) AS recipe_itemsFROM test_recipesJOIN logins ON test_recipes.author = logins.idWHERE test_recipes.id=(SELECT passed_id FROM passed_id)')
2025-04-12 19:07:34.817799 --- ERROR --- DatabaseError(message='subquery must return only one columnLINE 9:             (SELECT row_to_json(conv), row_to_json(units)                    ^',
                                         payload=(1,),
                                         sql='WITH passed_id AS (SELECT %s AS passed_id),    cte_recipe_items AS (            SELECT items.*,            COALESCE(test_items.barcode, items.uuid) AS uuid,            COALESCE(test_item_info.uom, items.uom) AS uom,            COALESCE(test_items.item_name, items.item_name) AS item_name,            COALESCE(test_items.links, items.links) AS links,            row_to_json(units.*) as uom,            (SELECT row_to_json(conv), row_to_json(units)                FROM test_conversions conv                LEFT JOIN units ON conv.uom_id = units.id                WHERE conv.item_id=test_items.id) AS conversions            FROM test_recipe_items items            LEFT JOIN test_items ON items.item_id = test_items.id            LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id            LEFT JOIN units ON units.id = COALESCE(test_item_info.uom, items.uom)            WHERE items.rp_id = (SELECT passed_id FROM passed_id)            ORDER BY items.item_name ASC        )SELECT (SELECT passed_id FROM passed_id) AS passed_id,     test_recipes.*,     logins.username as author,     (SELECT COALESCE(array_agg(row_to_json(ris)), '{}') FROM cte_recipe_items ris) AS recipe_itemsFROM test_recipesJOIN logins ON test_recipes.author = logins.idWHERE test_recipes.id=(SELECT passed_id FROM passed_id)')
2025-04-12 19:07:58.995085 --- ERROR --- DatabaseError(message='syntax error at or near "AS"LINE 12:                 WHERE conv.item_id=test_items.id) AS convers...                                                           ^',
                                         payload=(1,),
                                         sql='WITH passed_id AS (SELECT %s AS passed_id),    cte_recipe_items AS (            SELECT items.*,            COALESCE(test_items.barcode, items.uuid) AS uuid,            COALESCE(test_item_info.uom, items.uom) AS uom,            COALESCE(test_items.item_name, items.item_name) AS item_name,            COALESCE(test_items.links, items.links) AS links,            row_to_json(units.*) as uom,             (SELECT COALESCE(array_agg(conv)), '{}')                FROM test_conversions conv                LEFT JOIN units unit_conv ON conv.uom_id = unit_conv.id                WHERE conv.item_id=test_items.id) AS conversions            FROM test_recipe_items items            LEFT JOIN test_items ON items.item_id = test_items.id            LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id            LEFT JOIN units ON units.id = COALESCE(test_item_info.uom, items.uom)            WHERE items.rp_id = (SELECT passed_id FROM passed_id)            ORDER BY items.item_name ASC        )SELECT (SELECT passed_id FROM passed_id) AS passed_id,     test_recipes.*,     logins.username as author,     (SELECT COALESCE(array_agg(row_to_json(ris)), '{}') FROM cte_recipe_items ris) AS recipe_itemsFROM test_recipesJOIN logins ON test_recipes.author = logins.idWHERE test_recipes.id=(SELECT passed_id FROM passed_id)')
2025-04-12 19:09:20.023644 --- ERROR --- DatabaseError(message='function array_agg() does not existLINE 9:             (SELECT COALESCE(array_agg(*), '{}') FROM test_c...                                     ^HINT:  No function matches the given name and argument types. You might need to add explicit type casts.',
                                         payload=(1,),
                                         sql='WITH passed_id AS (SELECT %s AS passed_id),    cte_recipe_items AS (            SELECT items.*,            COALESCE(test_items.barcode, items.uuid) AS uuid,            COALESCE(test_item_info.uom, items.uom) AS uom,            COALESCE(test_items.item_name, items.item_name) AS item_name,            COALESCE(test_items.links, items.links) AS links,            row_to_json(units.*) as uom,            (SELECT COALESCE(array_agg(*), '{}') FROM test_conversions conv                 LEFT JOIN units ON conv.uom_id = units.id                WHERE conv.item_id=test_items.id) AS conversions            FROM test_recipe_items items            LEFT JOIN test_items ON items.item_id = test_items.id            LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id            LEFT JOIN units ON units.id = COALESCE(test_item_info.uom, items.uom)            WHERE items.rp_id = (SELECT passed_id FROM passed_id)            ORDER BY items.item_name ASC        )SELECT (SELECT passed_id FROM passed_id) AS passed_id,     test_recipes.*,     logins.username as author,     (SELECT COALESCE(array_agg(row_to_json(ris)), '{}') FROM cte_recipe_items ris) AS recipe_itemsFROM test_recipesJOIN logins ON test_recipes.author = logins.idWHERE test_recipes.id=(SELECT passed_id FROM passed_id)')
2025-04-12 19:10:15.749310 --- ERROR --- DatabaseError(message='operator does not exist: json || jsonLINE 9: ...     (SELECT COALESCE(array_agg(row_to_json(conv) || json_bu...                                                             ^HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.',
                                         payload=(1,),
                                         sql='WITH passed_id AS (SELECT %s AS passed_id),    cte_recipe_items AS (            SELECT items.*,            COALESCE(test_items.barcode, items.uuid) AS uuid,            COALESCE(test_item_info.uom, items.uom) AS uom,            COALESCE(test_items.item_name, items.item_name) AS item_name,            COALESCE(test_items.links, items.links) AS links,            row_to_json(units.*) as uom,            (SELECT COALESCE(array_agg(row_to_json(conv) || json_build_object('unit', row_to_json(units))), '{}') FROM test_conversions conv  LEFT JOIN units ON conv.uom_id = units.id WHERE conv.item_id = test_items.id) AS conversions            FROM test_recipe_items items            LEFT JOIN test_items ON items.item_id = test_items.id            LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id            LEFT JOIN units ON units.id = COALESCE(test_item_info.uom, items.uom)            WHERE items.rp_id = (SELECT passed_id FROM passed_id)            ORDER BY items.item_name ASC        )SELECT (SELECT passed_id FROM passed_id) AS passed_id,     test_recipes.*,     logins.username as author,     (SELECT COALESCE(array_agg(row_to_json(ris)), '{}') FROM cte_recipe_items ris) AS recipe_itemsFROM test_recipesJOIN logins ON test_recipes.author = logins.idWHERE test_recipes.id=(SELECT passed_id FROM passed_id)')
2025-04-12 19:15:01.594053 --- ERROR --- DatabaseError(message='function row_to_json(integer) does not existLINE 5:             row_to_json(test_item_info.uom) AS item_uom,                    ^HINT:  No function matches the given name and argument types. You might need to add explicit type casts.',
                                         payload=(1,),
                                         sql='WITH passed_id AS (SELECT %s AS passed_id),    cte_recipe_items AS (            SELECT items.*,            COALESCE(test_items.barcode, items.uuid) AS uuid,            row_to_json(test_item_info.uom) AS item_uom,            COALESCE(test_items.item_name, items.item_name) AS item_name,            COALESCE(test_items.links, items.links) AS links,            row_to_json(units.*) as uom,            (SELECT COALESCE(array_agg(jsonb_build_object('conversion', conv, 'unit', units)), '{}')                FROM test_conversions conv                LEFT JOIN units ON conv.uom_id = units.id                WHERE conv.item_id = test_items.id) AS conversions            FROM test_recipe_items items            LEFT JOIN test_items ON items.item_id = test_items.id            LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id            LEFT JOIN units ON units.id = COALESCE(test_item_info.uom, items.uom)            WHERE items.rp_id = (SELECT passed_id FROM passed_id)            ORDER BY items.item_name ASC        )SELECT (SELECT passed_id FROM passed_id) AS passed_id,     test_recipes.*,     logins.username as author,     (SELECT COALESCE(array_agg(row_to_json(ris)), '{}') FROM cte_recipe_items ris) AS recipe_itemsFROM test_recipesJOIN logins ON test_recipes.author = logins.idWHERE test_recipes.id=(SELECT passed_id FROM passed_id)')
2025-04-12 19:17:41.975720 --- ERROR --- DatabaseError(message='malformed record literal: "{}"LINE 5:             (SELECT COALESCE(units, '{}') FROM units WHERE u...                                            ^DETAIL:  Missing left parenthesis.',
                                         payload=(1,),
                                         sql='WITH passed_id AS (SELECT %s AS passed_id),    cte_recipe_items AS (            SELECT items.*,            COALESCE(test_items.barcode, items.uuid) AS uuid,            (SELECT COALESCE(units, '{}') FROM units WHERE units.id=test_item_info.uom) AS item_uom,            COALESCE(test_items.item_name, items.item_name) AS item_name,            COALESCE(test_items.links, items.links) AS links,            row_to_json(units.*) as uom,            (SELECT COALESCE(array_agg(jsonb_build_object('conversion', conv, 'unit', units)), '{}')                FROM test_conversions conv                LEFT JOIN units ON conv.uom_id = units.id                WHERE conv.item_id = test_items.id) AS conversions            FROM test_recipe_items items            LEFT JOIN test_items ON items.item_id = test_items.id            LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id            LEFT JOIN units ON units.id = COALESCE(test_item_info.uom, items.uom)            WHERE items.rp_id = (SELECT passed_id FROM passed_id)            ORDER BY items.item_name ASC        )SELECT (SELECT passed_id FROM passed_id) AS passed_id,     test_recipes.*,     logins.username as author,     (SELECT COALESCE(array_agg(row_to_json(ris)), '{}') FROM cte_recipe_items ris) AS recipe_itemsFROM test_recipesJOIN logins ON test_recipes.author = logins.idWHERE test_recipes.id=(SELECT passed_id FROM passed_id)')
2025-04-12 19:18:35.753325 --- ERROR --- DatabaseError(message='cannot cast type units to jsonbLINE 5:             (SELECT COALESCE(units::jsonb, '{}'::jsonb) FROM...                                          ^',
                                         payload=(1,),
                                         sql='WITH passed_id AS (SELECT %s AS passed_id),    cte_recipe_items AS (            SELECT items.*,            COALESCE(test_items.barcode, items.uuid) AS uuid,            (SELECT COALESCE(units::jsonb, '{}'::jsonb) FROM units WHERE units.id=test_item_info.uom) AS item_uom,            COALESCE(test_items.item_name, items.item_name) AS item_name,            COALESCE(test_items.links, items.links) AS links,            row_to_json(units.*) as uom,            (SELECT COALESCE(array_agg(jsonb_build_object('conversion', conv, 'unit', units)), '{}')                FROM test_conversions conv                LEFT JOIN units ON conv.uom_id = units.id                WHERE conv.item_id = test_items.id) AS conversions            FROM test_recipe_items items            LEFT JOIN test_items ON items.item_id = test_items.id            LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id            LEFT JOIN units ON units.id = COALESCE(test_item_info.uom, items.uom)            WHERE items.rp_id = (SELECT passed_id FROM passed_id)            ORDER BY items.item_name ASC        )SELECT (SELECT passed_id FROM passed_id) AS passed_id,     test_recipes.*,     logins.username as author,     (SELECT COALESCE(array_agg(row_to_json(ris)), '{}') FROM cte_recipe_items ris) AS recipe_itemsFROM test_recipesJOIN logins ON test_recipes.author = logins.idWHERE test_recipes.id=(SELECT passed_id FROM passed_id)')
2025-04-12 19:18:44.421031 --- ERROR --- DatabaseError(message='COALESCE types units and jsonb cannot be matchedLINE 5:             (SELECT COALESCE(units, '{}'::jsonb) FROM units ...                                            ^',
                                         payload=(1,),
                                         sql='WITH passed_id AS (SELECT %s AS passed_id),    cte_recipe_items AS (            SELECT items.*,            COALESCE(test_items.barcode, items.uuid) AS uuid,            (SELECT COALESCE(units, '{}'::jsonb) FROM units WHERE units.id=test_item_info.uom) AS item_uom,            COALESCE(test_items.item_name, items.item_name) AS item_name,            COALESCE(test_items.links, items.links) AS links,            row_to_json(units.*) as uom,            (SELECT COALESCE(array_agg(jsonb_build_object('conversion', conv, 'unit', units)), '{}')                FROM test_conversions conv                LEFT JOIN units ON conv.uom_id = units.id                WHERE conv.item_id = test_items.id) AS conversions            FROM test_recipe_items items            LEFT JOIN test_items ON items.item_id = test_items.id            LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id            LEFT JOIN units ON units.id = COALESCE(test_item_info.uom, items.uom)            WHERE items.rp_id = (SELECT passed_id FROM passed_id)            ORDER BY items.item_name ASC        )SELECT (SELECT passed_id FROM passed_id) AS passed_id,     test_recipes.*,     logins.username as author,     (SELECT COALESCE(array_agg(row_to_json(ris)), '{}') FROM cte_recipe_items ris) AS recipe_itemsFROM test_recipesJOIN logins ON test_recipes.author = logins.idWHERE test_recipes.id=(SELECT passed_id FROM passed_id)')
2025-04-12 19:18:55.989049 --- ERROR --- DatabaseError(message='COALESCE could not convert type jsonb to jsonLINE 5:             (SELECT COALESCE(row_to_json(units), '{}'::jsonb...                                                         ^',
                                         payload=(1,),
                                         sql='WITH passed_id AS (SELECT %s AS passed_id),    cte_recipe_items AS (            SELECT items.*,            COALESCE(test_items.barcode, items.uuid) AS uuid,            (SELECT COALESCE(row_to_json(units), '{}'::jsonb) FROM units WHERE units.id=test_item_info.uom) AS item_uom,            COALESCE(test_items.item_name, items.item_name) AS item_name,            COALESCE(test_items.links, items.links) AS links,            row_to_json(units.*) as uom,            (SELECT COALESCE(array_agg(jsonb_build_object('conversion', conv, 'unit', units)), '{}')                FROM test_conversions conv                LEFT JOIN units ON conv.uom_id = units.id                WHERE conv.item_id = test_items.id) AS conversions            FROM test_recipe_items items            LEFT JOIN test_items ON items.item_id = test_items.id            LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id            LEFT JOIN units ON units.id = COALESCE(test_item_info.uom, items.uom)            WHERE items.rp_id = (SELECT passed_id FROM passed_id)            ORDER BY items.item_name ASC        )SELECT (SELECT passed_id FROM passed_id) AS passed_id,     test_recipes.*,     logins.username as author,     (SELECT COALESCE(array_agg(row_to_json(ris)), '{}') FROM cte_recipe_items ris) AS recipe_itemsFROM test_recipesJOIN logins ON test_recipes.author = logins.idWHERE test_recipes.id=(SELECT passed_id FROM passed_id)')
2025-04-12 19:19:07.610999 --- ERROR --- DatabaseError(message='function row_to_jsonb(units) does not existLINE 5:             (SELECT COALESCE(row_to_jsonb(units), '{}'::json...                                     ^HINT:  No function matches the given name and argument types. You might need to add explicit type casts.',
                                         payload=(1,),
                                         sql='WITH passed_id AS (SELECT %s AS passed_id),    cte_recipe_items AS (            SELECT items.*,            COALESCE(test_items.barcode, items.uuid) AS uuid,            (SELECT COALESCE(row_to_jsonb(units), '{}'::jsonb) FROM units WHERE units.id=test_item_info.uom) AS item_uom,            COALESCE(test_items.item_name, items.item_name) AS item_name,            COALESCE(test_items.links, items.links) AS links,            row_to_json(units.*) as uom,            (SELECT COALESCE(array_agg(jsonb_build_object('conversion', conv, 'unit', units)), '{}')                FROM test_conversions conv                LEFT JOIN units ON conv.uom_id = units.id                WHERE conv.item_id = test_items.id) AS conversions            FROM test_recipe_items items            LEFT JOIN test_items ON items.item_id = test_items.id            LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id            LEFT JOIN units ON units.id = COALESCE(test_item_info.uom, items.uom)            WHERE items.rp_id = (SELECT passed_id FROM passed_id)            ORDER BY items.item_name ASC        )SELECT (SELECT passed_id FROM passed_id) AS passed_id,     test_recipes.*,     logins.username as author,     (SELECT COALESCE(array_agg(row_to_json(ris)), '{}') FROM cte_recipe_items ris) AS recipe_itemsFROM test_recipesJOIN logins ON test_recipes.author = logins.idWHERE test_recipes.id=(SELECT passed_id FROM passed_id)')
2025-04-12 19:19:30.854594 --- ERROR --- DatabaseError(message='COALESCE types units and jsonb cannot be matchedLINE 5:             (SELECT COALESCE(units, '{}'::jsonb) FROM units ...                                            ^',
                                         payload=(1,),
                                         sql='WITH passed_id AS (SELECT %s AS passed_id),    cte_recipe_items AS (            SELECT items.*,            COALESCE(test_items.barcode, items.uuid) AS uuid,            (SELECT COALESCE(units, '{}'::jsonb) FROM units WHERE units.id=test_item_info.uom) AS item_uom,            COALESCE(test_items.item_name, items.item_name) AS item_name,            COALESCE(test_items.links, items.links) AS links,            row_to_json(units.*) as uom,            (SELECT COALESCE(array_agg(jsonb_build_object('conversion', conv, 'unit', units)), '{}')                FROM test_conversions conv                LEFT JOIN units ON conv.uom_id = units.id                WHERE conv.item_id = test_items.id) AS conversions            FROM test_recipe_items items            LEFT JOIN test_items ON items.item_id = test_items.id            LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id            LEFT JOIN units ON units.id = COALESCE(test_item_info.uom, items.uom)            WHERE items.rp_id = (SELECT passed_id FROM passed_id)            ORDER BY items.item_name ASC        )SELECT (SELECT passed_id FROM passed_id) AS passed_id,     test_recipes.*,     logins.username as author,     (SELECT COALESCE(array_agg(row_to_json(ris)), '{}') FROM cte_recipe_items ris) AS recipe_itemsFROM test_recipesJOIN logins ON test_recipes.author = logins.idWHERE test_recipes.id=(SELECT passed_id FROM passed_id)')
2025-04-12 19:19:42.083075 --- ERROR --- DatabaseError(message='COALESCE types units[] and jsonb cannot be matchedLINE 5:             (SELECT COALESCE(array_agg(units), '{}'::jsonb) ...                                                       ^',
                                         payload=(1,),
                                         sql='WITH passed_id AS (SELECT %s AS passed_id),    cte_recipe_items AS (            SELECT items.*,            COALESCE(test_items.barcode, items.uuid) AS uuid,            (SELECT COALESCE(array_agg(units), '{}'::jsonb) FROM units WHERE units.id=test_item_info.uom) AS item_uom,            COALESCE(test_items.item_name, items.item_name) AS item_name,            COALESCE(test_items.links, items.links) AS links,            row_to_json(units.*) as uom,            (SELECT COALESCE(array_agg(jsonb_build_object('conversion', conv, 'unit', units)), '{}')                FROM test_conversions conv                LEFT JOIN units ON conv.uom_id = units.id                WHERE conv.item_id = test_items.id) AS conversions            FROM test_recipe_items items            LEFT JOIN test_items ON items.item_id = test_items.id            LEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.id            LEFT JOIN units ON units.id = COALESCE(test_item_info.uom, items.uom)            WHERE items.rp_id = (SELECT passed_id FROM passed_id)            ORDER BY items.item_name ASC        )SELECT (SELECT passed_id FROM passed_id) AS passed_id,     test_recipes.*,     logins.username as author,     (SELECT COALESCE(array_agg(row_to_json(ris)), '{}') FROM cte_recipe_items ris) AS recipe_itemsFROM test_recipesJOIN logins ON test_recipes.author = logins.idWHERE test_recipes.id=(SELECT passed_id FROM passed_id)')
2025-04-12 19:41:28.073518 --- ERROR --- DatabaseError(message='can't adapt type 'dict'',
                                         payload=('%024600017008%', 1, 'sku', 'Kosher salt', {'id': 1, 'plural': 'pinches', 'single': ' pinch', 'fullname': ' Pinch', 'description': ' Less than 1/8 teaspoon.'}, 1.0, 141, '{}'),
                                         sql='INSERT INTO main_recipe_items(uuid, rp_id, item_type, item_name, uom, qty, item_id, links) VALUES (%s, %s, %s, %s, %s, %s, %s, %s) RETURNING *;')
2025-04-12 19:41:29.705915 --- ERROR --- DatabaseError(message='can't adapt type 'dict'',
                                         payload=('%024600017008%', 1, 'sku', 'Kosher salt', {'id': 1, 'plural': 'pinches', 'single': ' pinch', 'fullname': ' Pinch', 'description': ' Less than 1/8 teaspoon.'}, 1.0, 141, '{}'),
                                         sql='INSERT INTO main_recipe_items(uuid, rp_id, item_type, item_name, uom, qty, item_id, links) VALUES (%s, %s, %s, %s, %s, %s, %s, %s) RETURNING *;')
2025-04-12 19:41:30.665242 --- ERROR --- DatabaseError(message='can't adapt type 'dict'',
                                         payload=('%024600017008%', 1, 'sku', 'Kosher salt', {'id': 1, 'plural': 'pinches', 'single': ' pinch', 'fullname': ' Pinch', 'description': ' Less than 1/8 teaspoon.'}, 1.0, 141, '{}'),
                                         sql='INSERT INTO main_recipe_items(uuid, rp_id, item_type, item_name, uom, qty, item_id, links) VALUES (%s, %s, %s, %s, %s, %s, %s, %s) RETURNING *;')
2025-04-12 19:41:30.856239 --- ERROR --- DatabaseError(message='can't adapt type 'dict'',
                                         payload=('%024600017008%', 1, 'sku', 'Kosher salt', {'id': 1, 'plural': 'pinches', 'single': ' pinch', 'fullname': ' Pinch', 'description': ' Less than 1/8 teaspoon.'}, 1.0, 141, '{}'),
                                         sql='INSERT INTO main_recipe_items(uuid, rp_id, item_type, item_name, uom, qty, item_id, links) VALUES (%s, %s, %s, %s, %s, %s, %s, %s) RETURNING *;')
2025-04-12 19:41:32.196396 --- ERROR --- DatabaseError(message='can't adapt type 'dict'',
                                         payload=('%024600017008%', 1, 'sku', 'Kosher salt', {'id': 1, 'plural': 'pinches', 'single': ' pinch', 'fullname': ' Pinch', 'description': ' Less than 1/8 teaspoon.'}, 1.0, 141, '{}'),
                                         sql='INSERT INTO main_recipe_items(uuid, rp_id, item_type, item_name, uom, qty, item_id, links) VALUES (%s, %s, %s, %s, %s, %s, %s, %s) RETURNING *;')
2025-04-12 19:41:32.490794 --- ERROR --- DatabaseError(message='can't adapt type 'dict'',
                                         payload=('%024600017008%', 1, 'sku', 'Kosher salt', {'id': 1, 'plural': 'pinches', 'single': ' pinch', 'fullname': ' Pinch', 'description': ' Less than 1/8 teaspoon.'}, 1.0, 141, '{}'),
                                         sql='INSERT INTO main_recipe_items(uuid, rp_id, item_type, item_name, uom, qty, item_id, links) VALUES (%s, %s, %s, %s, %s, %s, %s, %s) RETURNING *;')
2025-04-12 19:41:32.801129 --- ERROR --- DatabaseError(message='can't adapt type 'dict'',
                                         payload=('%024600017008%', 1, 'sku', 'Kosher salt', {'id': 1, 'plural': 'pinches', 'single': ' pinch', 'fullname': ' Pinch', 'description': ' Less than 1/8 teaspoon.'}, 1.0, 141, '{}'),
                                         sql='INSERT INTO main_recipe_items(uuid, rp_id, item_type, item_name, uom, qty, item_id, links) VALUES (%s, %s, %s, %s, %s, %s, %s, %s) RETURNING *;')
2025-04-12 19:41:33.025698 --- ERROR --- DatabaseError(message='can't adapt type 'dict'',
                                         payload=('%024600017008%', 1, 'sku', 'Kosher salt', {'id': 1, 'plural': 'pinches', 'single': ' pinch', 'fullname': ' Pinch', 'description': ' Less than 1/8 teaspoon.'}, 1.0, 141, '{}'),
                                         sql='INSERT INTO main_recipe_items(uuid, rp_id, item_type, item_name, uom, qty, item_id, links) VALUES (%s, %s, %s, %s, %s, %s, %s, %s) RETURNING *;')
2025-04-12 19:41:33.378933 --- ERROR --- DatabaseError(message='can't adapt type 'dict'',
                                         payload=('%024600017008%', 1, 'sku', 'Kosher salt', {'id': 1, 'plural': 'pinches', 'single': ' pinch', 'fullname': ' Pinch', 'description': ' Less than 1/8 teaspoon.'}, 1.0, 141, '{}'),
                                         sql='INSERT INTO main_recipe_items(uuid, rp_id, item_type, item_name, uom, qty, item_id, links) VALUES (%s, %s, %s, %s, %s, %s, %s, %s) RETURNING *;')
2025-04-12 19:41:33.548775 --- ERROR --- DatabaseError(message='can't adapt type 'dict'',
                                         payload=('%024600017008%', 1, 'sku', 'Kosher salt', {'id': 1, 'plural': 'pinches', 'single': ' pinch', 'fullname': ' Pinch', 'description': ' Less than 1/8 teaspoon.'}, 1.0, 141, '{}'),
                                         sql='INSERT INTO main_recipe_items(uuid, rp_id, item_type, item_name, uom, qty, item_id, links) VALUES (%s, %s, %s, %s, %s, %s, %s, %s) RETURNING *;')
2025-04-12 19:41:33.707772 --- ERROR --- DatabaseError(message='can't adapt type 'dict'',
                                         payload=('%024600017008%', 1, 'sku', 'Kosher salt', {'id': 1, 'plural': 'pinches', 'single': ' pinch', 'fullname': ' Pinch', 'description': ' Less than 1/8 teaspoon.'}, 1.0, 141, '{}'),
                                         sql='INSERT INTO main_recipe_items(uuid, rp_id, item_type, item_name, uom, qty, item_id, links) VALUES (%s, %s, %s, %s, %s, %s, %s, %s) RETURNING *;')
2025-04-12 19:41:33.860014 --- ERROR --- DatabaseError(message='can't adapt type 'dict'',
                                         payload=('%024600017008%', 1, 'sku', 'Kosher salt', {'id': 1, 'plural': 'pinches', 'single': ' pinch', 'fullname': ' Pinch', 'description': ' Less than 1/8 teaspoon.'}, 1.0, 141, '{}'),
                                         sql='INSERT INTO main_recipe_items(uuid, rp_id, item_type, item_name, uom, qty, item_id, links) VALUES (%s, %s, %s, %s, %s, %s, %s, %s) RETURNING *;')
2025-04-12 19:41:34.045904 --- ERROR --- DatabaseError(message='can't adapt type 'dict'',
                                         payload=('%024600017008%', 1, 'sku', 'Kosher salt', {'id': 1, 'plural': 'pinches', 'single': ' pinch', 'fullname': ' Pinch', 'description': ' Less than 1/8 teaspoon.'}, 1.0, 141, '{}'),
                                         sql='INSERT INTO main_recipe_items(uuid, rp_id, item_type, item_name, uom, qty, item_id, links) VALUES (%s, %s, %s, %s, %s, %s, %s, %s) RETURNING *;')
2025-04-12 19:41:34.213021 --- ERROR --- DatabaseError(message='can't adapt type 'dict'',
                                         payload=('%024600017008%', 1, 'sku', 'Kosher salt', {'id': 1, 'plural': 'pinches', 'single': ' pinch', 'fullname': ' Pinch', 'description': ' Less than 1/8 teaspoon.'}, 1.0, 141, '{}'),
                                         sql='INSERT INTO main_recipe_items(uuid, rp_id, item_type, item_name, uom, qty, item_id, links) VALUES (%s, %s, %s, %s, %s, %s, %s, %s) RETURNING *;')
2025-04-12 19:41:34.384538 --- ERROR --- DatabaseError(message='can't adapt type 'dict'',
                                         payload=('%024600017008%', 1, 'sku', 'Kosher salt', {'id': 1, 'plural': 'pinches', 'single': ' pinch', 'fullname': ' Pinch', 'description': ' Less than 1/8 teaspoon.'}, 1.0, 141, '{}'),
                                         sql='INSERT INTO main_recipe_items(uuid, rp_id, item_type, item_name, uom, qty, item_id, links) VALUES (%s, %s, %s, %s, %s, %s, %s, %s) RETURNING *;')
2025-04-12 19:41:34.540850 --- ERROR --- DatabaseError(message='can't adapt type 'dict'',
                                         payload=('%024600017008%', 1, 'sku', 'Kosher salt', {'id': 1, 'plural': 'pinches', 'single': ' pinch', 'fullname': ' Pinch', 'description': ' Less than 1/8 teaspoon.'}, 1.0, 141, '{}'),
                                         sql='INSERT INTO main_recipe_items(uuid, rp_id, item_type, item_name, uom, qty, item_id, links) VALUES (%s, %s, %s, %s, %s, %s, %s, %s) RETURNING *;')
2025-04-12 19:42:38.639831 --- ERROR --- DatabaseError(message='can't adapt type 'dict'',
                                         payload=('%024600017008%', 1, 'sku', 'Kosher salt', {'id': 1, 'plural': 'pinches', 'single': ' pinch', 'fullname': ' Pinch', 'description': ' Less than 1/8 teaspoon.'}, 1.0, 141, '{}'),
                                         sql='INSERT INTO main_recipe_items(uuid, rp_id, item_type, item_name, uom, qty, item_id, links) VALUES (%s, %s, %s, %s, %s, %s, %s, %s) RETURNING *;')
2025-04-12 19:43:17.295673 --- ERROR --- DatabaseError(message='can't adapt type 'dict'',
                                         payload=('%024600017008%', 1, 'sku', 'Kosher salt', {'id': 1, 'plural': 'pinches', 'single': ' pinch', 'fullname': ' Pinch', 'description': ' Less than 1/8 teaspoon.'}, 1.0, 141, '{}'),
                                         sql='INSERT INTO main_recipe_items(uuid, rp_id, item_type, item_name, uom, qty, item_id, links) VALUES (%s, %s, %s, %s, %s, %s, %s, %s) RETURNING *;')
2025-04-12 19:43:45.390676 --- ERROR --- DatabaseError(message='can't adapt type 'dict'',
                                         payload=('%024600017008%', 1, 'sku', 'Kosher salt', {'id': 1, 'plural': 'pinches', 'single': ' pinch', 'fullname': ' Pinch', 'description': ' Less than 1/8 teaspoon.'}, 1.0, 141, '{}'),
                                         sql='INSERT INTO main_recipe_items(uuid, rp_id, item_type, item_name, uom, qty, item_id, links) VALUES (%s, %s, %s, %s, %s, %s, %s, %s) RETURNING *;')
2025-04-13 10:06:16.130857 --- ERROR --- DatabaseError(message='unsupported format character ';' (0x3b) at index 42',
                                         payload=(),
                                         sql='SELECT * FROM test_zones LIMIT %s OFFSET %;')
2025-04-17 08:07:14.828153 --- ERROR --- DatabaseError(message='invalid input syntax for type integer: "ShelfA"LINE 17:                                 @ShelfA', '6', 'ShelfA')                                                         ^',
                                         payload=('\n                                    \n                                        <option value="2">KITCHEN</option>\n                                    \n                                        <option value="3">CLOSETS</option>\n                                    \n                                        <option value="4">BEDROOM A</option>\n                                    \n                                        <option value="5">GARAGE</option>\n                                    \n                                        <option value="6">BookShelves</option>\n                                    \n                                        <option value="1">DEFAULT</option>\n                                    \n                                @ShelfA', '6', 'ShelfA'),
                                         sql='INSERT INTO test_zones(name, description, site_id) VALUES (%s, %s, %s) RETURNING *;')
2025-04-17 08:09:29.519938 --- ERROR --- DatabaseError(message='invalid input syntax for type integer: "ShelfA"LINE 17:                                 @ShelfA', '6', 'ShelfA')                                                         ^',
                                         payload=('\n                                    \n                                        <option value="2">KITCHEN</option>\n                                    \n                                        <option value="3">CLOSETS</option>\n                                    \n                                        <option value="4">BEDROOM A</option>\n                                    \n                                        <option value="5">GARAGE</option>\n                                    \n                                        <option value="6">BookShelves</option>\n                                    \n                                        <option value="1">DEFAULT</option>\n                                    \n                                @ShelfA', '6', 'ShelfA'),
                                         sql='INSERT INTO test_zones(name, description, site_id) VALUES (%s, %s, %s) RETURNING *;')
2025-04-17 08:12:23.901770 --- ERROR --- DatabaseError(message='value too long for type character varying(32)',
                                         payload=('\n                                    \n                                        <option value="2">KITCHEN</option>\n                                    \n                                        <option value="3">CLOSETS</option>\n                                    \n                                        <option value="4">BEDROOM A</option>\n                                    \n                                        <option value="5">GARAGE</option>\n                                    \n                                        <option value="6">BookShelves</option>\n                                    \n                                        <option value="1">DEFAULT</option>\n                                    \n                                ', 'test', 2),
                                         sql='INSERT INTO test_zones(name, description, site_id) VALUES (%s, %s, %s) RETURNING *;')
2025-04-17 08:13:11.019738 --- ERROR --- DatabaseError(message='value too long for type character varying(32)',
                                         payload=('\n                                    \n                                        <option value="2">KITCHEN</option>\n                                    \n                                        <option value="3">CLOSETS</option>\n                                    \n                                        <option value="4">BEDROOM A</option>\n                                    \n                                        <option value="5">GARAGE</option>\n                                    \n                                        <option value="6">BookShelves</option>\n                                    \n                                        <option value="1">DEFAULT</option>\n                                    \n                                ', 'test', 2),
                                         sql='INSERT INTO test_zones(name, description, site_id) VALUES (%s, %s, %s) RETURNING *;')
2025-04-17 08:15:02.629959 --- ERROR --- DatabaseError(message='duplicate key value violates unique constraint "test_zones_name_key"DETAIL:  Key (name)=(KITCHEN) already exists.',
                                         payload=('KITCHEN', 'test', 2),
                                         sql='INSERT INTO test_zones(name, description, site_id) VALUES (%s, %s, %s) RETURNING *;')
2025-04-17 08:16:00.387539 --- ERROR --- DatabaseError(message='insert or update on table "test_zones" violates foreign key constraint "fk_site"DETAIL:  Key (site_id)=(2) is not present in table "sites".',
                                         payload=('KITCHEN@test', 'test', 2),
                                         sql='INSERT INTO test_zones(name, description, site_id) VALUES (%s, %s, %s) RETURNING *;')
2025-04-17 08:16:53.559749 --- ERROR --- DatabaseError(message='insert or update on table "test_zones" violates foreign key constraint "fk_site"DETAIL:  Key (site_id)=(2) is not present in table "sites".',
                                         payload=('KITCHEN@Fridge', 'Fridge', 2),
                                         sql='INSERT INTO test_zones(name, description, site_id) VALUES (%s, %s, %s) RETURNING *;')
2025-04-17 13:33:53.682228 --- ERROR --- DatabaseError(message='tuple index out of range',
                                         payload=(),
                                         sql='INSERT INTO test_locations(uuid, name, zone_id) VALUES (%s, %s, %s) RETURNING *;')
2025-04-17 17:35:40.178418 --- ERROR --- DatabaseError(message='syntax error at or near "20"LINE 1: WITH 20 AS passed_id,             ^',
                                         payload=(20, 20, 0),
                                         sql='WITH %s AS passed_id,    cte_item_locations AS (        SELECT DISTINCT ils.zone_id FROM test_item_locations ils        WHERE ils.part_id = passed_id;    )SELECT DISTINCT zone.* FROM cte_item_locations cilJOIN test_zones zone ON cil.zone_id = zone.idLIMIT %s OFFSET %s;')
2025-04-17 17:36:49.614637 --- ERROR --- DatabaseError(message='syntax error at or near ";"LINE 4:         WHERE ils.part_id = passed_id;                                             ^',
                                         payload=(20, 20, 0),
                                         sql='WITH passed_id AS (SELECT %s as passed_id),    cte_item_locations AS (        SELECT DISTINCT ils.zone_id FROM test_item_locations ils        WHERE ils.part_id = passed_id;    )SELECT DISTINCT zone.* FROM cte_item_locations cilJOIN test_zones zone ON cil.zone_id = zone.idLIMIT %s OFFSET %s;')
2025-04-17 17:37:05.249411 --- ERROR --- DatabaseError(message='column ils.zone_id does not existLINE 3:         SELECT DISTINCT ils.zone_id FROM test_item_locations...                                ^',
                                         payload=(20, 20, 0),
                                         sql='WITH passed_id AS (SELECT %s as passed_id),    cte_item_locations AS (        SELECT DISTINCT ils.zone_id FROM test_item_locations ils        WHERE ils.part_id = passed_id    )SELECT DISTINCT zone.* FROM cte_item_locations cilJOIN test_zones zone ON cil.zone_id = zone.idLIMIT %s OFFSET %s;')
2025-04-17 17:48:36.064425 --- ERROR --- DatabaseError(message='column "passed_id" does not existLINE 4:         WHERE ils.part_id = passed_id                                    ^',
                                         payload=(20, 20, 0),
                                         sql='WITH passed_id AS (SELECT %s as passed_id),    cte_item_locations AS (        SELECT DISTINCT ils.location_id FROM test_item_locations ils        WHERE ils.part_id = passed_id    ),    cte_locations AS (        SELECT DISTINCT locations.zone_id FROM test_locations locations        WHERE locations.id IN (SELECT location_id FROM cte_item_locations)    )SELECT DISTINCT zone.* FROM cte_locations cilJOIN test_zones zone ON cil.zone_id = zone.idLIMIT %s OFFSET %s;')
2025-04-17 17:48:59.073548 --- ERROR --- DatabaseError(message='syntax error at or near "20"LINE 1: WITH 20 AS passed_id,             ^',
                                         payload=(20, 20, 0),
                                         sql='WITH passed_id AS (SELECT %s as passed_id),    cte_item_locations AS (        SELECT DISTINCT ils.location_id FROM test_item_locations ils        WHERE ils.part_id = (SELECT passed_id FROM passed_id)    ),    cte_locations AS (        SELECT DISTINCT locations.zone_id FROM test_locations locations        WHERE locations.id IN (SELECT location_id FROM cte_item_locations)    )SELECT DISTINCT zone.* FROM cte_locations cilJOIN test_zones zone ON cil.zone_id = zone.idLIMIT %s OFFSET %s;')
2025-04-17 17:50:47.491564 --- ERROR --- DatabaseError(message='syntax error at or near "20"LINE 1: WITH 20 AS passed_id,             ^',
                                         payload=(20, 20, 0),
                                         sql='WITH passed_id AS (SELECT %s AS passed_id),    cte_item_locations AS (        SELECT DISTINCT ils.location_id FROM test_item_locations ils        WHERE ils.part_id = (SELECT passed_id FROM passed_id)    ),    cte_locations AS (        SELECT DISTINCT locations.zone_id FROM test_locations locations        WHERE locations.id IN (SELECT location_id FROM cte_item_locations)    )SELECT DISTINCT zone.* FROM cte_locations cilJOIN test_zones zone ON cil.zone_id = zone.idLIMIT %s OFFSET %s;')
2025-04-19 15:30:08.126535 --- ERROR --- DatabaseError(message='duplicate key value violates unique constraint "test_receipts_receipt_id_key"DETAIL:  Key (receipt_id)=(SIR-00000012) already exists.',
                                         payload=('SIR-00000012', 'Unresolved', datetime.datetime(2025, 4, 19, 15, 29, 27, 691584), 1, 1, '{}'),
                                         sql='INSERT INTO test_receipts(receipt_id, receipt_status, date_submitted, submitted_by, vendor_id, files) VALUES (%s, %s, %s, %s, %s, %s) RETURNING *;')
2025-04-19 16:06:21.543923 --- ERROR --- DatabaseError(message=''int' object is not iterable',
                                         payload=(25, 0),
                                         sql='SELECT * FROM test_items WHERE row_type = 'list' LIMIT %s OFFSET %s;')
2025-04-19 18:57:04.630250 --- ERROR --- DatabaseError(message='duplicate key value violates unique constraint "test_logistics_info_barcode_key"DETAIL:  Key (barcode)=(%6111031005064%) already exists.',
                                         payload=('%6111031005064%', 1, 1, 1, 1),
                                         sql='INSERT INTO test_logistics_info(barcode, primary_location, primary_zone, auto_issue_location, auto_issue_zone) VALUES (%s, %s, %s, %s, %s) RETURNING *;')
2025-04-19 19:30:10.634447 --- ERROR --- DatabaseError(message='syntax error at or near "'total_qoh'"LINE 16: ORDER BY test_items.'total_qoh' ASC                             ^',
                                         payload=('', 'total_qoh', 50, 200),
                                         sql='WITH sum_cte AS (      SELECT mi.id, SUM(mil.quantity_on_hand)::FLOAT8 AS total_sum      FROM test_item_locations mil      JOIN test_items mi ON mil.part_id = mi.id      GROUP BY mi.id    )SELECT test_items.*,    row_to_json(test_item_info.*) as item_info,    sum_cte.total_sum as total_qoh,    (SELECT COALESCE(row_to_json(u), '{}')  FROM units as u WHERE u.id=test_item_info.uom) as uomFROM test_itemsLEFT JOIN sum_cte ON test_items.id = sum_cte.idLEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.idWHERE test_items.search_string LIKE '%%' || %s || '%%'ORDER BY test_items.%s ASCLIMIT %s OFFSET %s;')
2025-04-19 19:30:46.113871 --- ERROR --- DatabaseError(message='not all arguments converted during string formatting',
                                         payload=('', 'id', 50, 0),
                                         sql='WITH sum_cte AS (      SELECT mi.id, SUM(mil.quantity_on_hand)::FLOAT8 AS total_sum      FROM test_item_locations mil      JOIN test_items mi ON mil.part_id = mi.id      GROUP BY mi.id    )SELECT test_items.*,    row_to_json(test_item_info.*) as item_info,    sum_cte.total_sum as total_qoh,    (SELECT COALESCE(row_to_json(u), '{}')  FROM units as u WHERE u.id=test_item_info.uom) as uomFROM test_itemsLEFT JOIN sum_cte ON test_items.id = sum_cte.idLEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.idWHERE test_items.search_string LIKE '%%' || %s || '%%'ORDER BY test_items.? ASCLIMIT %s OFFSET %s;')
2025-04-19 19:32:19.050185 --- ERROR --- DatabaseError(message='syntax error at or near "'id'"LINE 16: ORDER BY test_items.'id' ASC                             ^',
                                         payload=('', 'id', 50, 0),
                                         sql='WITH sum_cte AS (      SELECT mi.id, SUM(mil.quantity_on_hand)::FLOAT8 AS total_sum      FROM test_item_locations mil      JOIN test_items mi ON mil.part_id = mi.id      GROUP BY mi.id    )SELECT test_items.*,    row_to_json(test_item_info.*) as item_info,    sum_cte.total_sum as total_qoh,    (SELECT COALESCE(row_to_json(u), '{}')  FROM units as u WHERE u.id=test_item_info.uom) as uomFROM test_itemsLEFT JOIN sum_cte ON test_items.id = sum_cte.idLEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.idWHERE test_items.search_string LIKE '%%' || %s || '%%'ORDER BY test_items.%s ASCLIMIT %s OFFSET %s;')
2025-04-19 19:34:18.066682 --- ERROR --- DatabaseError(message='not all arguments converted during string formatting',
                                         payload=('', 50, 0, 'id'),
                                         sql='WITH sum_cte AS (      SELECT mi.id, SUM(mil.quantity_on_hand)::FLOAT8 AS total_sum      FROM test_item_locations mil      JOIN test_items mi ON mil.part_id = mi.id      GROUP BY mi.id    )SELECT test_items.*,    row_to_json(test_item_info.*) as item_info,    sum_cte.total_sum as total_qoh,    (SELECT COALESCE(row_to_json(u), '{}')  FROM units as u WHERE u.id=test_item_info.uom) as uomFROM test_itemsLEFT JOIN sum_cte ON test_items.id = sum_cte.idLEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.idWHERE test_items.search_string LIKE '%%' || %s || '%%'ORDER BY test_items.id ASCLIMIT %s OFFSET %s;')
2025-04-19 19:35:13.155663 --- ERROR --- DatabaseError(message='string index out of range',
                                         payload=id,
                                         sql='WITH sum_cte AS (      SELECT mi.id, SUM(mil.quantity_on_hand)::FLOAT8 AS total_sum      FROM test_item_locations mil      JOIN test_items mi ON mil.part_id = mi.id      GROUP BY mi.id    )SELECT test_items.*,    row_to_json(test_item_info.*) as item_info,    sum_cte.total_sum as total_qoh,    (SELECT COALESCE(row_to_json(u), '{}')  FROM units as u WHERE u.id=test_item_info.uom) as uomFROM test_itemsLEFT JOIN sum_cte ON test_items.id = sum_cte.idLEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.idWHERE test_items.search_string LIKE '%%' || %s || '%%'ORDER BY test_items.id ASCLIMIT %s OFFSET %s;')
2025-04-19 19:35:48.262338 --- ERROR --- DatabaseError(message='string index out of range',
                                         payload=id,
                                         sql='WITH sum_cte AS (      SELECT mi.id, SUM(mil.quantity_on_hand)::FLOAT8 AS total_sum      FROM test_item_locations mil      JOIN test_items mi ON mil.part_id = mi.id      GROUP BY mi.id    )SELECT test_items.*,    row_to_json(test_item_info.*) as item_info,    sum_cte.total_sum as total_qoh,    (SELECT COALESCE(row_to_json(u), '{}')  FROM units as u WHERE u.id=test_item_info.uom) as uomFROM test_itemsLEFT JOIN sum_cte ON test_items.id = sum_cte.idLEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.idWHERE test_items.search_string LIKE '%%' || %s || '%%'ORDER BY test_items.id ASCLIMIT %s OFFSET %s;')
2025-04-19 19:36:33.407176 --- ERROR --- DatabaseError(message='column test_items.total_qoh does not existLINE 16: ORDER BY test_items.total_qoh ASC                  ^',
                                         payload=['', 50, 100],
                                         sql='WITH sum_cte AS (      SELECT mi.id, SUM(mil.quantity_on_hand)::FLOAT8 AS total_sum      FROM test_item_locations mil      JOIN test_items mi ON mil.part_id = mi.id      GROUP BY mi.id    )SELECT test_items.*,    row_to_json(test_item_info.*) as item_info,    sum_cte.total_sum as total_qoh,    (SELECT COALESCE(row_to_json(u), '{}')  FROM units as u WHERE u.id=test_item_info.uom) as uomFROM test_itemsLEFT JOIN sum_cte ON test_items.id = sum_cte.idLEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.idWHERE test_items.search_string LIKE '%%' || %s || '%%'ORDER BY test_items.total_qoh ASCLIMIT %s OFFSET %s;')
2025-04-19 19:37:57.421608 --- ERROR --- DatabaseError(message='column test_items.total_qoh does not existLINE 16: ORDER BY test_items.total_qoh ASC                  ^',
                                         payload=['', 50, 50],
                                         sql='WITH sum_cte AS (      SELECT mi.id, SUM(mil.quantity_on_hand)::FLOAT8 AS total_sum      FROM test_item_locations mil      JOIN test_items mi ON mil.part_id = mi.id      GROUP BY mi.id    )SELECT test_items.*,    row_to_json(test_item_info.*) as item_info,    sum_cte.total_sum as total_qoh,    (SELECT COALESCE(row_to_json(u), '{}')  FROM units as u WHERE u.id=test_item_info.uom) as uomFROM test_itemsLEFT JOIN sum_cte ON test_items.id = sum_cte.idLEFT JOIN test_item_info ON test_items.item_info_id = test_item_info.idWHERE test_items.search_string LIKE '%%' || %s || '%%'ORDER BY test_items.total_qoh ASCLIMIT %s OFFSET %s;')
2025-04-19 20:14:49.445587 --- ERROR --- DatabaseError(message='syntax error at or near "item_name"LINE 16: ORDER BY main_items.id item_name                                ^',
                                         payload=['', 50, 0],
                                         sql='WITH sum_cte AS (      SELECT mi.id, SUM(mil.quantity_on_hand)::FLOAT8 AS total_sum      FROM main_item_locations mil      JOIN main_items mi ON mil.part_id = mi.id      GROUP BY mi.id    )SELECT main_items.*,    row_to_json(main_item_info.*) as item_info,    sum_cte.total_sum as total_qoh,    (SELECT COALESCE(row_to_json(u), '{}')  FROM units as u WHERE u.id=main_item_info.uom) as uomFROM main_itemsLEFT JOIN sum_cte ON main_items.id = sum_cte.idLEFT JOIN main_item_info ON main_items.item_info_id = main_item_info.idWHERE main_items.search_string LIKE '%%' || %s || '%%'ORDER BY main_items.id item_nameLIMIT %s OFFSET %s;')
2025-04-19 20:16:09.867711 --- ERROR --- DatabaseError(message='syntax error at or near "total_qoh"LINE 16: ORDER BY main_items.id total_qoh                                ^',
                                         payload=['', 50, 0],
                                         sql='WITH sum_cte AS (      SELECT mi.id, SUM(mil.quantity_on_hand)::FLOAT8 AS total_sum      FROM main_item_locations mil      JOIN main_items mi ON mil.part_id = mi.id      GROUP BY mi.id    )SELECT main_items.*,    row_to_json(main_item_info.*) as item_info,    sum_cte.total_sum as total_qoh,    (SELECT COALESCE(row_to_json(u), '{}')  FROM units as u WHERE u.id=main_item_info.uom) as uomFROM main_itemsLEFT JOIN sum_cte ON main_items.id = sum_cte.idLEFT JOIN main_item_info ON main_items.item_info_id = main_item_info.idWHERE main_items.search_string LIKE '%%' || %s || '%%'ORDER BY main_items.id total_qohLIMIT %s OFFSET %s;')
2025-04-19 20:16:38.335617 --- ERROR --- DatabaseError(message='syntax error at or near "item_name"LINE 16: ORDER BY main_items.id item_name                                ^',
                                         payload=['', 50, 0],
                                         sql='WITH sum_cte AS (      SELECT mi.id, SUM(mil.quantity_on_hand)::FLOAT8 AS total_sum      FROM main_item_locations mil      JOIN main_items mi ON mil.part_id = mi.id      GROUP BY mi.id    )SELECT main_items.*,    row_to_json(main_item_info.*) as item_info,    sum_cte.total_sum as total_qoh,    (SELECT COALESCE(row_to_json(u), '{}')  FROM units as u WHERE u.id=main_item_info.uom) as uomFROM main_itemsLEFT JOIN sum_cte ON main_items.id = sum_cte.idLEFT JOIN main_item_info ON main_items.item_info_id = main_item_info.idWHERE main_items.search_string LIKE '%%' || %s || '%%'ORDER BY main_items.id item_nameLIMIT %s OFFSET %s;')
2025-04-20 09:54:33.948670 --- ERROR --- DatabaseError(message=''int' object is not iterable',
                                         payload=(),
                                         sql='SELECT * FROM sites')